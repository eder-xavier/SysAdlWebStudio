const fs = require('fs'); const path = require('path'); const dir = path.join(__dirname, '..', 'tales/v0.3/generated'); const files = fs.readdirSync(dir).filter(f => f.endsWith('.js')); for (const f of files) { try { const m = require(path.join(dir, f)); if (!m || typeof m.createModel !== 'function') { console.log(f + ': no createModel'); continue; } const model = m.createModel(); console.log('\nFILE:', f); function walkComp(prefix, comp) { try { const cname = prefix ? prefix + '.' + comp.name : comp.name; console.log('COMPONENT', cname); const ports = comp.ports || {}; for (const pn of Object.keys(ports)) { try { const p = ports[pn]; if (!p) continue; const type = (p && typeof p.getSubPort === 'function') ? 'composite' : 'port'; if (type === 'composite') { const subs = Object.keys(p.subports || {}).map(k => k + ':' + (p.subports[k] && p.subports[k].direction)); console.log('  COMPOSITE', pn, 'dir=', p.direction, 'subs=', subs.join(', ')); } else console.log('  PORT', pn, 'dir=', p.direction); } catch (e) { } } for (const k of Object.keys(comp.components || {})) { walkComp(prefix ? prefix + '.' + comp.name : comp.name, comp.components[k]); } } catch (e) { } } walkComp('', model); } catch (e) { console.error('ERR', f, e && e.stack ? e.stack.split('\n')[0] : e); } }
