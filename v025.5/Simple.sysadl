Model SysADLModel ; 
package SysADL.types { 
	value type Int { } 
	value type Boolean { } 
	value type String { } 
	value type Void { } 
	value type Real { }
} 
package Elements { 
	import SysADL.types ; 
	component def SystemCP { ports :  
		configuration { 
			components : 
			s1 : SensorCP { 
				using ports : temp1 : FTempOPT ;
			}
			s2 : SensorCP { 
				using ports : temp2 : FTempOPT ;
			} 
			tempMon : TempMonitorCP { 
				using ports : 
					s1 : CTempIPT ; 
					s2 : CTempIPT ; 
					average : CTempOPT ;
			} 
		stdOut : StdOutCP { using ports : avg : CTempIPT ; } connectors : 
			c1 : FarToCelCN bindings temp1 = s1 ; 
			c2 : FarToCelCN bindings temp2 = s2 ; 
		c3 : CelToCelCN bindings average = avg ; }
	} 
	boundary component def TempMonitorCP { ports : s1 : CTempIPT ; s2 : CTempIPT ; average : CTempOPT ; }
	component def SensorCP { ports : current : FTempOPT ; }
	boundery component def StdOutCP { ports : c3 : CTempIPT ; } 

	port def CTempIPT { flow in Real } 
	port def CTempOPT { flow out Real } 
	port def FTempOPT { flow in Real } 
	
	connector def FarToCelCN { 
		participants : 
			~ f : FTempOPT ; 
			~ c : CTempIPT ;
		flows : Real from f to c 
	} 
	connector def CelToCelCN { 
		participants : 
			~ c1 : CTempOPT ; 
			~ c2 : CTempIPT ; 
		flows : Real from c1 to c2
	} 
	activity def FarToCelAC ( far : Real ) : ( cel : Real ) { 
		body { 
			actions : ftoc : FarToCelAN { 
				using pins : far : Real ;
			} 
			delegate far to far 
			delegate cel to ftoc
		}
	} 

	action def FarToCelAN ( far : Real ) : Real { 
		constraint : post-condition FarToCelEQ
		delegate far to f 
		delegate FarToCelAN to c 
	} 

	constraint FarToCelEQ ( f : Real ) : ( c : Real ) { 
		equation = c == (5*(f - 32)/9)
	} 

	activity def TempMonitorAC ( s1 : Real ) ( s2 : Real ) : ( average : Real ) { 
		body { actions : TempMonitorAN : TempMonitorAN { using pins : t1 : Real ; t2 : Real ; } delegate s1 to t1 delegate s2 to t2 delegate average to TempMonitorAN }
	} 
	
	action def TempMonitorAN ( t1 : Real , t2 : Real ) : Real { 
		constraint : post-condition CalcAverageEQ
		delegate t1 to t1 
		delegate t2 to t2 delegate 
		TempMonitorAN to av 
	} 
	
	constraint CalcAverageEQ ( t1 : Real , t2 : Real ) : ( av : Real ) 
	{ 
		equation = av == (t1 + t2)/2
	} 
	
	executable def FarToCelEX (in f:Real): out Real {
		return 5*(f - 32)/9 ;
	}
	executable def CalcAverageEX(in temp1:Real,in temp2:Real):out Real{
		return (temp1 + temp2)/2 ;
	}	
}

allocations { 
	activity FarToCelAC to FarToCelCN 
	activity TempMonitorAC to TempMonitorCP
	executable FarToCelEX to FarToCelAN 
	executable CalcAverageEX to TempMonitorAN 
}