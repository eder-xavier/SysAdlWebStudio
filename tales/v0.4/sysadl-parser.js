// @generated by Peggy 5.0.6.
//
// https://peggyjs.org/


class peg$SyntaxError extends SyntaxError {
  constructor(message, expected, found, location) {
    super(message);
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";
  }

  format(sources) {
    let str = "Error: " + this.message;
    if (this.location) {
      let src = null;
      const st = sources.find(s => s.source === this.location.source);
      if (st) {
        src = st.text.split(/\r\n|\n|\r/g);
      }
      const s = this.location.start;
      const offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
        ? this.location.source.offset(s)
        : s;
      const loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
      if (src) {
        const e = this.location.end;
        const filler = "".padEnd(offset_s.line.toString().length, " ");
        const line = src[s.line - 1];
        const last = s.line === e.line ? e.column : line.length + 1;
        const hatLen = (last - s.column) || 1;
        str += "\n --> " + loc + "\n"
            + filler + " |\n"
            + offset_s.line + " | " + line + "\n"
            + filler + " | " + "".padEnd(s.column - 1, " ")
            + "".padEnd(hatLen, "^");
      } else {
        str += "\n at " + loc;
      }
    }
    return str;
  }

  static buildMessage(expected, found) {
    function hex(ch) {
      return ch.codePointAt(0).toString(16).toUpperCase();
    }

    const nonPrintable = Object.prototype.hasOwnProperty.call(RegExp.prototype, "unicode")
      ? new RegExp("[\\p{C}\\p{Mn}\\p{Mc}]", "gu")
      : null;
    function unicodeEscape(s) {
      if (nonPrintable) {
        return s.replace(nonPrintable,  ch => "\\u{" + hex(ch) + "}");
      }
      return s;
    }

    function literalEscape(s) {
      return unicodeEscape(s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

    function classEscape(s) {
      return unicodeEscape(s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

    const DESCRIBE_EXPECTATION_FNS = {
      literal(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },

      class(expectation) {
        const escapedParts = expectation.parts.map(
          part => (Array.isArray(part)
            ? classEscape(part[0]) + "-" + classEscape(part[1])
            : classEscape(part))
        );

        return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]" + (expectation.unicode ? "u" : "");
      },

      any() {
        return "any character";
      },

      end() {
        return "end of input";
      },

      other(expectation) {
        return expectation.description;
      },
    };

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      const descriptions = expected.map(describeExpectation);
      descriptions.sort();

      if (descriptions.length > 0) {
        let j = 1;
        for (let i = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }
}

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  const peg$FAILED = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions = {
    start: peg$parsestart,
  };
  let peg$startRuleFunction = peg$parsestart;

  const peg$c0 = "Model";
  const peg$c1 = ";";
  const peg$c2 = "using";
  const peg$c3 = "style";
  const peg$c4 = "{";
  const peg$c5 = "}";
  const peg$c6 = "function";
  const peg$c7 = "=";
  const peg$c8 = "invariant";
  const peg$c9 = "abstract";
  const peg$c10 = "activity";
  const peg$c11 = "def";
  const peg$c12 = "(";
  const peg$c13 = ")";
  const peg$c14 = ":";
  const peg$c15 = "component";
  const peg$c16 = "ports";
  const peg$c17 = "compose";
  const peg$c18 = "any";
  const peg$c19 = "connector";
  const peg$c20 = "participants";
  const peg$c21 = "flows";
  const peg$c22 = "flow";
  const peg$c23 = "to";
  const peg$c24 = "~";
  const peg$c25 = "protocol";
  const peg$c26 = "send";
  const peg$c27 = "via";
  const peg$c28 = "receive";
  const peg$c29 = "from";
  const peg$c30 = "package";
  const peg$c31 = "uses";
  const peg$c32 = "import";
  const peg$c33 = "Requirement";
  const peg$c34 = "text";
  const peg$c35 = "satisfied";
  const peg$c36 = "by";
  const peg$c37 = "derive";
  const peg$c38 = ".";
  const peg$c39 = "architecture";
  const peg$c40 = "styles";
  const peg$c41 = "boundary";
  const peg$c42 = "implements";
  const peg$c43 = "port";
  const peg$c44 = "configuration";
  const peg$c45 = "components";
  const peg$c46 = "connectors";
  const peg$c47 = "delegations";
  const peg$c48 = "bindings";
  const peg$c49 = "concrete";
  const peg$c50 = "^";
  const peg$c51 = "datatype";
  const peg$c52 = "extends";
  const peg$c53 = "attributes";
  const peg$c54 = "value";
  const peg$c55 = "type";
  const peg$c56 = "unit";
  const peg$c57 = "dimension";
  const peg$c58 = "enum";
  const peg$c59 = "pre-condition";
  const peg$c60 = "post-condition";
  const peg$c61 = "action";
  const peg$c62 = "constraint";
  const peg$c63 = "equation";
  const peg$c64 = "executable";
  const peg$c65 = "in";
  const peg$c66 = ",";
  const peg$c67 = "out";
  const peg$c68 = "body";
  const peg$c69 = "actions";
  const peg$c70 = "pins";
  const peg$c71 = "delegate";
  const peg$c72 = "switch";
  const peg$c73 = "case";
  const peg$c74 = "datastore";
  const peg$c75 = "initial";
  const peg$c76 = "databuffer";
  const peg$c77 = "++";
  const peg$c78 = "--";
  const peg$c79 = "let";
  const peg$c80 = "else";
  const peg$c81 = "if";
  const peg$c82 = "return";
  const peg$c83 = "while";
  const peg$c84 = "do";
  const peg$c85 = "for";
  const peg$c86 = "default";
  const peg$c87 = "?";
  const peg$c88 = "implies";
  const peg$c89 = "||";
  const peg$c90 = "&&";
  const peg$c91 = "|";
  const peg$c92 = "&";
  const peg$c93 = "instanceof";
  const peg$c94 = "hastype";
  const peg$c95 = "new";
  const peg$c96 = "[";
  const peg$c97 = "]";
  const peg$c98 = "..";
  const peg$c99 = "->";
  const peg$c100 = "null";
  const peg$c101 = "::";
  const peg$c102 = "this";
  const peg$c103 = "+=";
  const peg$c104 = "-=";
  const peg$c105 = "*=";
  const peg$c106 = "%=";
  const peg$c107 = "/=";
  const peg$c108 = "&=";
  const peg$c109 = "|=";
  const peg$c110 = "^=";
  const peg$c111 = "<<=";
  const peg$c112 = ">>=";
  const peg$c113 = ">>>=";
  const peg$c114 = "==";
  const peg$c115 = "!=";
  const peg$c116 = "<=";
  const peg$c117 = ">=";
  const peg$c118 = "<<";
  const peg$c119 = ">>>";
  const peg$c120 = ">>";
  const peg$c121 = "property";
  const peg$c122 = "inout";
  const peg$c123 = "always";
  const peg$c124 = "several";
  const peg$c125 = "once";
  const peg$c126 = "perhaps";
  const peg$c127 = "allocations";
  const peg$c128 = "EnvironmentDefinition";
  const peg$c129 = "Entity";
  const peg$c130 = "entities";
  const peg$c131 = "properties";
  const peg$c132 = "roles";
  const peg$c133 = "Property";
  const peg$c134 = "Role";
  const peg$c135 = "Connection";
  const peg$c136 = "EnvironmentConfiguration";
  const peg$c137 = "EventsDefinitions";
  const peg$c138 = "Event";
  const peg$c139 = "ON";
  const peg$c140 = "THEN";
  const peg$c141 = "SceneDefinitions";
  const peg$c142 = "Scene";
  const peg$c143 = "on";
  const peg$c144 = "start";
  const peg$c145 = "finish";
  const peg$c146 = "ScenarioDefinitions";
  const peg$c147 = "Scenario";
  const peg$c148 = "ScenarioExecution";
  const peg$c149 = "inject";
  const peg$c150 = "inject_batch";
  const peg$c151 = "parallel";
  const peg$c152 = "sequential";
  const peg$c153 = "after";
  const peg$c154 = "ms";
  const peg$c155 = "s";
  const peg$c156 = "when";
  const peg$c157 = "before";
  const peg$c158 = "repeat";
  const peg$c159 = "-";
  const peg$c160 = "\"";
  const peg$c161 = "\\";
  const peg$c162 = "'";
  const peg$c163 = "true";
  const peg$c164 = "false";
  const peg$c165 = "//";
  const peg$c166 = "/*";
  const peg$c167 = "*/";

  const peg$r0 = /^[!$~]/;
  const peg$r1 = /^[<>]/;
  const peg$r2 = /^[+\-]/;
  const peg$r3 = /^[%*\/]/;
  const peg$r4 = /^[;|]/;
  const peg$r5 = /^[1n]/;
  const peg$r6 = /^[a-zA-Z_]/;
  const peg$r7 = /^[a-zA-Z0-9_]/;
  const peg$r8 = /^[0-9]/;
  const peg$r9 = /^[^"\\]/;
  const peg$r10 = /^[^'\\]/;
  const peg$r11 = /^[ \t\n\r]/;
  const peg$r12 = /^[^\n\r]/;

  const peg$e0 = peg$literalExpectation("Model", false);
  const peg$e1 = peg$literalExpectation(";", false);
  const peg$e2 = peg$literalExpectation("using", false);
  const peg$e3 = peg$literalExpectation("style", false);
  const peg$e4 = peg$literalExpectation("{", false);
  const peg$e5 = peg$literalExpectation("}", false);
  const peg$e6 = peg$literalExpectation("function", false);
  const peg$e7 = peg$literalExpectation("=", false);
  const peg$e8 = peg$literalExpectation("invariant", false);
  const peg$e9 = peg$literalExpectation("abstract", false);
  const peg$e10 = peg$literalExpectation("activity", false);
  const peg$e11 = peg$literalExpectation("def", false);
  const peg$e12 = peg$literalExpectation("(", false);
  const peg$e13 = peg$literalExpectation(")", false);
  const peg$e14 = peg$literalExpectation(":", false);
  const peg$e15 = peg$literalExpectation("component", false);
  const peg$e16 = peg$literalExpectation("ports", false);
  const peg$e17 = peg$literalExpectation("compose", false);
  const peg$e18 = peg$literalExpectation("any", false);
  const peg$e19 = peg$literalExpectation("connector", false);
  const peg$e20 = peg$literalExpectation("participants", false);
  const peg$e21 = peg$literalExpectation("flows", false);
  const peg$e22 = peg$literalExpectation("flow", false);
  const peg$e23 = peg$literalExpectation("to", false);
  const peg$e24 = peg$literalExpectation("~", false);
  const peg$e25 = peg$literalExpectation("protocol", false);
  const peg$e26 = peg$literalExpectation("send", false);
  const peg$e27 = peg$literalExpectation("via", false);
  const peg$e28 = peg$literalExpectation("receive", false);
  const peg$e29 = peg$literalExpectation("from", false);
  const peg$e30 = peg$literalExpectation("package", false);
  const peg$e31 = peg$literalExpectation("uses", false);
  const peg$e32 = peg$literalExpectation("import", false);
  const peg$e33 = peg$literalExpectation("Requirement", false);
  const peg$e34 = peg$literalExpectation("text", false);
  const peg$e35 = peg$literalExpectation("satisfied", false);
  const peg$e36 = peg$literalExpectation("by", false);
  const peg$e37 = peg$literalExpectation("derive", false);
  const peg$e38 = peg$literalExpectation(".", false);
  const peg$e39 = peg$literalExpectation("architecture", false);
  const peg$e40 = peg$literalExpectation("styles", false);
  const peg$e41 = peg$literalExpectation("boundary", false);
  const peg$e42 = peg$literalExpectation("implements", false);
  const peg$e43 = peg$literalExpectation("port", false);
  const peg$e44 = peg$literalExpectation("configuration", false);
  const peg$e45 = peg$literalExpectation("components", false);
  const peg$e46 = peg$literalExpectation("connectors", false);
  const peg$e47 = peg$literalExpectation("delegations", false);
  const peg$e48 = peg$literalExpectation("bindings", false);
  const peg$e49 = peg$literalExpectation("concrete", false);
  const peg$e50 = peg$literalExpectation("^", false);
  const peg$e51 = peg$literalExpectation("datatype", false);
  const peg$e52 = peg$literalExpectation("extends", false);
  const peg$e53 = peg$literalExpectation("attributes", false);
  const peg$e54 = peg$literalExpectation("value", false);
  const peg$e55 = peg$literalExpectation("type", false);
  const peg$e56 = peg$literalExpectation("unit", false);
  const peg$e57 = peg$literalExpectation("dimension", false);
  const peg$e58 = peg$literalExpectation("enum", false);
  const peg$e59 = peg$literalExpectation("pre-condition", false);
  const peg$e60 = peg$literalExpectation("post-condition", false);
  const peg$e61 = peg$literalExpectation("action", false);
  const peg$e62 = peg$literalExpectation("constraint", false);
  const peg$e63 = peg$literalExpectation("equation", false);
  const peg$e64 = peg$literalExpectation("executable", false);
  const peg$e65 = peg$literalExpectation("in", false);
  const peg$e66 = peg$literalExpectation(",", false);
  const peg$e67 = peg$literalExpectation("out", false);
  const peg$e68 = peg$literalExpectation("body", false);
  const peg$e69 = peg$literalExpectation("actions", false);
  const peg$e70 = peg$literalExpectation("pins", false);
  const peg$e71 = peg$literalExpectation("delegate", false);
  const peg$e72 = peg$literalExpectation("switch", false);
  const peg$e73 = peg$literalExpectation("case", false);
  const peg$e74 = peg$literalExpectation("datastore", false);
  const peg$e75 = peg$literalExpectation("initial", false);
  const peg$e76 = peg$literalExpectation("databuffer", false);
  const peg$e77 = peg$literalExpectation("++", false);
  const peg$e78 = peg$literalExpectation("--", false);
  const peg$e79 = peg$literalExpectation("let", false);
  const peg$e80 = peg$literalExpectation("else", false);
  const peg$e81 = peg$literalExpectation("if", false);
  const peg$e82 = peg$literalExpectation("return", false);
  const peg$e83 = peg$literalExpectation("while", false);
  const peg$e84 = peg$literalExpectation("do", false);
  const peg$e85 = peg$literalExpectation("for", false);
  const peg$e86 = peg$literalExpectation("default", false);
  const peg$e87 = peg$literalExpectation("?", false);
  const peg$e88 = peg$literalExpectation("implies", false);
  const peg$e89 = peg$literalExpectation("||", false);
  const peg$e90 = peg$literalExpectation("&&", false);
  const peg$e91 = peg$literalExpectation("|", false);
  const peg$e92 = peg$literalExpectation("&", false);
  const peg$e93 = peg$literalExpectation("instanceof", false);
  const peg$e94 = peg$literalExpectation("hastype", false);
  const peg$e95 = peg$classExpectation(["!", "$", "~"], false, false, false);
  const peg$e96 = peg$literalExpectation("new", false);
  const peg$e97 = peg$literalExpectation("[", false);
  const peg$e98 = peg$literalExpectation("]", false);
  const peg$e99 = peg$literalExpectation("..", false);
  const peg$e100 = peg$literalExpectation("->", false);
  const peg$e101 = peg$literalExpectation("null", false);
  const peg$e102 = peg$literalExpectation("::", false);
  const peg$e103 = peg$literalExpectation("this", false);
  const peg$e104 = peg$literalExpectation("+=", false);
  const peg$e105 = peg$literalExpectation("-=", false);
  const peg$e106 = peg$literalExpectation("*=", false);
  const peg$e107 = peg$literalExpectation("%=", false);
  const peg$e108 = peg$literalExpectation("/=", false);
  const peg$e109 = peg$literalExpectation("&=", false);
  const peg$e110 = peg$literalExpectation("|=", false);
  const peg$e111 = peg$literalExpectation("^=", false);
  const peg$e112 = peg$literalExpectation("<<=", false);
  const peg$e113 = peg$literalExpectation(">>=", false);
  const peg$e114 = peg$literalExpectation(">>>=", false);
  const peg$e115 = peg$literalExpectation("==", false);
  const peg$e116 = peg$literalExpectation("!=", false);
  const peg$e117 = peg$literalExpectation("<=", false);
  const peg$e118 = peg$literalExpectation(">=", false);
  const peg$e119 = peg$classExpectation(["<", ">"], false, false, false);
  const peg$e120 = peg$literalExpectation("<<", false);
  const peg$e121 = peg$literalExpectation(">>>", false);
  const peg$e122 = peg$literalExpectation(">>", false);
  const peg$e123 = peg$classExpectation(["+", "-"], false, false, false);
  const peg$e124 = peg$classExpectation(["%", "*", "/"], false, false, false);
  const peg$e125 = peg$literalExpectation("property", false);
  const peg$e126 = peg$literalExpectation("inout", false);
  const peg$e127 = peg$classExpectation([";", "|"], false, false, false);
  const peg$e128 = peg$literalExpectation("always", false);
  const peg$e129 = peg$literalExpectation("several", false);
  const peg$e130 = peg$literalExpectation("once", false);
  const peg$e131 = peg$literalExpectation("perhaps", false);
  const peg$e132 = peg$literalExpectation("allocations", false);
  const peg$e133 = peg$literalExpectation("EnvironmentDefinition", false);
  const peg$e134 = peg$classExpectation(["1", "n"], false, false, false);
  const peg$e135 = peg$literalExpectation("Entity", false);
  const peg$e136 = peg$literalExpectation("entities", false);
  const peg$e137 = peg$literalExpectation("properties", false);
  const peg$e138 = peg$literalExpectation("roles", false);
  const peg$e139 = peg$literalExpectation("Property", false);
  const peg$e140 = peg$literalExpectation("Role", false);
  const peg$e141 = peg$literalExpectation("Connection", false);
  const peg$e142 = peg$literalExpectation("EnvironmentConfiguration", false);
  const peg$e143 = peg$literalExpectation("EventsDefinitions", false);
  const peg$e144 = peg$literalExpectation("Event", false);
  const peg$e145 = peg$literalExpectation("ON", false);
  const peg$e146 = peg$literalExpectation("THEN", false);
  const peg$e147 = peg$literalExpectation("SceneDefinitions", false);
  const peg$e148 = peg$literalExpectation("Scene", false);
  const peg$e149 = peg$literalExpectation("on", false);
  const peg$e150 = peg$literalExpectation("start", false);
  const peg$e151 = peg$literalExpectation("finish", false);
  const peg$e152 = peg$literalExpectation("ScenarioDefinitions", false);
  const peg$e153 = peg$literalExpectation("Scenario", false);
  const peg$e154 = peg$literalExpectation("ScenarioExecution", false);
  const peg$e155 = peg$literalExpectation("inject", false);
  const peg$e156 = peg$literalExpectation("inject_batch", false);
  const peg$e157 = peg$literalExpectation("parallel", false);
  const peg$e158 = peg$literalExpectation("sequential", false);
  const peg$e159 = peg$literalExpectation("after", false);
  const peg$e160 = peg$literalExpectation("ms", false);
  const peg$e161 = peg$literalExpectation("s", false);
  const peg$e162 = peg$literalExpectation("when", false);
  const peg$e163 = peg$literalExpectation("before", false);
  const peg$e164 = peg$literalExpectation("repeat", false);
  const peg$e165 = peg$otherExpectation("Identifier");
  const peg$e166 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false, false);
  const peg$e167 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false, false);
  const peg$e168 = peg$otherExpectation("Integer");
  const peg$e169 = peg$classExpectation([["0", "9"]], false, false, false);
  const peg$e170 = peg$otherExpectation("Integer with sign");
  const peg$e171 = peg$literalExpectation("-", false);
  const peg$e172 = peg$otherExpectation("String");
  const peg$e173 = peg$literalExpectation("\"", false);
  const peg$e174 = peg$literalExpectation("\\", false);
  const peg$e175 = peg$anyExpectation();
  const peg$e176 = peg$classExpectation(["\"", "\\"], true, false, false);
  const peg$e177 = peg$literalExpectation("'", false);
  const peg$e178 = peg$classExpectation(["'", "\\"], true, false, false);
  const peg$e179 = peg$otherExpectation("Boolean");
  const peg$e180 = peg$literalExpectation("true", false);
  const peg$e181 = peg$literalExpectation("false", false);
  const peg$e182 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false, false);
  const peg$e183 = peg$literalExpectation("//", false);
  const peg$e184 = peg$classExpectation(["\n", "\r"], true, false, false);
  const peg$e185 = peg$literalExpectation("/*", false);
  const peg$e186 = peg$literalExpectation("*/", false);

  function peg$f0(model) {    return model;  }
  function peg$f1(name, el) {    return el;  }
  function peg$f2(name, involvedElements, m) {    return m;  }
  function peg$f3(name, involvedElements, members, allocation) {    return allocation;  }
  function peg$f4(name, involvedElements, members, allocation) {
    return {
      type: "Model",
      name,
      involvedElements,
      members,
      allocation,
      location: location()
    };
  }
  function peg$f5(name, m) {    return m;  }
  function peg$f6(name, members) {
    return { type: "Style", name, members, location: location() };
  }
  function peg$f7(name, d) {    return d;  }
  function peg$f8(name, def) {
    return { type: "Function", name, def: def || null, location: location() };
  }
  function peg$f9(name, e) {    return e;  }
  function peg$f10(name, expr) {
    return { type: "Invariant", name, expr: expr || null, location: location() };
  }
  function peg$f11(def) {    return def;  }
  function peg$f12(name, signature) {
    // se não houver 'signature', é só uma declaração
    if (!signature) {
      return {
        type:         "AbstractActivityDef",
        name,
        inParameters: [],
        outParameters: [],
        body:         null,
        location:     location()
      };
    }
    // caso haja assinatura+bloco, extrai os valores
    const [, inParams, outParams, body] = signature;
    return {
      type:         "AbstractActivityDef",
      name,
      // inParams: cada p tem PinList em p[3]
      inParameters: inParams.map(p => p[3] || []),
      // outParams: PinList aparece em index 5 (por causa do ":" e parênteses)
      outParameters: outParams ? outParams[5] || [] : [],
      body,
      location:     location()
    };
  }
  function peg$f13(name, bounds, ps) {
    return ps.map(item => item[1]);
  }
  function peg$f14(name, bounds, ports, c) {    return c;  }
  function peg$f15(name, bounds, ports, composition) {
    return {
      type: "AbstractComponentDef",
      name,
      bounds,
      ports: ports || [],
      composition,
      location: location()
    };
  }
  function peg$f16(name, flowProperty, bounds) {
    return { type: "AbstractPortUse", name, flowProperty, bounds, location: location() };
  }
  function peg$f17(name, first, rest) {
    return [ first, ...rest.map(r => r[1]) ];
  }
  function peg$f18(name, ports, f) {    return f;  }
  function peg$f19(name, ports, flows) {
    return {
      type: "AbstractConnectorDef",
      name,
      ports: ports || [],
      flows: flows || [],
      location: location()
    };
  }
  function peg$f20(source, target) {
    return { type: "AbstractFlow", source, target, location: location() };
  }
  function peg$f21(name, flowProperty) {
    return { type: "AbstractPortUse", isReverse: true, name, flowProperty, location: location() };
  }
  function peg$f22(name, body) {
    return { type: "AbstractProtocol", name, body, location: location() };
  }
  function peg$f23(recControl, body, recType, r) {    return { recType, recursive: r };  }
  function peg$f24(recControl, body, recursive) {
    return { type: "AbstractProtocolBody", recControl, body, recursive, location: location() };
  }
  function peg$f25(body) {    return body;  }
  function peg$f26(flowTo) {
    return { type: "AbstractActionSend", flowTo, location: location() };
  }
  function peg$f27(flowTo) {
    return { type: "AbstractActionReceive", flowTo, location: location() };
  }
  function peg$f28(name, appliedStyle, i) {    return i;  }
  function peg$f29(name, appliedStyle, imports, d) {    return d;  }
  function peg$f30(name, appliedStyle, imports, importedDefinitions, d) {    return d;  }
  function peg$f31(name, appliedStyle, imports, importedDefinitions, definitions) {
    return {
      type: "Package",
      name,
      appliedStyle,
      imports,
      importedDefinitions,
      definitions,
      location: location()
    };
  }
  function peg$f32(name, id, t) {    return t;  }
  function peg$f33(name, id, text, s) {    return s;  }
  function peg$f34(name, id, text, satisfiedBy, d) {    return d;  }
  function peg$f35(name, id, text, satisfiedBy, derive, m) {    return m;  }
  function peg$f36(name, id, text, satisfiedBy, derive, members) {
    return { type: "Requirement", name, id, text, satisfiedBy, derive, members, location: location() };
  }
  function peg$f37(head, t) {    return t;  }
  function peg$f38(head, tail) {    return [head, ...tail].join('.');  }
  function peg$f39(def) {    return def;  }
  function peg$f40(def) {    return def;  }
  function peg$f41(def) {    return def;  }
  function peg$f42(def) {    return def;  }
  function peg$f43(name, appliedStyle, ports, p) {    return p;  }
  function peg$f44(name, appliedStyle, ports, properties, c) {    return c;  }
  function peg$f45(name, appliedStyle, ports, properties, composite) {
    return { type: "ArchitectureDef", name, appliedStyle, ports, properties, composite, location: location() };
  }
  function peg$f46(isBoundary, name, appliedStyle, ac) {    return ac;  }
  function peg$f47(isBoundary, name, appliedStyle, abstractComponent, ps) {
    return ps.map(item => item[1]);
  }
  function peg$f48(isBoundary, name, appliedStyle, abstractComponent, ports, m) {    return m;  }
  function peg$f49(isBoundary, name, appliedStyle, abstractComponent, ports, members, c) {    return c;  }
  function peg$f50(isBoundary, name, appliedStyle, abstractComponent, ports, members, composite) {
    return { type: "ComponentDef", isBoundary: !!isBoundary, name, appliedStyle, abstractComponent: abstractComponent || null, ports: ports || [], members, composite, location: location() };
  }
  function peg$f51(name, ac) {    return ac;  }
  function peg$f52(name, abstractConnector, ps) {
    return ps.map(item => item[1]);
  }
  function peg$f53(name, abstractConnector, ports, composite, f) {    return f;  }
  function peg$f54(name, abstractConnector, ports, composite, flows, members) {
    return { type: "ConnectorDef", name, abstractConnector: abstractConnector || null, ports: ports || [], composite, flows: flows || [], members, location: location() };
  }
  function peg$f55(def) {    return def;  }
  function peg$f56(name, ps) {
    return ps.map(item => item[1]);
  }
  function peg$f57(name, ports, members) {
    return { type: "CompositePortDef", name, ports: ports || [], members, location: location() };
  }
  function peg$f58(name, flowProperties, flowType, arrayIndex, members) {
    return { type: "SimplePortDef", name, flowProperties, flowType, arrayIndex, members, location: location() };
  }
  function peg$f59(components, connectors, delegations) {
    return { type: "Configuration", components: components || [], connectors: connectors || [], delegations: delegations || [], location: location() };
  }
  function peg$f60(c) {    return c;  }
  function peg$f61(components) {    return components;  }
  function peg$f62(c) {    return c;  }
  function peg$f63(connectors) {    return connectors;  }
  function peg$f64(name, definition, bounds, head, tail) {
    return [head, ...tail.map(t => t[1])];
  }
  function peg$f65(name, definition, bounds, body) {
    return { type: "ComponentUse", name, definition, bounds, body, location: location() };
  }
  function peg$f66(name, definition, bounds, bindings, body) {
    return { type: "ConnectorUse", name, definition, bounds, bindings, body, location: location() };
  }
  function peg$f67(name, definition, c) {    return c;  }
  function peg$f68(name, definition, concrete, bounds, body) {
    return { type: "PortUse", name, definition, concrete: concrete || null, bounds, body, location: location() };
  }
  function peg$f69(port) {    return { ...port, isReverse: true };  }
  function peg$f70(source, destination) {
    return { type: "Delegation", source, destination, location: location() };
  }
  function peg$f71(flowType, source, destination) {
    return { type: "Flow", flowType, source, destination, location: location() };
  }
  function peg$f72(source, destination) {
    return { type: "ConnectorBinding", source, destination, location: location() };
  }
  function peg$f73(tu) {    return tu;  }
  function peg$f74(tu) {    return tu;  }
  function peg$f75(name, s) {    return s;  }
  function peg$f76(name, superType, attrs) {
    return attrs.map(a => a[1]);
  }
  function peg$f77(name, superType, attributes, properties) {
    return {
      type:       "DataTypeDef",
      name,
      superType: superType || null,
      attributes: attributes || [],
      properties,
      location:   location()
    };
  }
  function peg$f78(name, s) {    return s;  }
  function peg$f79(name, superType, u) {    return u;  }
  function peg$f80(name, superType, unit, d) {    return d;  }
  function peg$f81(name, superType, unit, dimension, properties) {
    return { type: "ValueTypeDef", name, superType: superType || null, unit: unit || null, dimension: dimension || null, properties, location: location() };
  }
  function peg$f82(name, properties, literals) {
    // garantir que 'literals' seja um array (compatível com o analisador/semântica)
    const literalItems = literals
      ? (Array.isArray(literals) ? literals : (literals.items || []))
      : [];
    return { type: "Enumeration", name, properties, literals: literalItems, location: location() };
  }
  function peg$f83(name) {    return { type: "EnumLiteralValue", name, location: location() };  }
  function peg$f84(name, body) {    return { type: "DimensionDef", name, properties: body ? body.props : [], location: location() };  }
  function peg$f85(name, body) {    return { type: "UnitDef", name, dimension: body ? body.dimension : null, properties: body ? body.props : [], location: location() };  }
  function peg$f86(kind, definition) {    return { type: "ConstraintUse", kind, definition, location: location() };  }
  function peg$f87(kind) {    return kind;  }
  function peg$f88(name, inParameters, returnType, first, rest) {
    return [ first, ...rest.map(r => r[1]) ];
  }
  function peg$f89(name, inParameters, returnType, stmt) {    return stmt;  }
  function peg$f90(name, inParameters, returnType, stmts) {
    // monte o AST igual antes, usando inParameters direto
    const properties    = stmts.filter(s => s.type === "Property");
    const behaviorDefs  = stmts.filter(s => s.type === "BehaviorDef");
    const dataDefs      = stmts.filter(s => s.type === "DataDef");
    const constraints   = stmts.filter(Array.isArray).flat();
    const delegations   = stmts.filter(s => s.type === "ActivityDelegation");
    return {
      type:        "ActionDef",
      name,
      inParameters,     // aqui vem o array montado pela sua PinList
      returnType,
      properties,
      behaviorDefs,
      dataDefs,
      constraints,
      delegations,
      location:    location()
    };
  }
  function peg$f91(name, abstractActivity, inParams, outParams, body) {
    return {
      type:           "ActivityDef",
      name,
      implements:     abstractActivity ? abstractActivity[3] : [],
      // cada inParam tem PinList em p[3]
      inParameters:   inParams.map(p => p[3] || []),
      // outParams: PinList está em index 5 (por causa do ":" + parênteses)
      outParameters:  outParams ? outParams[5] || [] : [],
      body:           body   || null,
      location:       location()
    };
  }
  function peg$f92(name, inParameters, outParameters, members, delegations, body) {
    return { type: "Protocol", name, inParameters: inParameters || [], outParameters, members, delegations, body, location: location() };
  }
  function peg$f93(name, inParameters, outParameters, members, equation) {
    return { type: "ConstraintDef", name, inParameters, outParameters, members, equation, location: location() };
  }
  function peg$f94(name, first, p) {    return p;  }
  function peg$f95(name, first, rest) {    return [ first, ...rest ];  }
  function peg$f96(name, inParams, returnType, properties, body) {
    return {
      type:       "Executable",
      name,
      params:     inParams||[],
      returnType,
      properties: properties.map(p => p[1]),
      body:       body.map(b => b[1]),
      location:   location()
    };
  }
  function peg$f97(list) {    return list;  }
  function peg$f98(actions, r) {    return r;  }
  function peg$f99(actions, rels, d) {    return d;  }
  function peg$f100(actions, rels, dataObjs) {
    return {
      type:        "ActivityBody",
      actions:     actions  || [],
      relations:   rels,
      dataObjects: dataObjs,
      location:    location()
    };
  }
  function peg$f101(name, type) {    return { name, type, location: location() };  }
  function peg$f102(name, definition) {
    return {
      type:       "ActionUse",
      name,
      definition,
      using:      [],
      properties: [],
      location:   location()
    };
  }
  function peg$f103(name, definition, pu) {    return pu;  }
  function peg$f104(name, definition, up, props) {
    return {
      type:       "ActionUse",
      name,
      definition,
      using:      up || [],
      properties: props,
      location:   location()
    };
  }
  function peg$f105(source, target) {    return { type:"ActivityDelegation", source, target, location:location() };  }
  function peg$f106(source, target) {
    return { type: "ActivityFlow", source, target, location: location() };
  }
  function peg$f107(cases) {    return { type: "ActivitySwitch", cases, location: location() };  }
  function peg$f108(condition, target) {
    return { type: "ActivitySwitchCase", condition, target, location: location() };
  }
  function peg$f109(name, type, arrayIndex, props, initVal) {
    return {
      type:       "DataStore",
      name,
      dataType:   type,
      arrayIndex,
      properties: props,
      initValue:  initVal ? initVal[4] : null,
      location:   location()
    };
  }
  function peg$f110(name, type, arrayIndex) {
    return {
      type:       "DataStore",
      name,
      dataType:   type,
      arrayIndex,
      properties: [],
      initValue:  null,
      location:   location()
    };
  }
  function peg$f111(name, type, arrayIndex, props, initVal) {
    return {
      type:       "DataBuffer",
      name,
      dataType:   type,
      arrayIndex,
      properties: props,
      initValue:  initVal ? initVal[4] : null,
      location:   location()
    };
  }
  function peg$f112(name, type, arrayIndex) {
    return {
      type:       "DataBuffer",
      name,
      dataType:   type,
      arrayIndex,
      properties: [],
      initValue:  null,
      location:   location()
    };
  }
  function peg$f113(recControl, body, recType, r) {    return { recType, recursive: r };  }
  function peg$f114(recControl, body, recursive) {    return { type: "ProtocolBody", recControl, body, recursive, location: location() };
  }
  function peg$f115(body) {    return body;  }
  function peg$f116(expression, flowTo) {    return { type: "ActionSend", expression, flowTo, location: location() };
  }
  function peg$f117(v, flowTo) {    return { type: "ActionReceive", variable: v, flowTo, location: location() };
  }
  function peg$f118(stmt) {    return stmt;  }
  function peg$f119(name, op) {    return { type:"IncDec", name, op, location: location() };  }
  function peg$f120(stmt) {    return stmt;  }
  function peg$f121(stmt) {    return stmt;  }
  function peg$f122(stmts) {
    return { type: "BlockStatement", body: stmts, location: location() };
  }
  function peg$f123(name, definition, arrayIndex, value) {
    return { type: "VariableDecl", name, definition, arrayIndex, value, location: location() };
  }
  function peg$f124(main_if, s) {    return s;  }
  function peg$f125(main_if, else_if, s) {    return s;  }
  function peg$f126(main_if, else_if, else_stmt) {
    return { type: "IfBlockStatement", main_if, else_if, else_stmt, location: location() };
  }
  function peg$f127(condition, body) {
    return { type: "IfStatement", condition, body, location: location() };
  }
  function peg$f128(value) {    return { type: "ReturnStatement", value, location: location() };  }
  function peg$f129(condition, body) {    return { type: "WhileStatement", condition, body, location: location() };  }
  function peg$f130(body, condition) {    return { type: "DoStatement", body, condition, location: location() };  }
  function peg$f131(control, body) {    return { type: "ForStatement", control, body, location: location() };  }
  function peg$f132(vars) {    return { type: "ForControl", vars, location: location() };  }
  function peg$f133(v, expr) {    return { type: "ForVar", variable: v, expression: expr, location: location() };  }
  function peg$f134(expr, clauses, defaultClause) {    return { type: "SwitchStatement", expression: expr, clauses, defaultClause, location: location() };  }
  function peg$f135(value, body) {    return { type: "SwitchClause", value, body, location: location() };  }
  function peg$f136(body) {    return { type: "DefaultSwitchClause", body, location: location() };  }
  function peg$f137(left, op, right) {    return { type: "AssignmentExpression", left, operator: op, right, location: location() };  }
  function peg$f138(condition, then, alternate) {    return { type: "ConditionalExpression", condition, then, alternate, location: location() };  }
  function peg$f139(left, right) {    return right;  }
  function peg$f140(left, tail) {    return tail.length ? { type: "BinaryExpression", operator: "implies", left, right: tail[0], location: location() } : left;  }
  function peg$f141(left, right) {    return right;  }
  function peg$f142(left, tail) {    return tail.reduce((a, b) => ({ type: "BinaryExpression", operator: "||", left: a, right: b, location: location() }), left);  }
  function peg$f143(left, right) {    return right;  }
  function peg$f144(left, tail) {    return tail.reduce((a, b) => ({ type: "BinaryExpression", operator: "&&", left: a, right: b, location: location() }), left);  }
  function peg$f145(left, right) {    return right;  }
  function peg$f146(left, tail) {    return tail.reduce((a, b) => ({ type: "BinaryExpression", operator: "|", left: a, right: b, location: location() }), left);  }
  function peg$f147(left, right) {    return right;  }
  function peg$f148(left, tail) {    return tail.reduce((a, b) => ({ type: "BinaryExpression", operator: "^", left: a, right: b, location: location() }), left);  }
  function peg$f149(left, right) {    return right;  }
  function peg$f150(left, tail) {    return tail.reduce((a, b) => ({ type: "BinaryExpression", operator: "&", left: a, right: b, location: location() }), left);  }
  function peg$f151(left, op, right) {    return { op, right };  }
  function peg$f152(left, tail) {    return tail.reduce((a, b) => ({ type: "BinaryExpression", operator: b.op, left: a, right: b.right, location: location() }), left);  }
  function peg$f153(op, operator, t) {    return { operator, typeName: t };  }
  function peg$f154(op, typeName) {    return typeName ? { type: "ClassificationExpression", operand: op, ...typeName, location: location() } : op;  }
  function peg$f155(left, op, right) {    return { op, right };  }
  function peg$f156(left, tail) {    return tail.reduce((a, b) => ({ type: "BinaryExpression", operator: b.op, left: a, right: b.right, location: location() }), left);  }
  function peg$f157(left, op, right) {    return { op, right };  }
  function peg$f158(left, tail) {    return tail.reduce((a, b) => ({ type: "BinaryExpression", operator: b.op, left: a, right: b.right, location: location() }), left);  }
  function peg$f159(left, op, right) {    return { op, right };  }
  function peg$f160(left, tail) {    return tail.reduce((a, b) => ({ type: "BinaryExpression", operator: b.op, left: a, right: b.right, location: location() }), left);  }
  function peg$f161(left, op, right) {    return { op, right };  }
  function peg$f162(left, tail) {    return tail.reduce((a, b) => ({ type: "BinaryExpression", operator: b.op, left: a, right: b.right, location: location() }), left);  }
  function peg$f163(op, operand) {    return { type: "UnaryExpression", operator: op, operand, location: location() };  }
  function peg$f164(operand, op) {    return { type: "PostfixExpression", operand, operator: op, location: location() };  }
  function peg$f165(op, operand) {    return { type: "PrefixExpression", operator: op, operand, location: location() };  }
  function peg$f166(name) {    return { type: "NameExpression", name, location: location() };  }
  function peg$f167(typeName, index) {    return { type: "InstanceCreationExpression", typeName, index, location: location() };  }
  function peg$f168(elements) {    return { type: "SequenceConstructionExpression", elements, location: location() };  }
  function peg$f169(elements) {    return { type: "ArrayLiteralExpression", elements: elements ? elements.items : [], location: location() };  }
  function peg$f170(elements) {    return elements;  }
  function peg$f171(head, e) {    return e;  }
  function peg$f172(head, tail) {    return { type: "SequenceExpressionList", elements: [head, ...tail], location: location() };  }
  function peg$f173(lower, upper) {    return { type: "SequenceRange", lower, upper, location: location() };  }
  function peg$f174(primary, index) {    return { type: "SequenceAccessExpression", primary, index, location: location() };  }
  function peg$f175(datatype, attr, index) {    return { type: "DataTypeAccessExpression", datatype, attr, index, location: location() };  }
  function peg$f176() {    return { type: "NullLiteral", value: null, location: location() };  }
  function peg$f177(enumName, value) {    return { type: "EnumValueLiteral", enumName, value, location: location() };  }
  function peg$f178(value) {    return { type: "BooleanLiteral", value, location: location() };  }
  function peg$f179(value) {    return { type: "NaturalLiteral", value: parseInt(value, 10), location: location() };  }
  function peg$f180(value) {    return { type: "StringLiteral", value, location: location() };  }
  function peg$f181() {    return { type: "ThisExpression", location: location() };  }
  function peg$f182(expr) {    return expr;  }
  function peg$f183(feature) {
    return feature;
  }
  function peg$f184(feature) {
    return feature;
  }
  function peg$f185(target, index) {
    return { type: "LeftHandSide", target, index, location: location() };
  }
  function peg$f186(lhs) {
    return lhs;
  }
  function peg$f187(op) {    return op;  }
  function peg$f188(op) {    return op;  }
  function peg$f189(op) {    return op;  }
  function peg$f190(op) {    return op;  }
  function peg$f191(op) {    return op;  }
  function peg$f192(op) {    return op;  }
  function peg$f193(op) {    return op;  }
  function peg$f194(name, type, value) {
    return { type: "Property", name, propertyType: type, value, location: location() };
  }
  function peg$f195(name, isFlow, definition, arrayIndex) {
    return { type: "Pin", name, isFlow: !!isFlow, definition, arrayIndex, location: location() };
  }
  function peg$f196(name, definition, arrayIndex, body) {
    return { type: "TypeUse", name, definition, arrayIndex, body, location: location() };
  }
  function peg$f197(name, definition, arrayIndex, body) {
    return { type: "TypeUse", name, definition, arrayIndex, body, location: location() };
  }
  function peg$f198(prop) {    return prop;  }
  function peg$f199(type) {    return type;  }
  function peg$f200(control) {    return control;  }
  function peg$f201(allocs) {
    return {
      type:        "AllocationTable",
      allocations: allocs.map(a => a[1]),
      location:    location()
    };
  }
  function peg$f202(source, target) {    return { type: "ExecutableAllocation", source, target, location: location() };  }
  function peg$f203(source, target) {    return { type: "ActivityAllocation", source, target, location: location() };  }
  function peg$f204(lower, upper) {    return { lower, upper };  }
  function peg$f205(name, e) {    return e;  }
  function peg$f206(name, entities, c) {    return c;  }
  function peg$f207(name, entities, connections) {
    return {
      type:         "EnvironmentDefinition",
      name,
      entities,
      connections,
      location:     location()
    };
  }
  function peg$f208(id, type, arrayIndex) {
    return { name: id, type, arrayIndex, location: location() };
  }
  function peg$f209(id, card) {
    return { name: id, cardinality: card, location: location() };
  }
  function peg$f210(typeOnly, arrayIndex) {
    return { name: typeOnly, type: typeOnly, arrayIndex, location: location() };
  }
  function peg$f211(head, e) {    return e;  }
  function peg$f212(head, tail) {    return { type: "EntityUseList", items: [head, ...tail], location: location() };  }
  function peg$f213(name, c) {
    return { kind: "compositions", value: c };
  }
  function peg$f214(name, ps) {
    return { kind: "propertyDefs", value: ps.map(p => p[1]) };
  }
  function peg$f215(name, rs) {
    return { kind: "roles", value: rs.map(r => r[1]) };
  }
  function peg$f216(name, stmt) {    return stmt;  }
  function peg$f217(name, items) {
    // consolida todos os itens por tipo
    let compositions = [], propertyDefs = [], roles = [];
    for (const it of items) {
      if (it.kind === "compositions")  compositions  = it.value;
      if (it.kind === "propertyDefs")  propertyDefs  = it.value;
      if (it.kind === "roles")         roles         = it.value;
    }
    return {
      type:         "EntityDef",
      name,
      compositions,
      propertyDefs,
      roles,
      location:     location()
    };
  }
  function peg$f218(name) {    return { type: "PropertyDef", name, location: location() };  }
  function peg$f219(type, name) {    return { type: "RoleDef", roleType: type, name, location: location() };  }
  function peg$f220(name, fromEntity, fromRole, toEntity, toRole) {
    return {
      type: "ConnectionDef",
      name,
      from: { entity: fromEntity, port: fromRole },
      to:   { entity: toEntity,   port: toRole   },
      location: location()
    };
  }
  function peg$f221(name, definition, m) {    return m;  }
  function peg$f222(name, definition, mappings) {    return { type: "EnvironmentConfiguration", name, definition, mappings, location: location() };  }
  function peg$f223(instance, entityType) {
    return { type: "Instantiation", instance, entityType, location: location() };
  }
  function peg$f224(source, target) {
    return { type: "Association", source, target, location: location() };
  }
  function peg$f225(name, config, eventDefs) {
    return { type: "EventsDefinitions", name, config, eventDefs: eventDefs.map(e => e[1]), location: location() };
  }
  function peg$f226(name, target, triggers) {
    return { type: "EventDef", name, target, triggers: triggers.map(t => t[1]), location: location() };
  }
  function peg$f227(condition, a) {    return a;  }
  function peg$f228(condition, actions) {
    return { type: "TriggerBlock", condition, actions, location: location() };
  }
  function peg$f229(condName, v) {    return v;  }
  function peg$f230(condName, value) {    return { type: "ConditionBlock", name: condName, value, location: location() };  }
  function peg$f231(cond) {    
           return { ...cond, location: location() }; 
  }
  function peg$f232(name, stmt) {    return stmt;  }
  function peg$f233(name, stmts) {
    return { type: "ActionBlock", name, statements: stmts, location: location() };
  }
  function peg$f234(left, right) {    return { type: "Assignment", left, right, location: location() };  }
  function peg$f235(ref, args) {    return { type: "Invocation", connection: ref, args: args || [], location: location() };  }
  function peg$f236(name, events, s) {    return s;  }
  function peg$f237(name, events, scenes) {
    return { type: "SceneDefinitions", name, events, scenes, location: location() };
  }
  function peg$f238(name, preconds, start, finish, postconds) {    return { type: "SceneDef", name, preconds, start, finish, postconds, location: location() };  }
  function peg$f239(name, scenes, s) {    return s;  }
  function peg$f240(name, scenes, scenarios) {
    return { type: "ScenarioDefinitions", name, scenes, scenarios, location: location() };
  }
  function peg$f241(name, it) {    return it;  }
  function peg$f242(name, items) {    return { type: "ScenarioDef", name, body: items, location: location() };  }
  function peg$f243(ref) {    return { type: "SceneRef", ref, location: location() };  }
  function peg$f244(name) {    return { type: "ScenarioRef", name, location: location() };  }
  function peg$f245(defs, it) {    return it;  }
  function peg$f246(defs, items) {
    return { type: "ScenarioExecution", defs, items, location: location() };
  }
  function peg$f247(eventName, timing) {    return { type: "EventInjection", eventName, timing, location: location() };  }
  function peg$f248(events, mode) {    return { type: "EventInjectionBatch", events, mode: mode || "sequential", location: location() };  }
  function peg$f249(head, e) {    return e;  }
  function peg$f250(head, tail) {    return [head, ...tail];  }
  function peg$f251(delay, unit) {    return { type: "delay", value: unit === "s" ? delay * 1000 : delay };  }
  function peg$f252(condition) {    return { type: "condition", expression: condition };  }
  function peg$f253(scenario) {    return { type: "before", scenario };  }
  function peg$f254(scenario) {    return { type: "after", scenario };  }
  function peg$f255(left, operator, right) {    return { type: "BinaryExpression", left, operator, right, location: location() };  }
  function peg$f256(t) {    return t;  }
  function peg$f257(repeat, scenario) {    return { type: "ExecutionEntry", repeat: repeat || 1, scenario, location: location() };  }
  function peg$f258(head, q) {    return q;  }
  function peg$f259(head, tail) {    return { type: "QualifiedNameList", items: [head, ...tail], location: location() };  }
  function peg$f260(head, p) {    return p;  }
  function peg$f261(head, tail) {    return [ head, ...tail ];  }
  function peg$f262(head, v) {    return v;  }
  function peg$f263(head, tail) {    return { type: "EnumLiteralValueList", items: [head, ...tail], location: location() };  }
  function peg$f264(head, b) {    return b;  }
  function peg$f265(head, tail) {    return { type: "ConnectorBindingList", items: [head, ...tail], location: location() };  }
  function peg$f266(head, v) {    return v;  }
  function peg$f267(head, tail) {    return { type: "ForVarList", items: [head, ...tail], location: location() };  }
  function peg$f268(head, p) {    return p;  }
  function peg$f269(head, tail) {    return [head, ...tail].join('.');  }
  function peg$f270() {    return text();  }
  function peg$f271() {    return text();  }
  function peg$f272(sign, value) {    return parseInt( (sign || "") + value, 10);  }
  function peg$f273(chars) {
    return chars.join('').replace(/\\(.)/g,'$1');
  }
  function peg$f274(chars) {
    return chars.join('').replace(/\\(.)/g,'$1');
  }
  function peg$f275(v) {    return v === "true";  }
  let peg$currPos = options.peg$currPos | 0;
  let peg$savedPos = peg$currPos;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = peg$currPos;
  let peg$maxFailExpected = options.peg$maxFailExpected || [];
  let peg$silentFails = options.peg$silentFails | 0;

  let peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos,
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$getUnicode(pos = peg$currPos) {
    const cp = input.codePointAt(pos);
    if (cp === undefined) {
      return "";
    }
    return String.fromCodePoint(cp);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text, ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase, unicode) {
    return { type: "class", parts, inverted, ignoreCase, unicode };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description };
  }

  function peg$computePosDetails(pos) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column,
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    const res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseModel();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f0(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseModel() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 59) {
          s5 = peg$c1;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = [];
          s8 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c2) {
            s9 = peg$c2;
            peg$currPos += 5;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s11 = peg$parseQualifiedName();
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 59) {
                s13 = peg$c1;
                peg$currPos++;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e1); }
              }
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_();
                peg$savedPos = s8;
                s8 = peg$f1(s3, s11);
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c2) {
              s9 = peg$c2;
              peg$currPos += 5;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$parseQualifiedName();
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 59) {
                  s13 = peg$c1;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e1); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  peg$savedPos = s8;
                  s8 = peg$f1(s3, s11);
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          }
          s8 = [];
          s9 = peg$currPos;
          s10 = peg$parse_();
          s11 = peg$parseProperty();
          if (s11 === peg$FAILED) {
            s11 = peg$parsePackage();
            if (s11 === peg$FAILED) {
              s11 = peg$parseRequirement();
              if (s11 === peg$FAILED) {
                s11 = peg$parseStyle();
                if (s11 === peg$FAILED) {
                  s11 = peg$parseEnvironmentDefinition();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parseEnvironmentConfiguration();
                    if (s11 === peg$FAILED) {
                      s11 = peg$parseEventsDefinitions();
                      if (s11 === peg$FAILED) {
                        s11 = peg$parseSceneDefinitions();
                        if (s11 === peg$FAILED) {
                          s11 = peg$parseScenarioDefinitions();
                          if (s11 === peg$FAILED) {
                            s11 = peg$parseScenarioExecution();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s11 !== peg$FAILED) {
            s12 = peg$parse_();
            peg$savedPos = s9;
            s9 = peg$f2(s3, s7, s11);
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          while (s9 !== peg$FAILED) {
            s8.push(s9);
            s9 = peg$currPos;
            s10 = peg$parse_();
            s11 = peg$parseProperty();
            if (s11 === peg$FAILED) {
              s11 = peg$parsePackage();
              if (s11 === peg$FAILED) {
                s11 = peg$parseRequirement();
                if (s11 === peg$FAILED) {
                  s11 = peg$parseStyle();
                  if (s11 === peg$FAILED) {
                    s11 = peg$parseEnvironmentDefinition();
                    if (s11 === peg$FAILED) {
                      s11 = peg$parseEnvironmentConfiguration();
                      if (s11 === peg$FAILED) {
                        s11 = peg$parseEventsDefinitions();
                        if (s11 === peg$FAILED) {
                          s11 = peg$parseSceneDefinitions();
                          if (s11 === peg$FAILED) {
                            s11 = peg$parseScenarioDefinitions();
                            if (s11 === peg$FAILED) {
                              s11 = peg$parseScenarioExecution();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              peg$savedPos = s9;
              s9 = peg$f2(s3, s7, s11);
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          }
          s9 = peg$currPos;
          s10 = peg$parse_();
          s11 = peg$parseAllocationTable();
          if (s11 !== peg$FAILED) {
            peg$savedPos = s9;
            s9 = peg$f3(s3, s7, s8, s11);
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f4(s3, s7, s8, s9);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStyle() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c3) {
      s1 = peg$c3;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseQualifiedName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 123) {
          s5 = peg$c4;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = [];
          s8 = peg$currPos;
          s9 = peg$parse_();
          s10 = peg$parseInvariant();
          if (s10 === peg$FAILED) {
            s10 = peg$parseAbstractDef();
            if (s10 === peg$FAILED) {
              s10 = peg$parseFunction();
            }
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            peg$savedPos = s8;
            s8 = peg$f5(s3, s10);
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$currPos;
            s9 = peg$parse_();
            s10 = peg$parseInvariant();
            if (s10 === peg$FAILED) {
              s10 = peg$parseAbstractDef();
              if (s10 === peg$FAILED) {
                s10 = peg$parseFunction();
              }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              peg$savedPos = s8;
              s8 = peg$f5(s3, s10);
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          }
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 125) {
            s9 = peg$c5;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s9 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f6(s3, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunction() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c6) {
      s1 = peg$c6;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 61) {
          s6 = peg$c7;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseSTRING();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f7(s3, s8);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f8(s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInvariant() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c8) {
      s1 = peg$c8;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 61) {
          s6 = peg$c7;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseSTRING();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f9(s3, s8);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f10(s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAbstractDef() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseAbstractComponentDef();
    if (s1 === peg$FAILED) {
      s1 = peg$parseAbstractConnectorDef();
      if (s1 === peg$FAILED) {
        s1 = peg$parseAbstractActivityDef();
        if (s1 === peg$FAILED) {
          s1 = peg$parseAbstractProtocol();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f11(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAbstractActivityDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c9) {
      s1 = peg$c9;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 8) === peg$c10) {
        s3 = peg$c10;
        peg$currPos += 8;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 3) === peg$c11) {
          s5 = peg$c11;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseID();
          if (s7 !== peg$FAILED) {
            s8 = peg$currPos;
            s9 = [];
            s10 = peg$currPos;
            s11 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 40) {
              s12 = peg$c12;
              peg$currPos++;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e12); }
            }
            if (s12 !== peg$FAILED) {
              s13 = peg$parse_();
              s14 = peg$parsePinList();
              if (s14 === peg$FAILED) {
                s14 = null;
              }
              s15 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s16 = peg$c13;
                peg$currPos++;
              } else {
                s16 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e13); }
              }
              if (s16 !== peg$FAILED) {
                s11 = [s11, s12, s13, s14, s15, s16];
                s10 = s11;
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
            if (s10 !== peg$FAILED) {
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$currPos;
                s11 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 40) {
                  s12 = peg$c12;
                  peg$currPos++;
                } else {
                  s12 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e12); }
                }
                if (s12 !== peg$FAILED) {
                  s13 = peg$parse_();
                  s14 = peg$parsePinList();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  s15 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s16 = peg$c13;
                    peg$currPos++;
                  } else {
                    s16 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e13); }
                  }
                  if (s16 !== peg$FAILED) {
                    s11 = [s11, s12, s13, s14, s15, s16];
                    s10 = s11;
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              }
            } else {
              s9 = peg$FAILED;
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$currPos;
              s11 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 58) {
                s12 = peg$c14;
                peg$currPos++;
              } else {
                s12 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
              if (s12 !== peg$FAILED) {
                s13 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 40) {
                  s14 = peg$c12;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e12); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = peg$parse_();
                  s16 = peg$parsePinList();
                  if (s16 === peg$FAILED) {
                    s16 = null;
                  }
                  s17 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s18 = peg$c13;
                    peg$currPos++;
                  } else {
                    s18 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e13); }
                  }
                  if (s18 !== peg$FAILED) {
                    s11 = [s11, s12, s13, s14, s15, s16, s17, s18];
                    s10 = s11;
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              s11 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 123) {
                s12 = peg$c4;
                peg$currPos++;
              } else {
                s12 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e4); }
              }
              if (s12 !== peg$FAILED) {
                s13 = peg$parse_();
                s14 = peg$parseActivityBody();
                if (s14 !== peg$FAILED) {
                  s15 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s16 = peg$c5;
                    peg$currPos++;
                  } else {
                    s16 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e5); }
                  }
                  if (s16 !== peg$FAILED) {
                    s17 = peg$parse_();
                    s9 = [s9, s10, s11, s12, s13, s14, s15, s16, s17];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f12(s7, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAbstractComponentDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c9) {
      s1 = peg$c9;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 9) === peg$c15) {
        s3 = peg$c15;
        peg$currPos += 9;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 3) === peg$c11) {
          s5 = peg$c11;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseID();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseBounds();
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s11 = peg$c4;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              s13 = peg$currPos;
              s14 = peg$parse_();
              if (input.substr(peg$currPos, 5) === peg$c16) {
                s15 = peg$c16;
                peg$currPos += 5;
              } else {
                s15 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e16); }
              }
              if (s15 !== peg$FAILED) {
                s16 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 58) {
                  s17 = peg$c14;
                  peg$currPos++;
                } else {
                  s17 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e14); }
                }
                if (s17 !== peg$FAILED) {
                  s18 = peg$parse_();
                  s19 = [];
                  s20 = peg$currPos;
                  s21 = peg$parse_();
                  s22 = peg$parseAbstractPortUse();
                  if (s22 !== peg$FAILED) {
                    s21 = [s21, s22];
                    s20 = s21;
                  } else {
                    peg$currPos = s20;
                    s20 = peg$FAILED;
                  }
                  while (s20 !== peg$FAILED) {
                    s19.push(s20);
                    s20 = peg$currPos;
                    s21 = peg$parse_();
                    s22 = peg$parseAbstractPortUse();
                    if (s22 !== peg$FAILED) {
                      s21 = [s21, s22];
                      s20 = s21;
                    } else {
                      peg$currPos = s20;
                      s20 = peg$FAILED;
                    }
                  }
                  peg$savedPos = s13;
                  s13 = peg$f13(s7, s9, s19);
                } else {
                  peg$currPos = s13;
                  s13 = peg$FAILED;
                }
              } else {
                peg$currPos = s13;
                s13 = peg$FAILED;
              }
              if (s13 === peg$FAILED) {
                s13 = null;
              }
              s14 = peg$currPos;
              s15 = peg$parse_();
              if (input.substr(peg$currPos, 7) === peg$c17) {
                s16 = peg$c17;
                peg$currPos += 7;
              } else {
                s16 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e17); }
              }
              if (s16 !== peg$FAILED) {
                s17 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 123) {
                  s18 = peg$c4;
                  peg$currPos++;
                } else {
                  s18 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e4); }
                }
                if (s18 !== peg$FAILED) {
                  s19 = peg$parse_();
                  s20 = peg$parseQualifiedNameList();
                  if (s20 !== peg$FAILED) {
                    s21 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s22 = peg$c5;
                      peg$currPos++;
                    } else {
                      s22 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e5); }
                    }
                    if (s22 !== peg$FAILED) {
                      peg$savedPos = s14;
                      s14 = peg$f14(s7, s9, s13, s20);
                    } else {
                      peg$currPos = s14;
                      s14 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s14;
                    s14 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s14;
                  s14 = peg$FAILED;
                }
              } else {
                peg$currPos = s14;
                s14 = peg$FAILED;
              }
              if (s14 === peg$FAILED) {
                s14 = null;
              }
              s15 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 125) {
                s16 = peg$c5;
                peg$currPos++;
              } else {
                s16 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e5); }
              }
              if (s16 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f15(s7, s9, s13, s14);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAbstractPortUse() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseFlowProperty();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.substr(peg$currPos, 3) === peg$c18) {
            s7 = peg$c18;
            peg$currPos += 3;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e18); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseBounds();
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f16(s1, s5, s9);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAbstractConnectorDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c9) {
      s1 = peg$c9;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 9) === peg$c19) {
        s3 = peg$c19;
        peg$currPos += 9;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 3) === peg$c11) {
          s5 = peg$c11;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseID();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s9 = peg$c4;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$currPos;
              s12 = peg$parse_();
              if (input.substr(peg$currPos, 12) === peg$c20) {
                s13 = peg$c20;
                peg$currPos += 12;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e20); }
              }
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 58) {
                  s15 = peg$c14;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e14); }
                }
                if (s15 !== peg$FAILED) {
                  s16 = peg$parse_();
                  s17 = peg$parseAbstractPortUse_Reverse();
                  if (s17 !== peg$FAILED) {
                    s18 = [];
                    s19 = peg$currPos;
                    s20 = peg$parse_();
                    s21 = peg$parseAbstractPortUse_Reverse();
                    if (s21 !== peg$FAILED) {
                      s20 = [s20, s21];
                      s19 = s20;
                    } else {
                      peg$currPos = s19;
                      s19 = peg$FAILED;
                    }
                    while (s19 !== peg$FAILED) {
                      s18.push(s19);
                      s19 = peg$currPos;
                      s20 = peg$parse_();
                      s21 = peg$parseAbstractPortUse_Reverse();
                      if (s21 !== peg$FAILED) {
                        s20 = [s20, s21];
                        s19 = s20;
                      } else {
                        peg$currPos = s19;
                        s19 = peg$FAILED;
                      }
                    }
                    peg$savedPos = s11;
                    s11 = peg$f17(s7, s17, s18);
                  } else {
                    peg$currPos = s11;
                    s11 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s11;
                  s11 = peg$FAILED;
                }
              } else {
                peg$currPos = s11;
                s11 = peg$FAILED;
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              s12 = peg$currPos;
              s13 = peg$parse_();
              if (input.substr(peg$currPos, 5) === peg$c21) {
                s14 = peg$c21;
                peg$currPos += 5;
              } else {
                s14 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e21); }
              }
              if (s14 !== peg$FAILED) {
                s15 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 58) {
                  s16 = peg$c14;
                  peg$currPos++;
                } else {
                  s16 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e14); }
                }
                if (s16 !== peg$FAILED) {
                  s17 = peg$parse_();
                  s18 = [];
                  s19 = peg$parseAbstractFlow();
                  while (s19 !== peg$FAILED) {
                    s18.push(s19);
                    s19 = peg$parseAbstractFlow();
                  }
                  peg$savedPos = s12;
                  s12 = peg$f18(s7, s11, s18);
                } else {
                  peg$currPos = s12;
                  s12 = peg$FAILED;
                }
              } else {
                peg$currPos = s12;
                s12 = peg$FAILED;
              }
              if (s12 === peg$FAILED) {
                s12 = null;
              }
              s13 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 125) {
                s14 = peg$c5;
                peg$currPos++;
              } else {
                s14 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e5); }
              }
              if (s14 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f19(s7, s11, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAbstractFlow() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c23) {
          s5 = peg$c23;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseID();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s9 = peg$c1;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f20(s3, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAbstractPortUse_Reverse() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 126) {
      s1 = peg$c24;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 58) {
          s5 = peg$c14;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseFlowProperty();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.substr(peg$currPos, 3) === peg$c18) {
              s9 = peg$c18;
              peg$currPos += 3;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e18); }
            }
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f21(s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAbstractProtocol() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c10) {
      s1 = peg$c10;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 8) === peg$c25) {
        s3 = peg$c25;
        peg$currPos += 8;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 123) {
            s7 = peg$c4;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseAbstractProtocolBody();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 125) {
                s11 = peg$c5;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e5); }
              }
              if (s11 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f22(s5, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAbstractProtocolBody() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseProtocolControl();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseAbstractProtocolBodyInternal();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        s6 = peg$parseProtocolAlternativeType();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseAbstractProtocolBody();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f23(s1, s3, s6, s8);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f24(s1, s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAbstractProtocolBodyInternal() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c12;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseAbstractProtocolBody();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c13;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f25(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseAbstractActionSend();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAbstractActionReceive();
      }
    }

    return s0;
  }

  function peg$parseAbstractActionSend() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c26) {
      s1 = peg$c26;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c18) {
        s3 = peg$c18;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 3) === peg$c27) {
          s5 = peg$c27;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQualifiedName();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f26(s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAbstractActionReceive() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c28) {
      s1 = peg$c28;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c18) {
        s3 = peg$c18;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 4) === peg$c29) {
          s5 = peg$c29;
          peg$currPos += 4;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e29); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQualifiedName();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f27(s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePackage() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c30) {
      s1 = peg$c30;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseQualifiedName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c31) {
          s6 = peg$c31;
          peg$currPos += 4;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e31); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseQualifiedNameList();
          if (s8 !== peg$FAILED) {
            s6 = [s6, s7, s8];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 123) {
          s7 = peg$c4;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = [];
          s10 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c32) {
            s11 = peg$c32;
            peg$currPos += 6;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e32); }
          }
          if (s11 !== peg$FAILED) {
            s12 = peg$parse_();
            s13 = peg$parseQualifiedName();
            if (s13 !== peg$FAILED) {
              s14 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 59) {
                s15 = peg$c1;
                peg$currPos++;
              } else {
                s15 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e1); }
              }
              if (s15 !== peg$FAILED) {
                s16 = peg$parse_();
                peg$savedPos = s10;
                s10 = peg$f28(s3, s5, s13);
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
          } else {
            peg$currPos = s10;
            s10 = peg$FAILED;
          }
          while (s10 !== peg$FAILED) {
            s9.push(s10);
            s10 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c32) {
              s11 = peg$c32;
              peg$currPos += 6;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e32); }
            }
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              s13 = peg$parseQualifiedName();
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 59) {
                  s15 = peg$c1;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e1); }
                }
                if (s15 !== peg$FAILED) {
                  s16 = peg$parse_();
                  peg$savedPos = s10;
                  s10 = peg$f28(s3, s5, s13);
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
          }
          s10 = [];
          s11 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c2) {
            s12 = peg$c2;
            peg$currPos += 5;
          } else {
            s12 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s12 !== peg$FAILED) {
            s13 = peg$parse_();
            s14 = peg$parseQualifiedName();
            if (s14 !== peg$FAILED) {
              s15 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 59) {
                s16 = peg$c1;
                peg$currPos++;
              } else {
                s16 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e1); }
              }
              if (s16 !== peg$FAILED) {
                s17 = peg$parse_();
                peg$savedPos = s11;
                s11 = peg$f29(s3, s5, s9, s14);
              } else {
                peg$currPos = s11;
                s11 = peg$FAILED;
              }
            } else {
              peg$currPos = s11;
              s11 = peg$FAILED;
            }
          } else {
            peg$currPos = s11;
            s11 = peg$FAILED;
          }
          while (s11 !== peg$FAILED) {
            s10.push(s11);
            s11 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c2) {
              s12 = peg$c2;
              peg$currPos += 5;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s12 !== peg$FAILED) {
              s13 = peg$parse_();
              s14 = peg$parseQualifiedName();
              if (s14 !== peg$FAILED) {
                s15 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 59) {
                  s16 = peg$c1;
                  peg$currPos++;
                } else {
                  s16 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e1); }
                }
                if (s16 !== peg$FAILED) {
                  s17 = peg$parse_();
                  peg$savedPos = s11;
                  s11 = peg$f29(s3, s5, s9, s14);
                } else {
                  peg$currPos = s11;
                  s11 = peg$FAILED;
                }
              } else {
                peg$currPos = s11;
                s11 = peg$FAILED;
              }
            } else {
              peg$currPos = s11;
              s11 = peg$FAILED;
            }
          }
          s11 = [];
          s12 = peg$currPos;
          s13 = peg$parse_();
          s14 = peg$parseProperty();
          if (s14 === peg$FAILED) {
            s14 = peg$parseElementDef();
            if (s14 === peg$FAILED) {
              s14 = peg$parseArchitectureDef();
            }
          }
          if (s14 !== peg$FAILED) {
            s15 = peg$parse_();
            peg$savedPos = s12;
            s12 = peg$f30(s3, s5, s9, s10, s14);
          } else {
            peg$currPos = s12;
            s12 = peg$FAILED;
          }
          while (s12 !== peg$FAILED) {
            s11.push(s12);
            s12 = peg$currPos;
            s13 = peg$parse_();
            s14 = peg$parseProperty();
            if (s14 === peg$FAILED) {
              s14 = peg$parseElementDef();
              if (s14 === peg$FAILED) {
                s14 = peg$parseArchitectureDef();
              }
            }
            if (s14 !== peg$FAILED) {
              s15 = peg$parse_();
              peg$savedPos = s12;
              s12 = peg$f30(s3, s5, s9, s10, s14);
            } else {
              peg$currPos = s12;
              s12 = peg$FAILED;
            }
          }
          s12 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 125) {
            s13 = peg$c5;
            peg$currPos++;
          } else {
            s13 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s13 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f31(s3, s5, s9, s10, s11);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRequirement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c33) {
      s1 = peg$c33;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s5 = peg$c12;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseReqNumber();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s9 = peg$c13;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 123) {
                s11 = peg$c4;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e4); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                s13 = peg$currPos;
                s14 = peg$parse_();
                if (input.substr(peg$currPos, 4) === peg$c34) {
                  s15 = peg$c34;
                  peg$currPos += 4;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e34); }
                }
                if (s15 !== peg$FAILED) {
                  s16 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 61) {
                    s17 = peg$c7;
                    peg$currPos++;
                  } else {
                    s17 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e7); }
                  }
                  if (s17 !== peg$FAILED) {
                    s18 = peg$parse_();
                    s19 = peg$parseEString();
                    if (s19 !== peg$FAILED) {
                      peg$savedPos = s13;
                      s13 = peg$f32(s3, s7, s19);
                    } else {
                      peg$currPos = s13;
                      s13 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s13;
                    s13 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s13;
                  s13 = peg$FAILED;
                }
                if (s13 === peg$FAILED) {
                  s13 = null;
                }
                s14 = peg$currPos;
                s15 = peg$parse_();
                if (input.substr(peg$currPos, 9) === peg$c35) {
                  s16 = peg$c35;
                  peg$currPos += 9;
                } else {
                  s16 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e35); }
                }
                if (s16 !== peg$FAILED) {
                  s17 = peg$parse_();
                  if (input.substr(peg$currPos, 2) === peg$c36) {
                    s18 = peg$c36;
                    peg$currPos += 2;
                  } else {
                    s18 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e36); }
                  }
                  if (s18 !== peg$FAILED) {
                    s19 = peg$parse_();
                    s20 = peg$parseQualifiedNameList();
                    if (s20 !== peg$FAILED) {
                      s21 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 59) {
                        s22 = peg$c1;
                        peg$currPos++;
                      } else {
                        s22 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e1); }
                      }
                      if (s22 !== peg$FAILED) {
                        peg$savedPos = s14;
                        s14 = peg$f33(s3, s7, s13, s20);
                      } else {
                        peg$currPos = s14;
                        s14 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s14;
                      s14 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s14;
                    s14 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s14;
                  s14 = peg$FAILED;
                }
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                s15 = peg$currPos;
                s16 = peg$parse_();
                if (input.substr(peg$currPos, 6) === peg$c37) {
                  s17 = peg$c37;
                  peg$currPos += 6;
                } else {
                  s17 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e37); }
                }
                if (s17 !== peg$FAILED) {
                  s18 = peg$parse_();
                  s19 = peg$parseQualifiedNameList();
                  if (s19 !== peg$FAILED) {
                    s20 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 59) {
                      s21 = peg$c1;
                      peg$currPos++;
                    } else {
                      s21 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e1); }
                    }
                    if (s21 !== peg$FAILED) {
                      peg$savedPos = s15;
                      s15 = peg$f34(s3, s7, s13, s14, s19);
                    } else {
                      peg$currPos = s15;
                      s15 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s15;
                    s15 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s15;
                  s15 = peg$FAILED;
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                s16 = [];
                s17 = peg$currPos;
                s18 = peg$parse_();
                s19 = peg$parseProperty();
                if (s19 === peg$FAILED) {
                  s19 = peg$parseRequirement();
                }
                if (s19 !== peg$FAILED) {
                  s20 = peg$parse_();
                  peg$savedPos = s17;
                  s17 = peg$f35(s3, s7, s13, s14, s15, s19);
                } else {
                  peg$currPos = s17;
                  s17 = peg$FAILED;
                }
                while (s17 !== peg$FAILED) {
                  s16.push(s17);
                  s17 = peg$currPos;
                  s18 = peg$parse_();
                  s19 = peg$parseProperty();
                  if (s19 === peg$FAILED) {
                    s19 = peg$parseRequirement();
                  }
                  if (s19 !== peg$FAILED) {
                    s20 = peg$parse_();
                    peg$savedPos = s17;
                    s17 = peg$f35(s3, s7, s13, s14, s15, s19);
                  } else {
                    peg$currPos = s17;
                    s17 = peg$FAILED;
                  }
                }
                s17 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 125) {
                  s18 = peg$c5;
                  peg$currPos++;
                } else {
                  s18 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e5); }
                }
                if (s18 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f36(s3, s7, s13, s14, s15, s16);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseReqNumber() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseINT();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c38;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseINT();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f37(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c38;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e38); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseINT();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f37(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f38(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseElementDef() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseDataTypeDef();
    if (s1 === peg$FAILED) {
      s1 = peg$parseDimensionDef();
      if (s1 === peg$FAILED) {
        s1 = peg$parseUnitDef();
        if (s1 === peg$FAILED) {
          s1 = peg$parseValueTypeDef();
          if (s1 === peg$FAILED) {
            s1 = peg$parseEnumeration();
            if (s1 === peg$FAILED) {
              s1 = peg$parseComponentDef();
              if (s1 === peg$FAILED) {
                s1 = peg$parseConnectorDef();
                if (s1 === peg$FAILED) {
                  s1 = peg$parsePortDef();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseActionDef();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseActivityDef();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseProtocol();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseConstraintDef();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parseExecutable();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f39(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseStructuralDef() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseComponentDef();
    if (s1 === peg$FAILED) {
      s1 = peg$parseConnectorDef();
      if (s1 === peg$FAILED) {
        s1 = peg$parsePortDef();
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f40(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDataDef() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseDataTypeDef();
    if (s1 === peg$FAILED) {
      s1 = peg$parseDimensionDef();
      if (s1 === peg$FAILED) {
        s1 = peg$parseUnitDef();
        if (s1 === peg$FAILED) {
          s1 = peg$parseValueTypeDef();
          if (s1 === peg$FAILED) {
            s1 = peg$parseEnumeration();
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f41(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBehaviorDef() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseActivityDef();
    if (s1 === peg$FAILED) {
      s1 = peg$parseProtocol();
      if (s1 === peg$FAILED) {
        s1 = peg$parseConstraintDef();
        if (s1 === peg$FAILED) {
          s1 = peg$parseActionDef();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f42(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseArchitectureDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c39) {
      s1 = peg$c39;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c11) {
        s3 = peg$c11;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c40) {
            s8 = peg$c40;
            peg$currPos += 6;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e40); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseQualifiedNameList();
            if (s10 !== peg$FAILED) {
              s8 = [s8, s9, s10];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 123) {
            s9 = peg$c4;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s11 = peg$parse_();
            if (input.substr(peg$currPos, 5) === peg$c16) {
              s12 = peg$c16;
              peg$currPos += 5;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e16); }
            }
            if (s12 !== peg$FAILED) {
              s13 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 58) {
                s14 = peg$c14;
                peg$currPos++;
              } else {
                s14 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
              if (s14 !== peg$FAILED) {
                s15 = peg$parse_();
                s16 = [];
                s17 = peg$parsePortUse();
                while (s17 !== peg$FAILED) {
                  s16.push(s17);
                  s17 = peg$parsePortUse();
                }
                s17 = [];
                s18 = peg$currPos;
                s19 = peg$parse_();
                s20 = peg$parseProperty();
                if (s20 !== peg$FAILED) {
                  peg$savedPos = s18;
                  s18 = peg$f43(s5, s7, s16, s20);
                } else {
                  peg$currPos = s18;
                  s18 = peg$FAILED;
                }
                while (s18 !== peg$FAILED) {
                  s17.push(s18);
                  s18 = peg$currPos;
                  s19 = peg$parse_();
                  s20 = peg$parseProperty();
                  if (s20 !== peg$FAILED) {
                    peg$savedPos = s18;
                    s18 = peg$f43(s5, s7, s16, s20);
                  } else {
                    peg$currPos = s18;
                    s18 = peg$FAILED;
                  }
                }
                s18 = peg$currPos;
                s19 = peg$parse_();
                s20 = peg$parseConfiguration();
                if (s20 !== peg$FAILED) {
                  peg$savedPos = s18;
                  s18 = peg$f44(s5, s7, s16, s17, s20);
                } else {
                  peg$currPos = s18;
                  s18 = peg$FAILED;
                }
                if (s18 !== peg$FAILED) {
                  s19 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s20 = peg$c5;
                    peg$currPos++;
                  } else {
                    s20 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e5); }
                  }
                  if (s20 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f45(s5, s7, s16, s17, s18);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseComponentDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c41) {
      s2 = peg$c41;
      peg$currPos += 8;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 9) === peg$c15) {
      s2 = peg$c15;
      peg$currPos += 9;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c11) {
        s4 = peg$c11;
        peg$currPos += 3;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseID();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c40) {
            s9 = peg$c40;
            peg$currPos += 6;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e40); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s11 = peg$parseQualifiedNameList();
            if (s11 !== peg$FAILED) {
              s9 = [s9, s10, s11];
              s8 = s9;
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parse_();
          s10 = peg$currPos;
          if (input.substr(peg$currPos, 10) === peg$c42) {
            s11 = peg$c42;
            peg$currPos += 10;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e42); }
          }
          if (s11 !== peg$FAILED) {
            s12 = peg$parse_();
            s13 = peg$parseQualifiedName();
            if (s13 !== peg$FAILED) {
              peg$savedPos = s10;
              s10 = peg$f46(s1, s6, s8, s13);
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
          } else {
            peg$currPos = s10;
            s10 = peg$FAILED;
          }
          if (s10 === peg$FAILED) {
            s10 = null;
          }
          s11 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 123) {
            s12 = peg$c4;
            peg$currPos++;
          } else {
            s12 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s12 !== peg$FAILED) {
            s13 = peg$parse_();
            s14 = peg$currPos;
            s15 = peg$parse_();
            if (input.substr(peg$currPos, 5) === peg$c16) {
              s16 = peg$c16;
              peg$currPos += 5;
            } else {
              s16 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e16); }
            }
            if (s16 !== peg$FAILED) {
              s17 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 58) {
                s18 = peg$c14;
                peg$currPos++;
              } else {
                s18 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
              if (s18 !== peg$FAILED) {
                s19 = peg$parse_();
                s20 = [];
                s21 = peg$currPos;
                s22 = peg$parse_();
                s23 = peg$parsePortUse();
                if (s23 !== peg$FAILED) {
                  s22 = [s22, s23];
                  s21 = s22;
                } else {
                  peg$currPos = s21;
                  s21 = peg$FAILED;
                }
                while (s21 !== peg$FAILED) {
                  s20.push(s21);
                  s21 = peg$currPos;
                  s22 = peg$parse_();
                  s23 = peg$parsePortUse();
                  if (s23 !== peg$FAILED) {
                    s22 = [s22, s23];
                    s21 = s22;
                  } else {
                    peg$currPos = s21;
                    s21 = peg$FAILED;
                  }
                }
                peg$savedPos = s14;
                s14 = peg$f47(s1, s6, s8, s10, s20);
              } else {
                peg$currPos = s14;
                s14 = peg$FAILED;
              }
            } else {
              peg$currPos = s14;
              s14 = peg$FAILED;
            }
            if (s14 === peg$FAILED) {
              s14 = null;
            }
            s15 = [];
            s16 = peg$currPos;
            s17 = peg$parse_();
            s18 = peg$parseProperty();
            if (s18 === peg$FAILED) {
              s18 = peg$parseStructuralDef();
              if (s18 === peg$FAILED) {
                s18 = peg$parseDataDef();
              }
            }
            if (s18 !== peg$FAILED) {
              peg$savedPos = s16;
              s16 = peg$f48(s1, s6, s8, s10, s14, s18);
            } else {
              peg$currPos = s16;
              s16 = peg$FAILED;
            }
            while (s16 !== peg$FAILED) {
              s15.push(s16);
              s16 = peg$currPos;
              s17 = peg$parse_();
              s18 = peg$parseProperty();
              if (s18 === peg$FAILED) {
                s18 = peg$parseStructuralDef();
                if (s18 === peg$FAILED) {
                  s18 = peg$parseDataDef();
                }
              }
              if (s18 !== peg$FAILED) {
                peg$savedPos = s16;
                s16 = peg$f48(s1, s6, s8, s10, s14, s18);
              } else {
                peg$currPos = s16;
                s16 = peg$FAILED;
              }
            }
            s16 = peg$currPos;
            s17 = peg$parse_();
            s18 = peg$parseConfiguration();
            if (s18 !== peg$FAILED) {
              peg$savedPos = s16;
              s16 = peg$f49(s1, s6, s8, s10, s14, s15, s18);
            } else {
              peg$currPos = s16;
              s16 = peg$FAILED;
            }
            if (s16 === peg$FAILED) {
              s16 = null;
            }
            s17 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s18 = peg$c5;
              peg$currPos++;
            } else {
              s18 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s18 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f50(s1, s6, s8, s10, s14, s15, s16);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConnectorDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c19) {
      s1 = peg$c19;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c11) {
        s3 = peg$c11;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$currPos;
          if (input.substr(peg$currPos, 10) === peg$c42) {
            s8 = peg$c42;
            peg$currPos += 10;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e42); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseQualifiedName();
            if (s10 !== peg$FAILED) {
              peg$savedPos = s7;
              s7 = peg$f51(s5, s10);
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 123) {
            s9 = peg$c4;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s11 = peg$currPos;
            s12 = peg$parse_();
            if (input.substr(peg$currPos, 12) === peg$c20) {
              s13 = peg$c20;
              peg$currPos += 12;
            } else {
              s13 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e20); }
            }
            if (s13 !== peg$FAILED) {
              s14 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 58) {
                s15 = peg$c14;
                peg$currPos++;
              } else {
                s15 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
              if (s15 !== peg$FAILED) {
                s16 = peg$parse_();
                s17 = [];
                s18 = peg$currPos;
                s19 = peg$parse_();
                s20 = peg$parsePortUse_Reverse();
                if (s20 !== peg$FAILED) {
                  s19 = [s19, s20];
                  s18 = s19;
                } else {
                  peg$currPos = s18;
                  s18 = peg$FAILED;
                }
                while (s18 !== peg$FAILED) {
                  s17.push(s18);
                  s18 = peg$currPos;
                  s19 = peg$parse_();
                  s20 = peg$parsePortUse_Reverse();
                  if (s20 !== peg$FAILED) {
                    s19 = [s19, s20];
                    s18 = s19;
                  } else {
                    peg$currPos = s18;
                    s18 = peg$FAILED;
                  }
                }
                peg$savedPos = s11;
                s11 = peg$f52(s5, s7, s17);
              } else {
                peg$currPos = s11;
                s11 = peg$FAILED;
              }
            } else {
              peg$currPos = s11;
              s11 = peg$FAILED;
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            s12 = peg$currPos;
            s13 = peg$parse_();
            s14 = peg$parseConfiguration();
            if (s14 !== peg$FAILED) {
              s13 = [s13, s14];
              s12 = s13;
            } else {
              peg$currPos = s12;
              s12 = peg$FAILED;
            }
            if (s12 === peg$FAILED) {
              s12 = null;
            }
            s13 = peg$currPos;
            s14 = peg$parse_();
            if (input.substr(peg$currPos, 5) === peg$c21) {
              s15 = peg$c21;
              peg$currPos += 5;
            } else {
              s15 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e21); }
            }
            if (s15 !== peg$FAILED) {
              s16 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 58) {
                s17 = peg$c14;
                peg$currPos++;
              } else {
                s17 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
              if (s17 !== peg$FAILED) {
                s18 = peg$parse_();
                s19 = [];
                s20 = peg$parseFlow();
                while (s20 !== peg$FAILED) {
                  s19.push(s20);
                  s20 = peg$parseFlow();
                }
                peg$savedPos = s13;
                s13 = peg$f53(s5, s7, s11, s12, s19);
              } else {
                peg$currPos = s13;
                s13 = peg$FAILED;
              }
            } else {
              peg$currPos = s13;
              s13 = peg$FAILED;
            }
            if (s13 === peg$FAILED) {
              s13 = null;
            }
            s14 = [];
            s15 = peg$parseProperty();
            if (s15 === peg$FAILED) {
              s15 = peg$parseStructuralDef();
              if (s15 === peg$FAILED) {
                s15 = peg$parseDataDef();
              }
            }
            while (s15 !== peg$FAILED) {
              s14.push(s15);
              s15 = peg$parseProperty();
              if (s15 === peg$FAILED) {
                s15 = peg$parseStructuralDef();
                if (s15 === peg$FAILED) {
                  s15 = peg$parseDataDef();
                }
              }
            }
            s15 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s16 = peg$c5;
              peg$currPos++;
            } else {
              s16 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s16 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f54(s5, s7, s11, s12, s13, s14);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePortDef() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseCompositePortDef();
    if (s1 === peg$FAILED) {
      s1 = peg$parseSimplePortDef();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f55(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCompositePortDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c43) {
      s1 = peg$c43;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c11) {
        s3 = peg$c11;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 123) {
            s7 = peg$c4;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$currPos;
            s10 = peg$parse_();
            if (input.substr(peg$currPos, 5) === peg$c16) {
              s11 = peg$c16;
              peg$currPos += 5;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e16); }
            }
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 58) {
                s13 = peg$c14;
                peg$currPos++;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_();
                s15 = [];
                s16 = peg$currPos;
                s17 = peg$parse_();
                s18 = peg$parsePortUse();
                if (s18 !== peg$FAILED) {
                  s17 = [s17, s18];
                  s16 = s17;
                } else {
                  peg$currPos = s16;
                  s16 = peg$FAILED;
                }
                while (s16 !== peg$FAILED) {
                  s15.push(s16);
                  s16 = peg$currPos;
                  s17 = peg$parse_();
                  s18 = peg$parsePortUse();
                  if (s18 !== peg$FAILED) {
                    s17 = [s17, s18];
                    s16 = s17;
                  } else {
                    peg$currPos = s16;
                    s16 = peg$FAILED;
                  }
                }
                peg$savedPos = s9;
                s9 = peg$f56(s5, s15);
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = [];
            s11 = peg$parseProperty();
            if (s11 === peg$FAILED) {
              s11 = peg$parseStructuralDef();
              if (s11 === peg$FAILED) {
                s11 = peg$parseDataDef();
              }
            }
            while (s11 !== peg$FAILED) {
              s10.push(s11);
              s11 = peg$parseProperty();
              if (s11 === peg$FAILED) {
                s11 = peg$parseStructuralDef();
                if (s11 === peg$FAILED) {
                  s11 = peg$parseDataDef();
                }
              }
            }
            s11 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s12 = peg$c5;
              peg$currPos++;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s12 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f57(s5, s9, s10);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSimplePortDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c43) {
      s1 = peg$c43;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c11) {
        s3 = peg$c11;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 123) {
            s7 = peg$c4;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parse_();
            if (input.substr(peg$currPos, 4) === peg$c22) {
              s10 = peg$c22;
              peg$currPos += 4;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s12 = peg$parseFlowProperty();
              if (s12 !== peg$FAILED) {
                s13 = peg$parse_();
                s14 = peg$parseQualifiedName();
                if (s14 !== peg$FAILED) {
                  s15 = peg$parse_();
                  s16 = peg$parseIndex();
                  if (s16 === peg$FAILED) {
                    s16 = null;
                  }
                  s17 = [];
                  s18 = peg$parseProperty();
                  if (s18 === peg$FAILED) {
                    s18 = peg$parseStructuralDef();
                    if (s18 === peg$FAILED) {
                      s18 = peg$parseDataDef();
                    }
                  }
                  while (s18 !== peg$FAILED) {
                    s17.push(s18);
                    s18 = peg$parseProperty();
                    if (s18 === peg$FAILED) {
                      s18 = peg$parseStructuralDef();
                      if (s18 === peg$FAILED) {
                        s18 = peg$parseDataDef();
                      }
                    }
                  }
                  s18 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s19 = peg$c5;
                    peg$currPos++;
                  } else {
                    s19 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e5); }
                  }
                  if (s19 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f58(s5, s12, s14, s16, s17);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConfiguration() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 13) === peg$c44) {
      s1 = peg$c44;
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s3 = peg$c4;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        s6 = peg$parse_();
        if (input.substr(peg$currPos, 10) === peg$c45) {
          s7 = peg$c45;
          peg$currPos += 10;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e45); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 58) {
            s9 = peg$c14;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s11 = peg$parseComponentUse_List();
            s6 = [s6, s7, s8, s9, s10, s11];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$currPos;
        s7 = peg$parse_();
        if (input.substr(peg$currPos, 10) === peg$c46) {
          s8 = peg$c46;
          peg$currPos += 10;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e46); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 58) {
            s10 = peg$c14;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            s12 = peg$parseConnectorUse_List();
            s7 = [s7, s8, s9, s10, s11, s12];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$currPos;
        s8 = peg$parse_();
        if (input.substr(peg$currPos, 11) === peg$c47) {
          s9 = peg$c47;
          peg$currPos += 11;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e47); }
        }
        if (s9 !== peg$FAILED) {
          s10 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 58) {
            s11 = peg$c14;
            peg$currPos++;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
          if (s11 !== peg$FAILED) {
            s12 = peg$parse_();
            s13 = [];
            s14 = peg$parseDelegation();
            while (s14 !== peg$FAILED) {
              s13.push(s14);
              s14 = peg$parseDelegation();
            }
            s8 = [s8, s9, s10, s11, s12, s13];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s8 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s9 = peg$c5;
          peg$currPos++;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s9 !== peg$FAILED) {
          s10 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f59(s5, s6, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseComponentUse_List() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parse_();
    s4 = peg$currPos;
    peg$silentFails++;
    s5 = peg$currPos;
    peg$silentFails++;
    s6 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c46) {
      s7 = peg$c46;
      peg$currPos += 10;
    } else {
      s7 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }
    if (s7 !== peg$FAILED) {
      s8 = peg$parse_();
      s7 = [s7, s8];
      s6 = s7;
    } else {
      peg$currPos = s6;
      s6 = peg$FAILED;
    }
    if (s6 === peg$FAILED) {
      s6 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c47) {
        s7 = peg$c47;
        peg$currPos += 11;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
      if (s7 !== peg$FAILED) {
        s8 = peg$parse_();
        s7 = [s7, s8];
        s6 = s7;
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      if (s6 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s6 = peg$c5;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
      }
    }
    peg$silentFails--;
    if (s6 === peg$FAILED) {
      s5 = undefined;
    } else {
      peg$currPos = s5;
      s5 = peg$FAILED;
    }
    peg$silentFails--;
    if (s5 !== peg$FAILED) {
      peg$currPos = s4;
      s4 = undefined;
    } else {
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      s5 = peg$parseComponentUse();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s2;
        s2 = peg$f60(s5);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parse_();
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$currPos;
      peg$silentFails++;
      s6 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c46) {
        s7 = peg$c46;
        peg$currPos += 10;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
      if (s7 !== peg$FAILED) {
        s8 = peg$parse_();
        s7 = [s7, s8];
        s6 = s7;
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      if (s6 === peg$FAILED) {
        s6 = peg$currPos;
        if (input.substr(peg$currPos, 11) === peg$c47) {
          s7 = peg$c47;
          peg$currPos += 11;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e47); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s7 = [s7, s8];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s6 = peg$c5;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
        }
      }
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      peg$silentFails--;
      if (s5 !== peg$FAILED) {
        peg$currPos = s4;
        s4 = undefined;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseComponentUse();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f60(s5);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    peg$savedPos = s0;
    s1 = peg$f61(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseConnectorUse_List() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parse_();
    s4 = peg$currPos;
    peg$silentFails++;
    s5 = peg$currPos;
    peg$silentFails++;
    s6 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c47) {
      s7 = peg$c47;
      peg$currPos += 11;
    } else {
      s7 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s7 !== peg$FAILED) {
      s8 = peg$parse_();
      s7 = [s7, s8];
      s6 = s7;
    } else {
      peg$currPos = s6;
      s6 = peg$FAILED;
    }
    if (s6 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 125) {
        s6 = peg$c5;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
    }
    peg$silentFails--;
    if (s6 === peg$FAILED) {
      s5 = undefined;
    } else {
      peg$currPos = s5;
      s5 = peg$FAILED;
    }
    peg$silentFails--;
    if (s5 !== peg$FAILED) {
      peg$currPos = s4;
      s4 = undefined;
    } else {
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      s5 = peg$parseConnectorUse();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s2;
        s2 = peg$f62(s5);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parse_();
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$currPos;
      peg$silentFails++;
      s6 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c47) {
        s7 = peg$c47;
        peg$currPos += 11;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
      if (s7 !== peg$FAILED) {
        s8 = peg$parse_();
        s7 = [s7, s8];
        s6 = s7;
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      if (s6 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s6 = peg$c5;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
      }
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      peg$silentFails--;
      if (s5 !== peg$FAILED) {
        peg$currPos = s4;
        s4 = undefined;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseConnectorUse();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f62(s5);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    peg$savedPos = s0;
    s1 = peg$f63(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseComponentUse() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQualifiedName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseBounds();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          s9 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 123) {
            s10 = peg$c4;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            s12 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c2) {
              s13 = peg$c2;
              peg$currPos += 5;
            } else {
              s13 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s13 !== peg$FAILED) {
              s14 = peg$parse_();
              if (input.substr(peg$currPos, 5) === peg$c16) {
                s15 = peg$c16;
                peg$currPos += 5;
              } else {
                s15 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e16); }
              }
              if (s15 !== peg$FAILED) {
                s16 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 58) {
                  s17 = peg$c14;
                  peg$currPos++;
                } else {
                  s17 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e14); }
                }
                if (s17 !== peg$FAILED) {
                  s18 = peg$parse_();
                  s19 = peg$parsePortUse();
                  if (s19 !== peg$FAILED) {
                    s20 = [];
                    s21 = peg$currPos;
                    s22 = peg$parse_();
                    s23 = peg$parsePortUse();
                    if (s23 !== peg$FAILED) {
                      s22 = [s22, s23];
                      s21 = s22;
                    } else {
                      peg$currPos = s21;
                      s21 = peg$FAILED;
                    }
                    while (s21 !== peg$FAILED) {
                      s20.push(s21);
                      s21 = peg$currPos;
                      s22 = peg$parse_();
                      s23 = peg$parsePortUse();
                      if (s23 !== peg$FAILED) {
                        s22 = [s22, s23];
                        s21 = s22;
                      } else {
                        peg$currPos = s21;
                        s21 = peg$FAILED;
                      }
                    }
                    peg$savedPos = s12;
                    s12 = peg$f64(s1, s5, s7, s19, s20);
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s12;
                  s12 = peg$FAILED;
                }
              } else {
                peg$currPos = s12;
                s12 = peg$FAILED;
              }
            } else {
              peg$currPos = s12;
              s12 = peg$FAILED;
            }
            if (s12 === peg$FAILED) {
              s12 = null;
            }
            s13 = [];
            s14 = peg$parseProperty();
            while (s14 !== peg$FAILED) {
              s13.push(s14);
              s14 = peg$parseProperty();
            }
            s14 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s15 = peg$c5;
              peg$currPos++;
            } else {
              s15 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s15 !== peg$FAILED) {
              s10 = [s10, s11, s12, s13, s14, s15];
              s9 = s10;
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          if (s9 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s9 = peg$c1;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
          }
          if (s9 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f65(s1, s5, s7, s9);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConnectorUse() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQualifiedName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseBounds();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          s9 = peg$currPos;
          if (input.substr(peg$currPos, 8) === peg$c48) {
            s10 = peg$c48;
            peg$currPos += 8;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e48); }
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            s12 = peg$parseConnectorBindingList();
            if (s12 !== peg$FAILED) {
              s10 = [s10, s11, s12];
              s9 = s10;
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          s10 = peg$parse_();
          s11 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 123) {
            s12 = peg$c4;
            peg$currPos++;
          } else {
            s12 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s12 !== peg$FAILED) {
            s13 = peg$parse_();
            s14 = peg$parse_();
            if (input.substr(peg$currPos, 5) === peg$c16) {
              s15 = peg$c16;
              peg$currPos += 5;
            } else {
              s15 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e16); }
            }
            if (s15 !== peg$FAILED) {
              s16 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 58) {
                s17 = peg$c14;
                peg$currPos++;
              } else {
                s17 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
              if (s17 !== peg$FAILED) {
                s18 = peg$parse_();
                s19 = [];
                s20 = peg$parsePortUse_Reverse();
                while (s20 !== peg$FAILED) {
                  s19.push(s20);
                  s20 = peg$parsePortUse_Reverse();
                }
                s20 = [];
                s21 = peg$parseProperty();
                while (s21 !== peg$FAILED) {
                  s20.push(s21);
                  s21 = peg$parseProperty();
                }
                s21 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 125) {
                  s22 = peg$c5;
                  peg$currPos++;
                } else {
                  s22 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e5); }
                }
                if (s22 !== peg$FAILED) {
                  s12 = [s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22];
                  s11 = s12;
                } else {
                  peg$currPos = s11;
                  s11 = peg$FAILED;
                }
              } else {
                peg$currPos = s11;
                s11 = peg$FAILED;
              }
            } else {
              peg$currPos = s11;
              s11 = peg$FAILED;
            }
          } else {
            peg$currPos = s11;
            s11 = peg$FAILED;
          }
          if (s11 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s11 = peg$c1;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
          }
          if (s11 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f66(s1, s5, s7, s9, s11);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePortUse() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQualifiedName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$currPos;
          if (input.substr(peg$currPos, 8) === peg$c49) {
            s8 = peg$c49;
            peg$currPos += 8;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e49); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseQualifiedName();
            if (s10 !== peg$FAILED) {
              peg$savedPos = s7;
              s7 = peg$f67(s1, s5, s10);
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          s9 = peg$parseBounds();
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          s10 = peg$parse_();
          s11 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 123) {
            s12 = peg$c4;
            peg$currPos++;
          } else {
            s12 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s12 !== peg$FAILED) {
            s13 = peg$parse_();
            s14 = [];
            s15 = peg$parseProperty();
            while (s15 !== peg$FAILED) {
              s14.push(s15);
              s15 = peg$parseProperty();
            }
            s15 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s16 = peg$c5;
              peg$currPos++;
            } else {
              s16 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s16 !== peg$FAILED) {
              s12 = [s12, s13, s14, s15, s16];
              s11 = s12;
            } else {
              peg$currPos = s11;
              s11 = peg$FAILED;
            }
          } else {
            peg$currPos = s11;
            s11 = peg$FAILED;
          }
          if (s11 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s11 = peg$c1;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
          }
          if (s11 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f68(s1, s5, s7, s9, s11);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePortUse_Reverse() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 126) {
      s1 = peg$c24;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsePortUse();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f69(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDelegation() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseQualifiedName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c23) {
        s3 = peg$c23;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQualifiedName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s7 = peg$c1;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f70(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFlow() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parseQualifiedName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 4) === peg$c29) {
        s3 = peg$c29;
        peg$currPos += 4;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQualifiedName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.substr(peg$currPos, 2) === peg$c23) {
            s7 = peg$c23;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseQualifiedName();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 59) {
                s11 = peg$c1;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e1); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f71(s1, s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConnectorBinding() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseQualifiedName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c7;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQualifiedName();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f72(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAttributeUse() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 94) {
      s1 = peg$c50;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseTypeUse();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f73(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseTypeUse();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f74(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseDataTypeDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c51) {
      s1 = peg$c51;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c52) {
          s6 = peg$c52;
          peg$currPos += 7;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e52); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseQualifiedName();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f75(s3, s8);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 123) {
          s7 = peg$c4;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$currPos;
          s10 = peg$parse_();
          if (input.substr(peg$currPos, 10) === peg$c53) {
            s11 = peg$c53;
            peg$currPos += 10;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e53); }
          }
          if (s11 !== peg$FAILED) {
            s12 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 58) {
              s13 = peg$c14;
              peg$currPos++;
            } else {
              s13 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
            if (s13 !== peg$FAILED) {
              s14 = peg$parse_();
              s15 = [];
              s16 = peg$currPos;
              s17 = peg$parse_();
              s18 = peg$parseAttributeUse();
              if (s18 !== peg$FAILED) {
                s17 = [s17, s18];
                s16 = s17;
              } else {
                peg$currPos = s16;
                s16 = peg$FAILED;
              }
              while (s16 !== peg$FAILED) {
                s15.push(s16);
                s16 = peg$currPos;
                s17 = peg$parse_();
                s18 = peg$parseAttributeUse();
                if (s18 !== peg$FAILED) {
                  s17 = [s17, s18];
                  s16 = s17;
                } else {
                  peg$currPos = s16;
                  s16 = peg$FAILED;
                }
              }
              peg$savedPos = s9;
              s9 = peg$f76(s3, s5, s15);
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          s10 = [];
          s11 = peg$parseProperty();
          while (s11 !== peg$FAILED) {
            s10.push(s11);
            s11 = peg$parseProperty();
          }
          s11 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 125) {
            s12 = peg$c5;
            peg$currPos++;
          } else {
            s12 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s12 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f77(s3, s5, s9, s10);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseValueTypeDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c54) {
      s1 = peg$c54;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 4) === peg$c55) {
        s3 = peg$c55;
        peg$currPos += 4;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e55); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$currPos;
          if (input.substr(peg$currPos, 7) === peg$c52) {
            s8 = peg$c52;
            peg$currPos += 7;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e52); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseQualifiedName();
            if (s10 !== peg$FAILED) {
              peg$savedPos = s7;
              s7 = peg$f78(s5, s10);
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 123) {
            s9 = peg$c4;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s11 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c56) {
              s12 = peg$c56;
              peg$currPos += 4;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e56); }
            }
            if (s12 !== peg$FAILED) {
              s13 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 61) {
                s14 = peg$c7;
                peg$currPos++;
              } else {
                s14 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s14 !== peg$FAILED) {
                s15 = peg$parse_();
                s16 = peg$parseQualifiedName();
                if (s16 !== peg$FAILED) {
                  peg$savedPos = s11;
                  s11 = peg$f79(s5, s7, s16);
                } else {
                  peg$currPos = s11;
                  s11 = peg$FAILED;
                }
              } else {
                peg$currPos = s11;
                s11 = peg$FAILED;
              }
            } else {
              peg$currPos = s11;
              s11 = peg$FAILED;
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            s12 = peg$parse_();
            s13 = peg$currPos;
            if (input.substr(peg$currPos, 9) === peg$c57) {
              s14 = peg$c57;
              peg$currPos += 9;
            } else {
              s14 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e57); }
            }
            if (s14 !== peg$FAILED) {
              s15 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 61) {
                s16 = peg$c7;
                peg$currPos++;
              } else {
                s16 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s16 !== peg$FAILED) {
                s17 = peg$parse_();
                s18 = peg$parseQualifiedName();
                if (s18 !== peg$FAILED) {
                  peg$savedPos = s13;
                  s13 = peg$f80(s5, s7, s11, s18);
                } else {
                  peg$currPos = s13;
                  s13 = peg$FAILED;
                }
              } else {
                peg$currPos = s13;
                s13 = peg$FAILED;
              }
            } else {
              peg$currPos = s13;
              s13 = peg$FAILED;
            }
            if (s13 === peg$FAILED) {
              s13 = null;
            }
            s14 = peg$parse_();
            s15 = [];
            s16 = peg$currPos;
            s17 = peg$parse_();
            s18 = peg$parseProperty();
            if (s18 !== peg$FAILED) {
              s17 = [s17, s18];
              s16 = s17;
            } else {
              peg$currPos = s16;
              s16 = peg$FAILED;
            }
            while (s16 !== peg$FAILED) {
              s15.push(s16);
              s16 = peg$currPos;
              s17 = peg$parse_();
              s18 = peg$parseProperty();
              if (s18 !== peg$FAILED) {
                s17 = [s17, s18];
                s16 = s17;
              } else {
                peg$currPos = s16;
                s16 = peg$FAILED;
              }
            }
            s16 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s17 = peg$c5;
              peg$currPos++;
            } else {
              s17 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s17 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f81(s5, s7, s11, s13, s15);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnumeration() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c58) {
      s1 = peg$c58;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 123) {
          s5 = peg$c4;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = [];
          s8 = peg$parseProperty();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parseProperty();
          }
          s8 = peg$parseEnumLiteralValueList();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s10 = peg$c5;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s10 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f82(s3, s7, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnumLiteralValue() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f83(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDimensionDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c57) {
      s1 = peg$c57;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s6 = peg$c4;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = [];
          s9 = peg$parseProperty();
          while (s9 !== peg$FAILED) {
            s8.push(s9);
            s9 = peg$parseProperty();
          }
          s9 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 125) {
            s10 = peg$c5;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s10 !== peg$FAILED) {
            s6 = [s6, s7, s8, s9, s10];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f84(s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnitDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c56) {
      s1 = peg$c56;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s6 = peg$c4;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$currPos;
          if (input.substr(peg$currPos, 9) === peg$c57) {
            s9 = peg$c57;
            peg$currPos += 9;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e57); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 61) {
              s11 = peg$c7;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              s13 = peg$parseQualifiedName();
              if (s13 !== peg$FAILED) {
                s9 = [s9, s10, s11, s12, s13];
                s8 = s9;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = [];
          s10 = peg$parseProperty();
          while (s10 !== peg$FAILED) {
            s9.push(s10);
            s10 = peg$parseProperty();
          }
          s10 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 125) {
            s11 = peg$c5;
            peg$currPos++;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s11 !== peg$FAILED) {
            s6 = [s6, s7, s8, s9, s10, s11];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f85(s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConstraintUse() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseConstraintKind();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseQualifiedName();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f86(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConstraintKind() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 13) === peg$c59) {
      s1 = peg$c59;
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 14) === peg$c60) {
        s1 = peg$c60;
        peg$currPos += 14;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e60); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c8) {
          s1 = peg$c8;
          peg$currPos += 9;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e8); }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f87(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseActionDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c61) {
      s1 = peg$c61;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c11) {
        s3 = peg$c11;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s7 = peg$c12;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e12); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parsePinList();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s11 = peg$c13;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e13); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 58) {
                  s13 = peg$c14;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e14); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  s15 = peg$parseQualifiedName();
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 123) {
                      s17 = peg$c4;
                      peg$currPos++;
                    } else {
                      s17 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e4); }
                    }
                    if (s17 !== peg$FAILED) {
                      s18 = peg$parse_();
                      s19 = [];
                      s20 = peg$currPos;
                      s21 = peg$parse_();
                      s22 = peg$parseProperty();
                      if (s22 === peg$FAILED) {
                        s22 = peg$parseBehaviorDef();
                        if (s22 === peg$FAILED) {
                          s22 = peg$parseDataDef();
                          if (s22 === peg$FAILED) {
                            s22 = peg$currPos;
                            s23 = peg$parse_();
                            if (input.substr(peg$currPos, 10) === peg$c62) {
                              s24 = peg$c62;
                              peg$currPos += 10;
                            } else {
                              s24 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e62); }
                            }
                            if (s24 !== peg$FAILED) {
                              s25 = peg$parse_();
                              if (input.charCodeAt(peg$currPos) === 58) {
                                s26 = peg$c14;
                                peg$currPos++;
                              } else {
                                s26 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e14); }
                              }
                              if (s26 !== peg$FAILED) {
                                s27 = peg$parse_();
                                s28 = peg$parseConstraintUse();
                                if (s28 !== peg$FAILED) {
                                  s29 = [];
                                  s30 = peg$currPos;
                                  s31 = peg$parse_();
                                  s32 = peg$parseConstraintUse();
                                  if (s32 !== peg$FAILED) {
                                    s31 = [s31, s32];
                                    s30 = s31;
                                  } else {
                                    peg$currPos = s30;
                                    s30 = peg$FAILED;
                                  }
                                  while (s30 !== peg$FAILED) {
                                    s29.push(s30);
                                    s30 = peg$currPos;
                                    s31 = peg$parse_();
                                    s32 = peg$parseConstraintUse();
                                    if (s32 !== peg$FAILED) {
                                      s31 = [s31, s32];
                                      s30 = s31;
                                    } else {
                                      peg$currPos = s30;
                                      s30 = peg$FAILED;
                                    }
                                  }
                                  peg$savedPos = s22;
                                  s22 = peg$f88(s5, s9, s15, s28, s29);
                                } else {
                                  peg$currPos = s22;
                                  s22 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s22;
                                s22 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s22;
                              s22 = peg$FAILED;
                            }
                            if (s22 === peg$FAILED) {
                              s22 = peg$parseActivityDelegation();
                            }
                          }
                        }
                      }
                      if (s22 !== peg$FAILED) {
                        peg$savedPos = s20;
                        s20 = peg$f89(s5, s9, s15, s22);
                      } else {
                        peg$currPos = s20;
                        s20 = peg$FAILED;
                      }
                      while (s20 !== peg$FAILED) {
                        s19.push(s20);
                        s20 = peg$currPos;
                        s21 = peg$parse_();
                        s22 = peg$parseProperty();
                        if (s22 === peg$FAILED) {
                          s22 = peg$parseBehaviorDef();
                          if (s22 === peg$FAILED) {
                            s22 = peg$parseDataDef();
                            if (s22 === peg$FAILED) {
                              s22 = peg$currPos;
                              s23 = peg$parse_();
                              if (input.substr(peg$currPos, 10) === peg$c62) {
                                s24 = peg$c62;
                                peg$currPos += 10;
                              } else {
                                s24 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e62); }
                              }
                              if (s24 !== peg$FAILED) {
                                s25 = peg$parse_();
                                if (input.charCodeAt(peg$currPos) === 58) {
                                  s26 = peg$c14;
                                  peg$currPos++;
                                } else {
                                  s26 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e14); }
                                }
                                if (s26 !== peg$FAILED) {
                                  s27 = peg$parse_();
                                  s28 = peg$parseConstraintUse();
                                  if (s28 !== peg$FAILED) {
                                    s29 = [];
                                    s30 = peg$currPos;
                                    s31 = peg$parse_();
                                    s32 = peg$parseConstraintUse();
                                    if (s32 !== peg$FAILED) {
                                      s31 = [s31, s32];
                                      s30 = s31;
                                    } else {
                                      peg$currPos = s30;
                                      s30 = peg$FAILED;
                                    }
                                    while (s30 !== peg$FAILED) {
                                      s29.push(s30);
                                      s30 = peg$currPos;
                                      s31 = peg$parse_();
                                      s32 = peg$parseConstraintUse();
                                      if (s32 !== peg$FAILED) {
                                        s31 = [s31, s32];
                                        s30 = s31;
                                      } else {
                                        peg$currPos = s30;
                                        s30 = peg$FAILED;
                                      }
                                    }
                                    peg$savedPos = s22;
                                    s22 = peg$f88(s5, s9, s15, s28, s29);
                                  } else {
                                    peg$currPos = s22;
                                    s22 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s22;
                                  s22 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s22;
                                s22 = peg$FAILED;
                              }
                              if (s22 === peg$FAILED) {
                                s22 = peg$parseActivityDelegation();
                              }
                            }
                          }
                        }
                        if (s22 !== peg$FAILED) {
                          peg$savedPos = s20;
                          s20 = peg$f89(s5, s9, s15, s22);
                        } else {
                          peg$currPos = s20;
                          s20 = peg$FAILED;
                        }
                      }
                      s20 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s21 = peg$c5;
                        peg$currPos++;
                      } else {
                        s21 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e5); }
                      }
                      if (s21 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f90(s5, s9, s15, s19);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseActivityDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c10) {
      s1 = peg$c10;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c11) {
        s3 = peg$c11;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parse_();
          if (input.substr(peg$currPos, 10) === peg$c42) {
            s8 = peg$c42;
            peg$currPos += 10;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e42); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseQualifiedNameList();
            if (s10 !== peg$FAILED) {
              s7 = [s7, s8, s9, s10];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parse_();
          s8 = [];
          s9 = peg$currPos;
          s10 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s11 = peg$c12;
            peg$currPos++;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e12); }
          }
          if (s11 !== peg$FAILED) {
            s12 = peg$parse_();
            s13 = peg$parsePinList();
            if (s13 === peg$FAILED) {
              s13 = null;
            }
            s14 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s15 = peg$c13;
              peg$currPos++;
            } else {
              s15 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
            if (s15 !== peg$FAILED) {
              s10 = [s10, s11, s12, s13, s14, s15];
              s9 = s10;
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          while (s9 !== peg$FAILED) {
            s8.push(s9);
            s9 = peg$currPos;
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 40) {
              s11 = peg$c12;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e12); }
            }
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              s13 = peg$parsePinList();
              if (s13 === peg$FAILED) {
                s13 = null;
              }
              s14 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s15 = peg$c13;
                peg$currPos++;
              } else {
                s15 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e13); }
              }
              if (s15 !== peg$FAILED) {
                s10 = [s10, s11, s12, s13, s14, s15];
                s9 = s10;
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          }
          s9 = peg$currPos;
          s10 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 58) {
            s11 = peg$c14;
            peg$currPos++;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
          if (s11 !== peg$FAILED) {
            s12 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 40) {
              s13 = peg$c12;
              peg$currPos++;
            } else {
              s13 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e12); }
            }
            if (s13 !== peg$FAILED) {
              s14 = peg$parse_();
              s15 = peg$parsePinList();
              if (s15 === peg$FAILED) {
                s15 = null;
              }
              s16 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s17 = peg$c13;
                peg$currPos++;
              } else {
                s17 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e13); }
              }
              if (s17 !== peg$FAILED) {
                s10 = [s10, s11, s12, s13, s14, s15, s16, s17];
                s9 = s10;
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          s10 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 123) {
            s11 = peg$c4;
            peg$currPos++;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s11 !== peg$FAILED) {
            s12 = peg$parse_();
            s13 = peg$parseActivityBody();
            if (s13 === peg$FAILED) {
              s13 = null;
            }
            s14 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s15 = peg$c5;
              peg$currPos++;
            } else {
              s15 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s15 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f91(s5, s6, s8, s9, s13);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseProtocol() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c25) {
      s1 = peg$c25;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s5 = peg$c12;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsePinList();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s9 = peg$c13;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s11 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 58) {
              s12 = peg$c14;
              peg$currPos++;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
            if (s12 !== peg$FAILED) {
              s13 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 40) {
                s14 = peg$c12;
                peg$currPos++;
              } else {
                s14 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e12); }
              }
              if (s14 !== peg$FAILED) {
                s15 = peg$parse_();
                s16 = peg$parsePinList();
                if (s16 === peg$FAILED) {
                  s16 = null;
                }
                s17 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s18 = peg$c13;
                  peg$currPos++;
                } else {
                  s18 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e13); }
                }
                if (s18 !== peg$FAILED) {
                  s12 = [s12, s13, s14, s15, s16, s17, s18];
                  s11 = s12;
                } else {
                  peg$currPos = s11;
                  s11 = peg$FAILED;
                }
              } else {
                peg$currPos = s11;
                s11 = peg$FAILED;
              }
            } else {
              peg$currPos = s11;
              s11 = peg$FAILED;
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            s12 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s13 = peg$c4;
              peg$currPos++;
            } else {
              s13 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s13 !== peg$FAILED) {
              s14 = peg$parse_();
              s15 = [];
              s16 = peg$parseProperty();
              if (s16 === peg$FAILED) {
                s16 = peg$parseBehaviorDef();
                if (s16 === peg$FAILED) {
                  s16 = peg$parseDataDef();
                }
              }
              while (s16 !== peg$FAILED) {
                s15.push(s16);
                s16 = peg$parseProperty();
                if (s16 === peg$FAILED) {
                  s16 = peg$parseBehaviorDef();
                  if (s16 === peg$FAILED) {
                    s16 = peg$parseDataDef();
                  }
                }
              }
              s16 = peg$currPos;
              s17 = peg$parse_();
              if (input.substr(peg$currPos, 11) === peg$c47) {
                s18 = peg$c47;
                peg$currPos += 11;
              } else {
                s18 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e47); }
              }
              if (s18 !== peg$FAILED) {
                s19 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 58) {
                  s20 = peg$c14;
                  peg$currPos++;
                } else {
                  s20 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e14); }
                }
                if (s20 !== peg$FAILED) {
                  s21 = peg$parse_();
                  s22 = [];
                  s23 = peg$parseActivityDelegation();
                  while (s23 !== peg$FAILED) {
                    s22.push(s23);
                    s23 = peg$parseActivityDelegation();
                  }
                  s17 = [s17, s18, s19, s20, s21, s22];
                  s16 = s17;
                } else {
                  peg$currPos = s16;
                  s16 = peg$FAILED;
                }
              } else {
                peg$currPos = s16;
                s16 = peg$FAILED;
              }
              if (s16 === peg$FAILED) {
                s16 = null;
              }
              s17 = peg$parseProtocolBody();
              if (s17 !== peg$FAILED) {
                s18 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 125) {
                  s19 = peg$c5;
                  peg$currPos++;
                } else {
                  s19 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e5); }
                }
                if (s19 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f92(s3, s7, s11, s15, s16, s17);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConstraintDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c62) {
      s1 = peg$c62;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s6 = peg$c12;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parsePinList();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s10 = peg$c13;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s10 !== peg$FAILED) {
            s6 = [s6, s7, s8, s9, s10];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        s7 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 58) {
          s8 = peg$c14;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s10 = peg$c12;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e12); }
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            s12 = peg$parsePinList();
            if (s12 === peg$FAILED) {
              s12 = null;
            }
            s13 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s14 = peg$c13;
              peg$currPos++;
            } else {
              s14 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
            if (s14 !== peg$FAILED) {
              s8 = [s8, s9, s10, s11, s12, s13, s14];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s8 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 123) {
          s9 = peg$c4;
          peg$currPos++;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s9 !== peg$FAILED) {
          s10 = peg$parse_();
          s11 = [];
          s12 = peg$parseProperty();
          if (s12 === peg$FAILED) {
            s12 = peg$parseBehaviorDef();
            if (s12 === peg$FAILED) {
              s12 = peg$parseDataDef();
            }
          }
          while (s12 !== peg$FAILED) {
            s11.push(s12);
            s12 = peg$parseProperty();
            if (s12 === peg$FAILED) {
              s12 = peg$parseBehaviorDef();
              if (s12 === peg$FAILED) {
                s12 = peg$parseDataDef();
              }
            }
          }
          s12 = peg$currPos;
          if (input.substr(peg$currPos, 8) === peg$c63) {
            s13 = peg$c63;
            peg$currPos += 8;
          } else {
            s13 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e63); }
          }
          if (s13 !== peg$FAILED) {
            s14 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 61) {
              s15 = peg$c7;
              peg$currPos++;
            } else {
              s15 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s15 !== peg$FAILED) {
              s16 = peg$parse_();
              s17 = peg$parseExpression();
              if (s17 !== peg$FAILED) {
                s13 = [s13, s14, s15, s16, s17];
                s12 = s13;
              } else {
                peg$currPos = s12;
                s12 = peg$FAILED;
              }
            } else {
              peg$currPos = s12;
              s12 = peg$FAILED;
            }
          } else {
            peg$currPos = s12;
            s12 = peg$FAILED;
          }
          if (s12 === peg$FAILED) {
            s12 = null;
          }
          s13 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 125) {
            s14 = peg$c5;
            peg$currPos++;
          } else {
            s14 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s14 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f93(s3, s5, s7, s11, s12);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExecutable() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c64) {
      s1 = peg$c64;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c11) {
        s3 = peg$c11;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s7 = peg$c12;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e12); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c65) {
              s10 = peg$c65;
              peg$currPos += 2;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e65); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s12 = peg$parseTypeUse_NoSemicolon();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$currPos;
                s15 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 44) {
                  s16 = peg$c66;
                  peg$currPos++;
                } else {
                  s16 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e66); }
                }
                if (s16 !== peg$FAILED) {
                  s17 = peg$parse_();
                  if (input.substr(peg$currPos, 2) === peg$c65) {
                    s18 = peg$c65;
                    peg$currPos += 2;
                  } else {
                    s18 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e65); }
                  }
                  if (s18 !== peg$FAILED) {
                    s19 = peg$parse_();
                    s20 = peg$parseTypeUse_NoSemicolon();
                    if (s20 !== peg$FAILED) {
                      peg$savedPos = s14;
                      s14 = peg$f94(s5, s12, s20);
                    } else {
                      peg$currPos = s14;
                      s14 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s14;
                    s14 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s14;
                  s14 = peg$FAILED;
                }
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$currPos;
                  s15 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s16 = peg$c66;
                    peg$currPos++;
                  } else {
                    s16 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e66); }
                  }
                  if (s16 !== peg$FAILED) {
                    s17 = peg$parse_();
                    if (input.substr(peg$currPos, 2) === peg$c65) {
                      s18 = peg$c65;
                      peg$currPos += 2;
                    } else {
                      s18 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e65); }
                    }
                    if (s18 !== peg$FAILED) {
                      s19 = peg$parse_();
                      s20 = peg$parseTypeUse_NoSemicolon();
                      if (s20 !== peg$FAILED) {
                        peg$savedPos = s14;
                        s14 = peg$f94(s5, s12, s20);
                      } else {
                        peg$currPos = s14;
                        s14 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s14;
                      s14 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s14;
                    s14 = peg$FAILED;
                  }
                }
                peg$savedPos = s9;
                s9 = peg$f95(s5, s12, s13);
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s11 = peg$c13;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 58) {
                s13 = peg$c14;
                peg$currPos++;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_();
                if (input.substr(peg$currPos, 3) === peg$c67) {
                  s15 = peg$c67;
                  peg$currPos += 3;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e67); }
                }
                if (s15 !== peg$FAILED) {
                  s16 = peg$parse_();
                  s17 = peg$parseQualifiedName();
                  if (s17 !== peg$FAILED) {
                    s18 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 123) {
                      s19 = peg$c4;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e4); }
                    }
                    if (s19 !== peg$FAILED) {
                      s20 = peg$parse_();
                      s21 = [];
                      s22 = peg$currPos;
                      s23 = peg$parse_();
                      s24 = peg$parseProperty();
                      if (s24 !== peg$FAILED) {
                        s23 = [s23, s24];
                        s22 = s23;
                      } else {
                        peg$currPos = s22;
                        s22 = peg$FAILED;
                      }
                      while (s22 !== peg$FAILED) {
                        s21.push(s22);
                        s22 = peg$currPos;
                        s23 = peg$parse_();
                        s24 = peg$parseProperty();
                        if (s24 !== peg$FAILED) {
                          s23 = [s23, s24];
                          s22 = s23;
                        } else {
                          peg$currPos = s22;
                          s22 = peg$FAILED;
                        }
                      }
                      s22 = [];
                      s23 = peg$currPos;
                      s24 = peg$parse_();
                      s25 = peg$parseNonBlockStatement();
                      if (s25 !== peg$FAILED) {
                        s24 = [s24, s25];
                        s23 = s24;
                      } else {
                        peg$currPos = s23;
                        s23 = peg$FAILED;
                      }
                      if (s23 !== peg$FAILED) {
                        while (s23 !== peg$FAILED) {
                          s22.push(s23);
                          s23 = peg$currPos;
                          s24 = peg$parse_();
                          s25 = peg$parseNonBlockStatement();
                          if (s25 !== peg$FAILED) {
                            s24 = [s24, s25];
                            s23 = s24;
                          } else {
                            peg$currPos = s23;
                            s23 = peg$FAILED;
                          }
                        }
                      } else {
                        s22 = peg$FAILED;
                      }
                      if (s22 !== peg$FAILED) {
                        s23 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 125) {
                          s24 = peg$c5;
                          peg$currPos++;
                        } else {
                          s24 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e5); }
                        }
                        if (s24 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f96(s5, s9, s17, s21, s22);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseActivityBody() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c68) {
      s1 = peg$c68;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s3 = peg$c4;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        s6 = peg$parse_();
        if (input.substr(peg$currPos, 7) === peg$c69) {
          s7 = peg$c69;
          peg$currPos += 7;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e69); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 58) {
            s9 = peg$c14;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s11 = [];
            s12 = peg$parseActionUse();
            if (s12 !== peg$FAILED) {
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parseActionUse();
              }
            } else {
              s11 = peg$FAILED;
            }
            if (s11 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f97(s11);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = [];
        s7 = peg$currPos;
        s8 = peg$parse_();
        s9 = peg$parseActivityRelation();
        if (s9 !== peg$FAILED) {
          peg$savedPos = s7;
          s7 = peg$f98(s5, s9);
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          s7 = peg$currPos;
          s8 = peg$parse_();
          s9 = peg$parseActivityRelation();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s7;
            s7 = peg$f98(s5, s9);
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        }
        s7 = [];
        s8 = peg$currPos;
        s9 = peg$parse_();
        s10 = peg$parseDataStore();
        if (s10 === peg$FAILED) {
          s10 = peg$parseDataBuffer();
        }
        if (s10 !== peg$FAILED) {
          peg$savedPos = s8;
          s8 = peg$f99(s5, s6, s10);
        } else {
          peg$currPos = s8;
          s8 = peg$FAILED;
        }
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          s8 = peg$currPos;
          s9 = peg$parse_();
          s10 = peg$parseDataStore();
          if (s10 === peg$FAILED) {
            s10 = peg$parseDataBuffer();
          }
          if (s10 !== peg$FAILED) {
            peg$savedPos = s8;
            s8 = peg$f99(s5, s6, s10);
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
        }
        s8 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s9 = peg$c5;
          peg$currPos++;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s9 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f100(s5, s6, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePinUse() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQualifiedName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s7 = peg$c1;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f101(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseActionUse() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQualifiedName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 59) {
            s8 = peg$c1;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            peg$savedPos = s7;
            s7 = peg$f102(s1, s5);
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
              s8 = peg$c4;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              s10 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c2) {
                s11 = peg$c2;
                peg$currPos += 5;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e2); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.substr(peg$currPos, 4) === peg$c70) {
                  s13 = peg$c70;
                  peg$currPos += 4;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e70); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s15 = peg$c14;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e14); }
                  }
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    s17 = [];
                    s18 = peg$parsePinUse();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parsePinUse();
                    }
                    peg$savedPos = s10;
                    s10 = peg$f103(s1, s5, s17);
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              s11 = [];
              s12 = peg$parseProperty();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parseProperty();
              }
              s12 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 125) {
                s13 = peg$c5;
                peg$currPos++;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e5); }
              }
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_();
                peg$savedPos = s7;
                s7 = peg$f104(s1, s5, s10, s11);
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          }
          if (s7 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4, s5, s6, s7];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseActivityRelation() {
    let s0;

    s0 = peg$parseActivityDelegation();
    if (s0 === peg$FAILED) {
      s0 = peg$parseActivityFlow();
    }

    return s0;
  }

  function peg$parseActivityDelegation() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c71) {
      s1 = peg$c71;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseQualifiedName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c23) {
          s5 = peg$c23;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQualifiedName();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s9 = peg$c1;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f105(s3, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseActivityFlow() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 4) === peg$c29) {
        s3 = peg$c29;
        peg$currPos += 4;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQualifiedName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.substr(peg$currPos, 2) === peg$c23) {
            s7 = peg$c23;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseActivitySwitch();
            if (s9 === peg$FAILED) {
              s9 = peg$parseQualifiedName();
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 59) {
                s11 = peg$c1;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e1); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              s12 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f106(s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseActivitySwitch() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c72) {
      s1 = peg$c72;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s3 = peg$c4;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = [];
        s6 = peg$parseActivitySwitchCase();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseActivitySwitchCase();
        }
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s7 = peg$c5;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f107(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseActivitySwitchCase() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c73) {
      s1 = peg$c73;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 58) {
          s5 = peg$c14;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQualifiedName();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s9 = peg$c66;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e66); }
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f108(s3, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDataStore() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c74) {
      s1 = peg$c74;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s5 = peg$c14;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseQualifiedName();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$parseIndex();
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          s10 = peg$parse_();
          s11 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 123) {
            s12 = peg$c4;
            peg$currPos++;
          } else {
            s12 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s12 !== peg$FAILED) {
            s13 = peg$parse_();
            s14 = [];
            s15 = peg$parseProperty();
            while (s15 !== peg$FAILED) {
              s14.push(s15);
              s15 = peg$parseProperty();
            }
            s15 = peg$currPos;
            if (input.substr(peg$currPos, 7) === peg$c75) {
              s16 = peg$c75;
              peg$currPos += 7;
            } else {
              s16 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e75); }
            }
            if (s16 !== peg$FAILED) {
              s17 = peg$parse_();
              if (input.substr(peg$currPos, 5) === peg$c54) {
                s18 = peg$c54;
                peg$currPos += 5;
              } else {
                s18 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e54); }
              }
              if (s18 !== peg$FAILED) {
                s19 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 61) {
                  s20 = peg$c7;
                  peg$currPos++;
                } else {
                  s20 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s20 !== peg$FAILED) {
                  s21 = peg$parse_();
                  s22 = peg$parseExpression();
                  if (s22 !== peg$FAILED) {
                    s23 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 59) {
                      s24 = peg$c1;
                      peg$currPos++;
                    } else {
                      s24 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e1); }
                    }
                    if (s24 !== peg$FAILED) {
                      s16 = [s16, s17, s18, s19, s20, s21, s22, s23, s24];
                      s15 = s16;
                    } else {
                      peg$currPos = s15;
                      s15 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s15;
                    s15 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s15;
                  s15 = peg$FAILED;
                }
              } else {
                peg$currPos = s15;
                s15 = peg$FAILED;
              }
            } else {
              peg$currPos = s15;
              s15 = peg$FAILED;
            }
            if (s15 === peg$FAILED) {
              s15 = null;
            }
            s16 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s17 = peg$c5;
              peg$currPos++;
            } else {
              s17 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s17 !== peg$FAILED) {
              s18 = peg$parse_();
              peg$savedPos = s11;
              s11 = peg$f109(s3, s7, s9, s14, s15);
            } else {
              peg$currPos = s11;
              s11 = peg$FAILED;
            }
          } else {
            peg$currPos = s11;
            s11 = peg$FAILED;
          }
          if (s11 === peg$FAILED) {
            s11 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 59) {
              s12 = peg$c1;
              peg$currPos++;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s12 === peg$FAILED) {
              s12 = null;
            }
            s13 = peg$parse_();
            peg$savedPos = s11;
            s11 = peg$f110(s3, s7, s9);
          }
          if (s11 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDataBuffer() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c76) {
      s1 = peg$c76;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s5 = peg$c14;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseQualifiedName();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$parseIndex();
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          s10 = peg$parse_();
          s11 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 123) {
            s12 = peg$c4;
            peg$currPos++;
          } else {
            s12 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s12 !== peg$FAILED) {
            s13 = peg$parse_();
            s14 = [];
            s15 = peg$parseProperty();
            while (s15 !== peg$FAILED) {
              s14.push(s15);
              s15 = peg$parseProperty();
            }
            s15 = peg$currPos;
            if (input.substr(peg$currPos, 7) === peg$c75) {
              s16 = peg$c75;
              peg$currPos += 7;
            } else {
              s16 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e75); }
            }
            if (s16 !== peg$FAILED) {
              s17 = peg$parse_();
              if (input.substr(peg$currPos, 5) === peg$c54) {
                s18 = peg$c54;
                peg$currPos += 5;
              } else {
                s18 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e54); }
              }
              if (s18 !== peg$FAILED) {
                s19 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 61) {
                  s20 = peg$c7;
                  peg$currPos++;
                } else {
                  s20 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s20 !== peg$FAILED) {
                  s21 = peg$parse_();
                  s22 = peg$parseExpression();
                  if (s22 !== peg$FAILED) {
                    s23 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 59) {
                      s24 = peg$c1;
                      peg$currPos++;
                    } else {
                      s24 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e1); }
                    }
                    if (s24 !== peg$FAILED) {
                      s16 = [s16, s17, s18, s19, s20, s21, s22, s23, s24];
                      s15 = s16;
                    } else {
                      peg$currPos = s15;
                      s15 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s15;
                    s15 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s15;
                  s15 = peg$FAILED;
                }
              } else {
                peg$currPos = s15;
                s15 = peg$FAILED;
              }
            } else {
              peg$currPos = s15;
              s15 = peg$FAILED;
            }
            if (s15 === peg$FAILED) {
              s15 = null;
            }
            s16 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s17 = peg$c5;
              peg$currPos++;
            } else {
              s17 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s17 !== peg$FAILED) {
              s18 = peg$parse_();
              peg$savedPos = s11;
              s11 = peg$f111(s3, s7, s9, s14, s15);
            } else {
              peg$currPos = s11;
              s11 = peg$FAILED;
            }
          } else {
            peg$currPos = s11;
            s11 = peg$FAILED;
          }
          if (s11 === peg$FAILED) {
            s11 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 59) {
              s12 = peg$c1;
              peg$currPos++;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s12 === peg$FAILED) {
              s12 = null;
            }
            s13 = peg$parse_();
            peg$savedPos = s11;
            s11 = peg$f112(s3, s7, s9);
          }
          if (s11 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseProtocolBody() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseProtocolControl();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseProtocolBodyInternal();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        s6 = peg$parseProtocolAlternativeType();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseProtocolBody();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f113(s1, s3, s6, s8);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f114(s1, s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseProtocolBodyInternal() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c12;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseProtocolBody();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c13;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f115(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseActionSend();
      if (s0 === peg$FAILED) {
        s0 = peg$parseActionReceive();
      }
    }

    return s0;
  }

  function peg$parseActionSend() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c26) {
      s1 = peg$c26;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 3) === peg$c27) {
          s5 = peg$c27;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQualifiedName();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f116(s3, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseActionReceive() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c28) {
      s1 = peg$c28;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseTypeUse();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 4) === peg$c29) {
          s5 = peg$c29;
          peg$currPos += 4;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e29); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQualifiedName();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f117(s3, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStatement() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseScenarioRef();
    if (s1 === peg$FAILED) {
      s1 = peg$parseSceneRef();
      if (s1 === peg$FAILED) {
        s1 = peg$parseIncDecStatement();
        if (s1 === peg$FAILED) {
          s1 = peg$parseAssignment();
          if (s1 === peg$FAILED) {
            s1 = peg$parseInvocation();
            if (s1 === peg$FAILED) {
              s1 = peg$parseNonBlockStatement();
              if (s1 === peg$FAILED) {
                s1 = peg$parseBlockStatement();
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIncDecStatement() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseQualifiedName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c77) {
        s3 = peg$c77;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e77); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c78) {
          s3 = peg$c78;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e78); }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 59) {
          s5 = peg$c1;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f119(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNonBlockStatement() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseAssignmentExpression();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s4 = peg$c1;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s4 !== peg$FAILED) {
        s2 = [s2, s3, s4];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$parseVariableDecl();
      if (s1 === peg$FAILED) {
        s1 = peg$parseReturnStatement();
        if (s1 === peg$FAILED) {
          s1 = peg$parseWhileStatement();
          if (s1 === peg$FAILED) {
            s1 = peg$parseDoStatement();
            if (s1 === peg$FAILED) {
              s1 = peg$parseForStatement();
              if (s1 === peg$FAILED) {
                s1 = peg$parseIfBlockStatement();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseSwitchStatement();
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f120(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBlockStatement() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c4;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parse_();
      s6 = peg$parseStatement();
      if (s6 !== peg$FAILED) {
        peg$savedPos = s4;
        s4 = peg$f121(s6);
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parse_();
          s6 = peg$parseStatement();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f121(s6);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s5 = peg$c5;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f122(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVariableDecl() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c79) {
      s1 = peg$c79;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 58) {
          s5 = peg$c14;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQualifiedName();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseIndex();
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parse_();
            s11 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 61) {
              s12 = peg$c7;
              peg$currPos++;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s12 !== peg$FAILED) {
              s13 = peg$parse_();
              s14 = peg$parseExpression();
              if (s14 !== peg$FAILED) {
                s12 = [s12, s13, s14];
                s11 = s12;
              } else {
                peg$currPos = s11;
                s11 = peg$FAILED;
              }
            } else {
              peg$currPos = s11;
              s11 = peg$FAILED;
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            s12 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s13 = peg$c1;
              peg$currPos++;
            } else {
              s13 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s13 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f123(s3, s7, s9, s11);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIfBlockStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseIfStatement();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c80) {
        s5 = peg$c80;
        peg$currPos += 4;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e80); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c81) {
          s7 = peg$c81;
          peg$currPos += 2;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e81); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$parseIfStatement();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f124(s1, s9);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c80) {
          s5 = peg$c80;
          peg$currPos += 4;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e80); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.substr(peg$currPos, 2) === peg$c81) {
            s7 = peg$c81;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e81); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseIfStatement();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s4;
              s4 = peg$f124(s1, s9);
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      s4 = peg$parse_();
      s5 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c80) {
        s6 = peg$c80;
        peg$currPos += 4;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e80); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s8 = peg$parseStatement();
        if (s8 !== peg$FAILED) {
          peg$savedPos = s5;
          s5 = peg$f125(s1, s3, s8);
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f126(s1, s3, s5);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIfStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c81) {
      s1 = peg$c81;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c12;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c13;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseStatement();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f127(s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseReturnStatement() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c82) {
      s1 = peg$c82;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 59) {
          s5 = peg$c1;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f128(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhileStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c83) {
      s1 = peg$c83;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c12;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c13;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseStatement();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f129(s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDoStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c84) {
      s1 = peg$c84;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e84); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseStatement();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 5) === peg$c83) {
          s5 = peg$c83;
          peg$currPos += 5;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e83); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s7 = peg$c12;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e12); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseExpression();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s11 = peg$c13;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e13); }
              }
              if (s11 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f130(s3, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseForStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c85) {
      s1 = peg$c85;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c12;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseForControl();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c13;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseStatement();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f131(s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseForControl() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseForVarList();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f132(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseForVar() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseVariableDecl();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c65) {
        s3 = peg$c65;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e65); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f133(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSwitchStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c72) {
      s1 = peg$c72;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c12;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c13;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s9 = peg$c4;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = [];
              s12 = peg$parseSwitchClause();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parseSwitchClause();
              }
              s12 = peg$parse_();
              s13 = peg$parseDefaultSwitchClause();
              if (s13 === peg$FAILED) {
                s13 = null;
              }
              s14 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 125) {
                s15 = peg$c5;
                peg$currPos++;
              } else {
                s15 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e5); }
              }
              if (s15 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f134(s5, s11, s13);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSwitchClause() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c73) {
      s1 = peg$c73;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 58) {
          s5 = peg$c14;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseStatement();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f135(s3, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDefaultSwitchClause() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c86) {
      s1 = peg$c86;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseStatement();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f136(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExpression() {
    let s0;

    s0 = peg$parseConditionalExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAssignmentExpression();
    }

    return s0;
  }

  function peg$parseAssignmentExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseLeftHandSide();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseAssignmentOperator();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f137(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConditionalExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseConditionalImpliesExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 63) {
        s3 = peg$c87;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e87); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 58) {
            s7 = peg$c14;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseConditionalImpliesExpression();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f138(s1, s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseConditionalImpliesExpression();
    }

    return s0;
  }

  function peg$parseConditionalImpliesExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseConditionalOrExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c88) {
        s5 = peg$c88;
        peg$currPos += 7;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e88); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseConditionalOrExpression();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f139(s1, s7);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c88) {
          s5 = peg$c88;
          peg$currPos += 7;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e88); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseConditionalOrExpression();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f139(s1, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f140(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConditionalOrExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseConditionalAndExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c89) {
        s5 = peg$c89;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e89); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseConditionalAndExpression();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f141(s1, s7);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c89) {
          s5 = peg$c89;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e89); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseConditionalAndExpression();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f141(s1, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f142(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConditionalAndExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseInclusiveOrExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c90) {
        s5 = peg$c90;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e90); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseInclusiveOrExpression();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f143(s1, s7);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c90) {
          s5 = peg$c90;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e90); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseInclusiveOrExpression();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f143(s1, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f144(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInclusiveOrExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseExclusiveOrExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 124) {
        s5 = peg$c91;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e91); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseExclusiveOrExpression();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f145(s1, s7);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 124) {
          s5 = peg$c91;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e91); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseExclusiveOrExpression();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f145(s1, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f146(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExclusiveOrExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseAndExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 94) {
        s5 = peg$c50;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseAndExpression();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f147(s1, s7);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 94) {
          s5 = peg$c50;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e50); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseAndExpression();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f147(s1, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f148(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAndExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseEqualityExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 38) {
        s5 = peg$c92;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e92); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseEqualityExpression();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f149(s1, s7);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 38) {
          s5 = peg$c92;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e92); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseEqualityExpression();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f149(s1, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f150(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEqualityExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseClassificationExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseEqualityOperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseClassificationExpression();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f151(s1, s5, s7);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseEqualityOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseClassificationExpression();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f151(s1, s5, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f152(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseClassificationExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseRelationalExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.substr(peg$currPos, 10) === peg$c93) {
        s5 = peg$c93;
        peg$currPos += 10;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e93); }
      }
      if (s5 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c94) {
          s5 = peg$c94;
          peg$currPos += 7;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e94); }
        }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseQualifiedName();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f153(s1, s5, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f154(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRelationalExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseShiftExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseRelationalOperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseShiftExpression();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f155(s1, s5, s7);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseRelationalOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseShiftExpression();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f155(s1, s5, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f156(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseShiftExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseAdditiveExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseShiftOperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseAdditiveExpression();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f157(s1, s5, s7);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseShiftOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseAdditiveExpression();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f157(s1, s5, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f158(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAdditiveExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseMultiplicativeExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseAdditiveOperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseMultiplicativeExpression();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f159(s1, s5, s7);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseAdditiveOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseMultiplicativeExpression();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f159(s1, s5, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f160(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMultiplicativeExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseUnaryExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseMultiplicativeOperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseUnaryExpression();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f161(s1, s5, s7);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseMultiplicativeOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseUnaryExpression();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f161(s1, s5, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f162(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnaryExpression() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r0.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e95); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseUnaryExpression();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f163(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseIncrementOrDecrementExpression();
    }

    return s0;
  }

  function peg$parseIncrementOrDecrementExpression() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseLeftHandSide();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseAffixOperator();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f164(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseAffixOperator();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLeftHandSide();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f165(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsePrimaryExpression();
      }
    }

    return s0;
  }

  function peg$parsePrimaryExpression() {
    let s0;

    s0 = peg$parseDataTypeAccessExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseEnumValueLiteralExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseInstanceCreationExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parseArrayLiteralExpression();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSequenceConstructionExpression();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSequenceAccessExpression();
              if (s0 === peg$FAILED) {
                s0 = peg$parseNameExpression();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseLiteralExpression();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseThisExpression();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseParenthesizedExpression();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseNameExpression() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseQualifiedName();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f166(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseInstanceCreationExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c95) {
      s1 = peg$c95;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e96); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseQualifiedName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseIndex();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f167(s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSequenceConstructionExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c4;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseSequenceElements();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 125) {
        s5 = peg$c5;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f168(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseArrayLiteralExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c96;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseQualifiedNameList();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 93) {
        s5 = peg$c97;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e98); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f169(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSequenceElements() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseSequenceExpressionList();
    if (s1 === peg$FAILED) {
      s1 = peg$parseSequenceRange();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f170(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSequenceExpressionList() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseLiteralExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c66;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e66); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseLiteralExpression();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f171(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c66;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseLiteralExpression();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f171(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c66;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e66); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f172(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSequenceRange() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseNaturalLiteralExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c98) {
        s3 = peg$c98;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e99); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseNaturalLiteralExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f173(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSequenceAccessExpression() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseNameExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseNonEmptyIndex();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f174(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDataTypeAccessExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseQualifiedName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c99) {
        s3 = peg$c99;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e100); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseNonEmptyIndex();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f175(s1, s5, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLiteralExpression() {
    let s0;

    s0 = peg$parseBooleanLiteralExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNaturalLiteralExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseStringLiteralExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parseEnumValueLiteralExpression();
          if (s0 === peg$FAILED) {
            s0 = peg$parseNullLiteralExpression();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseNullLiteralExpression() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c100) {
      s1 = peg$c100;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f176();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEnumValueLiteralExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseQualifiedName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c101) {
        s3 = peg$c101;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e102); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f177(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBooleanLiteralExpression() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseEBoolean();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f178(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNaturalLiteralExpression() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseINT();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f179(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseStringLiteralExpression() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseSTRING();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f180(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseThisExpression() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c102) {
      s1 = peg$c102;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e103); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f181();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseParenthesizedExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c12;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c13;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f182(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLeftHandSide() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseDataTypeAccessExpression();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f183(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseEnumValueLiteralExpression();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f184(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNameExpression();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseNonEmptyIndex();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f185(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c12;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e12); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseLeftHandSide();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c13;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e13); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f186(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseAssignmentOperator() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c7;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c103) {
        s1 = peg$c103;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e104); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c104) {
          s1 = peg$c104;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e105); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c105) {
            s1 = peg$c105;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e106); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c106) {
              s1 = peg$c106;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e107); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c107) {
                s1 = peg$c107;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e108); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c108) {
                  s1 = peg$c108;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e109); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c109) {
                    s1 = peg$c109;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e110); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c110) {
                      s1 = peg$c110;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e111); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c111) {
                        s1 = peg$c111;
                        peg$currPos += 3;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e112); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c112) {
                          s1 = peg$c112;
                          peg$currPos += 3;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e113); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c113) {
                            s1 = peg$c113;
                            peg$currPos += 4;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e114); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f187(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEqualityOperator() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c114) {
      s1 = peg$c114;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e115); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c115) {
        s1 = peg$c115;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e116); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f188(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRelationalOperator() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c116) {
      s1 = peg$c116;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e117); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c117) {
        s1 = peg$c117;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e118); }
      }
      if (s1 === peg$FAILED) {
        s1 = input.charAt(peg$currPos);
        if (peg$r1.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e119); }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f189(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseShiftOperator() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c118) {
      s1 = peg$c118;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c119) {
        s1 = peg$c119;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e121); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c120) {
          s1 = peg$c120;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e122); }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f190(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAdditiveOperator() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r2.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f191(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMultiplicativeOperator() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r3.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e124); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f192(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAffixOperator() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c77) {
      s1 = peg$c77;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c78) {
        s1 = peg$c78;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e78); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f193(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseProperty() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c121) {
      s1 = peg$c121;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 58) {
          s6 = peg$c14;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseQualifiedName();
          if (s8 !== peg$FAILED) {
            s6 = [s6, s7, s8];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        s7 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 61) {
          s8 = peg$c7;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          s10 = peg$parseExpression();
          if (s10 !== peg$FAILED) {
            s8 = [s8, s9, s10];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s8 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 59) {
          s9 = peg$c1;
          peg$currPos++;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s9 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f194(s3, s5, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePin() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c22) {
          s6 = peg$c22;
          peg$currPos += 4;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseQualifiedName();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseIndex();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f195(s1, s5, s6, s8);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTypeUse() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQualifiedName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseIndex();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          s9 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 123) {
            s10 = peg$c4;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            s12 = [];
            s13 = peg$parseProperty();
            while (s13 !== peg$FAILED) {
              s12.push(s13);
              s13 = peg$parseProperty();
            }
            s13 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s14 = peg$c5;
              peg$currPos++;
            } else {
              s14 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s14 !== peg$FAILED) {
              s10 = [s10, s11, s12, s13, s14];
              s9 = s10;
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          if (s9 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s9 = peg$c1;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
          }
          if (s9 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f196(s1, s5, s7, s9);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTypeUse_NoSemicolon() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQualifiedName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseIndex();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          s9 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 123) {
            s10 = peg$c4;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            s12 = [];
            s13 = peg$parseProperty();
            while (s13 !== peg$FAILED) {
              s12.push(s13);
              s13 = peg$parseProperty();
            }
            s13 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s14 = peg$c5;
              peg$currPos++;
            } else {
              s14 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s14 !== peg$FAILED) {
              s10 = [s10, s11, s12, s13, s14];
              s9 = s10;
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f197(s1, s5, s7, s9);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIndex() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = [];
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s2 = peg$c96;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseExpression();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 93) {
        s6 = peg$c97;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e98); }
      }
      if (s6 !== peg$FAILED) {
        s2 = [s2, s3, s4, s5, s6];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c96;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e97); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = peg$parseExpression();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s6 = peg$c97;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e98); }
          }
          if (s6 !== peg$FAILED) {
            s2 = [s2, s3, s4, s5, s6];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNonEmptyIndex() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = [];
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s2 = peg$c96;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseExpression();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s6 = peg$c97;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e98); }
        }
        if (s6 !== peg$FAILED) {
          s2 = [s2, s3, s4, s5, s6];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c96;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e97); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = peg$parseExpression();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 93) {
              s6 = peg$c97;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e98); }
            }
            if (s6 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5, s6];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFlowProperty() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c65) {
      s1 = peg$c65;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c67) {
        s1 = peg$c67;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e67); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c122) {
          s1 = peg$c122;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e126); }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f198(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseProtocolAlternativeType() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r4.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f199(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseProtocolControl() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c123) {
      s1 = peg$c123;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e128); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c124) {
        s1 = peg$c124;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e129); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c125) {
          s1 = peg$c125;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e130); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c126) {
            s1 = peg$c126;
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e131); }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f200(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAllocationTable() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c127) {
      s1 = peg$c127;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e132); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s3 = peg$c4;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parse_();
        s8 = peg$parseExecutableAllocation();
        if (s8 === peg$FAILED) {
          s8 = peg$parseActivityAllocation();
        }
        if (s8 !== peg$FAILED) {
          s7 = [s7, s8];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parse_();
          s8 = peg$parseExecutableAllocation();
          if (s8 === peg$FAILED) {
            s8 = peg$parseActivityAllocation();
          }
          if (s8 !== peg$FAILED) {
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s7 = peg$c5;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f201(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExecutableAllocation() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c64) {
      s1 = peg$c64;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseQualifiedName();
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c100) {
          s3 = peg$c100;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e101); }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c23) {
          s5 = peg$c23;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQualifiedName();
          if (s7 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c100) {
              s7 = peg$c100;
              peg$currPos += 4;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e101); }
            }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f202(s3, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseActivityAllocation() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c10) {
      s1 = peg$c10;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseQualifiedName();
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c100) {
          s3 = peg$c100;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e101); }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c23) {
          s5 = peg$c23;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQualifiedName();
          if (s7 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c100) {
              s7 = peg$c100;
              peg$currPos += 4;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e101); }
            }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f203(s3, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBounds() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c96;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseEInt();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c66;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseEInt();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 93) {
              s9 = peg$c97;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e98); }
            }
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f204(s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnvironmentDefinition() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 21) === peg$c128) {
      s1 = peg$c128;
      peg$currPos += 21;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e133); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 123) {
          s5 = peg$c4;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = [];
          s8 = peg$currPos;
          s9 = peg$parse_();
          s10 = peg$parseEntityDef();
          if (s10 !== peg$FAILED) {
            peg$savedPos = s8;
            s8 = peg$f205(s3, s10);
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$currPos;
            s9 = peg$parse_();
            s10 = peg$parseEntityDef();
            if (s10 !== peg$FAILED) {
              peg$savedPos = s8;
              s8 = peg$f205(s3, s10);
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          }
          s8 = [];
          s9 = peg$currPos;
          s10 = peg$parse_();
          s11 = peg$parseConnectionDef();
          if (s11 !== peg$FAILED) {
            peg$savedPos = s9;
            s9 = peg$f206(s3, s7, s11);
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          while (s9 !== peg$FAILED) {
            s8.push(s9);
            s9 = peg$currPos;
            s10 = peg$parse_();
            s11 = peg$parseConnectionDef();
            if (s11 !== peg$FAILED) {
              peg$savedPos = s9;
              s9 = peg$f206(s3, s7, s11);
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          }
          s9 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 125) {
            s10 = peg$c5;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s10 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f207(s3, s7, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEntityUse() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        s6 = peg$parseQualifiedName();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseIndex();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          peg$savedPos = s5;
          s5 = peg$f208(s1, s6, s8);
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = peg$currPos;
          s6 = input.charAt(peg$currPos);
          if (peg$r5.test(s6)) {
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e134); }
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s5;
            s6 = peg$f209(s1, s6);
          }
          s5 = s6;
        }
        if (s5 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4, s5];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseQualifiedName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseIndex();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f210(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseEntityUseList() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseEntityUse();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c66;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e66); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseEntityUse();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f211(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c66;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseEntityUse();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f211(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f212(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEntityDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c129) {
      s1 = peg$c129;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e135); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c11) {
        s3 = peg$c11;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 123) {
            s7 = peg$c4;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = [];
            s10 = peg$currPos;
            s11 = peg$parse_();
            s12 = peg$currPos;
            if (input.substr(peg$currPos, 8) === peg$c130) {
              s13 = peg$c130;
              peg$currPos += 8;
            } else {
              s13 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e136); }
            }
            if (s13 !== peg$FAILED) {
              s14 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 123) {
                s15 = peg$c4;
                peg$currPos++;
              } else {
                s15 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e4); }
              }
              if (s15 !== peg$FAILED) {
                s16 = peg$parse_();
                s17 = peg$parseEntityUseList();
                if (s17 !== peg$FAILED) {
                  s18 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s19 = peg$c5;
                    peg$currPos++;
                  } else {
                    s19 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e5); }
                  }
                  if (s19 !== peg$FAILED) {
                    peg$savedPos = s12;
                    s12 = peg$f213(s5, s17);
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s12;
                  s12 = peg$FAILED;
                }
              } else {
                peg$currPos = s12;
                s12 = peg$FAILED;
              }
            } else {
              peg$currPos = s12;
              s12 = peg$FAILED;
            }
            if (s12 === peg$FAILED) {
              s12 = peg$currPos;
              if (input.substr(peg$currPos, 10) === peg$c131) {
                s13 = peg$c131;
                peg$currPos += 10;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e137); }
              }
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 123) {
                  s15 = peg$c4;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e4); }
                }
                if (s15 !== peg$FAILED) {
                  s16 = peg$parse_();
                  s17 = [];
                  s18 = peg$currPos;
                  s19 = peg$parse_();
                  s20 = peg$parsePropertyDef();
                  if (s20 !== peg$FAILED) {
                    s19 = [s19, s20];
                    s18 = s19;
                  } else {
                    peg$currPos = s18;
                    s18 = peg$FAILED;
                  }
                  while (s18 !== peg$FAILED) {
                    s17.push(s18);
                    s18 = peg$currPos;
                    s19 = peg$parse_();
                    s20 = peg$parsePropertyDef();
                    if (s20 !== peg$FAILED) {
                      s19 = [s19, s20];
                      s18 = s19;
                    } else {
                      peg$currPos = s18;
                      s18 = peg$FAILED;
                    }
                  }
                  s18 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s19 = peg$c5;
                    peg$currPos++;
                  } else {
                    s19 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e5); }
                  }
                  if (s19 !== peg$FAILED) {
                    peg$savedPos = s12;
                    s12 = peg$f214(s5, s17);
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s12;
                  s12 = peg$FAILED;
                }
              } else {
                peg$currPos = s12;
                s12 = peg$FAILED;
              }
              if (s12 === peg$FAILED) {
                s12 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c132) {
                  s13 = peg$c132;
                  peg$currPos += 5;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e138); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 123) {
                    s15 = peg$c4;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e4); }
                  }
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    s17 = [];
                    s18 = peg$currPos;
                    s19 = peg$parse_();
                    s20 = peg$parseRoleDef();
                    if (s20 !== peg$FAILED) {
                      s19 = [s19, s20];
                      s18 = s19;
                    } else {
                      peg$currPos = s18;
                      s18 = peg$FAILED;
                    }
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$currPos;
                      s19 = peg$parse_();
                      s20 = peg$parseRoleDef();
                      if (s20 !== peg$FAILED) {
                        s19 = [s19, s20];
                        s18 = s19;
                      } else {
                        peg$currPos = s18;
                        s18 = peg$FAILED;
                      }
                    }
                    s18 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s19 = peg$c5;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e5); }
                    }
                    if (s19 !== peg$FAILED) {
                      peg$savedPos = s12;
                      s12 = peg$f215(s5, s17);
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s12;
                  s12 = peg$FAILED;
                }
              }
            }
            if (s12 !== peg$FAILED) {
              peg$savedPos = s10;
              s10 = peg$f216(s5, s12);
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$currPos;
              s11 = peg$parse_();
              s12 = peg$currPos;
              if (input.substr(peg$currPos, 8) === peg$c130) {
                s13 = peg$c130;
                peg$currPos += 8;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e136); }
              }
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 123) {
                  s15 = peg$c4;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e4); }
                }
                if (s15 !== peg$FAILED) {
                  s16 = peg$parse_();
                  s17 = peg$parseEntityUseList();
                  if (s17 !== peg$FAILED) {
                    s18 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s19 = peg$c5;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e5); }
                    }
                    if (s19 !== peg$FAILED) {
                      peg$savedPos = s12;
                      s12 = peg$f213(s5, s17);
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s12;
                  s12 = peg$FAILED;
                }
              } else {
                peg$currPos = s12;
                s12 = peg$FAILED;
              }
              if (s12 === peg$FAILED) {
                s12 = peg$currPos;
                if (input.substr(peg$currPos, 10) === peg$c131) {
                  s13 = peg$c131;
                  peg$currPos += 10;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e137); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 123) {
                    s15 = peg$c4;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e4); }
                  }
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    s17 = [];
                    s18 = peg$currPos;
                    s19 = peg$parse_();
                    s20 = peg$parsePropertyDef();
                    if (s20 !== peg$FAILED) {
                      s19 = [s19, s20];
                      s18 = s19;
                    } else {
                      peg$currPos = s18;
                      s18 = peg$FAILED;
                    }
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$currPos;
                      s19 = peg$parse_();
                      s20 = peg$parsePropertyDef();
                      if (s20 !== peg$FAILED) {
                        s19 = [s19, s20];
                        s18 = s19;
                      } else {
                        peg$currPos = s18;
                        s18 = peg$FAILED;
                      }
                    }
                    s18 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s19 = peg$c5;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e5); }
                    }
                    if (s19 !== peg$FAILED) {
                      peg$savedPos = s12;
                      s12 = peg$f214(s5, s17);
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s12;
                  s12 = peg$FAILED;
                }
                if (s12 === peg$FAILED) {
                  s12 = peg$currPos;
                  if (input.substr(peg$currPos, 5) === peg$c132) {
                    s13 = peg$c132;
                    peg$currPos += 5;
                  } else {
                    s13 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e138); }
                  }
                  if (s13 !== peg$FAILED) {
                    s14 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 123) {
                      s15 = peg$c4;
                      peg$currPos++;
                    } else {
                      s15 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e4); }
                    }
                    if (s15 !== peg$FAILED) {
                      s16 = peg$parse_();
                      s17 = [];
                      s18 = peg$currPos;
                      s19 = peg$parse_();
                      s20 = peg$parseRoleDef();
                      if (s20 !== peg$FAILED) {
                        s19 = [s19, s20];
                        s18 = s19;
                      } else {
                        peg$currPos = s18;
                        s18 = peg$FAILED;
                      }
                      while (s18 !== peg$FAILED) {
                        s17.push(s18);
                        s18 = peg$currPos;
                        s19 = peg$parse_();
                        s20 = peg$parseRoleDef();
                        if (s20 !== peg$FAILED) {
                          s19 = [s19, s20];
                          s18 = s19;
                        } else {
                          peg$currPos = s18;
                          s18 = peg$FAILED;
                        }
                      }
                      s18 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s19 = peg$c5;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e5); }
                      }
                      if (s19 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s12 = peg$f215(s5, s17);
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                }
              }
              if (s12 !== peg$FAILED) {
                peg$savedPos = s10;
                s10 = peg$f216(s5, s12);
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
            }
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s11 = peg$c5;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s11 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f217(s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePropertyDef() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c133) {
      s1 = peg$c133;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e139); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c11) {
        s3 = peg$c11;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f218(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRoleDef() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c134) {
      s1 = peg$c134;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e140); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c11) {
        s3 = peg$c11;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c65) {
          s3 = peg$c65;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e65); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c67) {
            s3 = peg$c67;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e67); }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f219(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConnectionDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c135) {
      s1 = peg$c135;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e141); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c11) {
        s3 = peg$c11;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 123) {
            s7 = peg$c4;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parse_();
            if (input.substr(peg$currPos, 4) === peg$c29) {
              s10 = peg$c29;
              peg$currPos += 4;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e29); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s12 = peg$parseID();
              if (s12 !== peg$FAILED) {
                s13 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 46) {
                  s14 = peg$c38;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e38); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = peg$parse_();
                  s16 = peg$parseID();
                  if (s16 !== peg$FAILED) {
                    s17 = peg$parse_();
                    s18 = peg$parse_();
                    if (input.substr(peg$currPos, 2) === peg$c23) {
                      s19 = peg$c23;
                      peg$currPos += 2;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e23); }
                    }
                    if (s19 !== peg$FAILED) {
                      s20 = peg$parse_();
                      s21 = peg$parseID();
                      if (s21 !== peg$FAILED) {
                        s22 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 46) {
                          s23 = peg$c38;
                          peg$currPos++;
                        } else {
                          s23 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e38); }
                        }
                        if (s23 !== peg$FAILED) {
                          s24 = peg$parse_();
                          s25 = peg$parseID();
                          if (s25 !== peg$FAILED) {
                            s26 = peg$parse_();
                            s27 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 125) {
                              s28 = peg$c5;
                              peg$currPos++;
                            } else {
                              s28 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e5); }
                            }
                            if (s28 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f220(s5, s12, s16, s21, s25);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnvironmentConfiguration() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 24) === peg$c136) {
      s1 = peg$c136;
      peg$currPos += 24;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e142); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c23) {
          s5 = peg$c23;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQualifiedName();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s9 = peg$c4;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = [];
              s12 = peg$currPos;
              s13 = peg$parse_();
              s14 = peg$parseInstantiation();
              if (s14 === peg$FAILED) {
                s14 = peg$parseAssociation();
                if (s14 === peg$FAILED) {
                  s14 = peg$parseAssignment();
                }
              }
              if (s14 !== peg$FAILED) {
                peg$savedPos = s12;
                s12 = peg$f221(s3, s7, s14);
              } else {
                peg$currPos = s12;
                s12 = peg$FAILED;
              }
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$currPos;
                s13 = peg$parse_();
                s14 = peg$parseInstantiation();
                if (s14 === peg$FAILED) {
                  s14 = peg$parseAssociation();
                  if (s14 === peg$FAILED) {
                    s14 = peg$parseAssignment();
                  }
                }
                if (s14 !== peg$FAILED) {
                  peg$savedPos = s12;
                  s12 = peg$f221(s3, s7, s14);
                } else {
                  peg$currPos = s12;
                  s12 = peg$FAILED;
                }
              }
              s12 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 125) {
                s13 = peg$c5;
                peg$currPos++;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e5); }
              }
              if (s13 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f222(s3, s7, s11);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInstantiation() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQualifiedName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s7 = peg$c1;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f223(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAssociation() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseQualifiedName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQualifiedName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s7 = peg$c1;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f224(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEventsDefinitions() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 17) === peg$c137) {
      s1 = peg$c137;
      peg$currPos += 17;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e143); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c23) {
          s5 = peg$c23;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQualifiedName();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s9 = peg$c4;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = [];
              s12 = peg$currPos;
              s13 = peg$parse_();
              s14 = peg$parseEventDef();
              if (s14 !== peg$FAILED) {
                s13 = [s13, s14];
                s12 = s13;
              } else {
                peg$currPos = s12;
                s12 = peg$FAILED;
              }
              if (s12 !== peg$FAILED) {
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$currPos;
                  s13 = peg$parse_();
                  s14 = peg$parseEventDef();
                  if (s14 !== peg$FAILED) {
                    s13 = [s13, s14];
                    s12 = s13;
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                }
              } else {
                s11 = peg$FAILED;
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 125) {
                  s13 = peg$c5;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e5); }
                }
                if (s13 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f225(s3, s7, s11);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEventDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c138) {
      s1 = peg$c138;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e144); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c11) {
        s3 = peg$c11;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.substr(peg$currPos, 3) === peg$c85) {
            s7 = peg$c85;
            peg$currPos += 3;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e85); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseQualifiedName();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 123) {
                s11 = peg$c4;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e4); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                s13 = [];
                s14 = peg$currPos;
                s15 = peg$parse_();
                s16 = peg$parseTriggerBlock();
                if (s16 !== peg$FAILED) {
                  s15 = [s15, s16];
                  s14 = s15;
                } else {
                  peg$currPos = s14;
                  s14 = peg$FAILED;
                }
                if (s14 !== peg$FAILED) {
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$currPos;
                    s15 = peg$parse_();
                    s16 = peg$parseTriggerBlock();
                    if (s16 !== peg$FAILED) {
                      s15 = [s15, s16];
                      s14 = s15;
                    } else {
                      peg$currPos = s14;
                      s14 = peg$FAILED;
                    }
                  }
                } else {
                  s13 = peg$FAILED;
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s15 = peg$c5;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e5); }
                  }
                  if (s15 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f226(s5, s9, s13);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTriggerBlock() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c139) {
      s1 = peg$c139;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e145); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseConditionBlock();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parse_();
        if (input.substr(peg$currPos, 4) === peg$c140) {
          s7 = peg$c140;
          peg$currPos += 4;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e146); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$parseActionBlock();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f227(s3, s9);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parse_();
            if (input.substr(peg$currPos, 4) === peg$c140) {
              s7 = peg$c140;
              peg$currPos += 4;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e146); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseActionBlock();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s5;
                s5 = peg$f227(s3, s9);
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f228(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConditionBlock() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseQualifiedName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c114) {
        s4 = peg$c114;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e115); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseQualifiedName();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f229(s1, s6);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f230(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConditionStmt() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseConditionBlock();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s4 = peg$c1;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f231(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseActionBlock() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s3 = peg$c4;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parse_();
        s8 = peg$parseAssignment();
        if (s8 === peg$FAILED) {
          s8 = peg$parseInvocation();
        }
        if (s8 !== peg$FAILED) {
          peg$savedPos = s6;
          s6 = peg$f232(s1, s8);
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parse_();
          s8 = peg$parseAssignment();
          if (s8 === peg$FAILED) {
            s8 = peg$parseInvocation();
          }
          if (s8 !== peg$FAILED) {
            peg$savedPos = s6;
            s6 = peg$f232(s1, s8);
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s7 = peg$c5;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f233(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAssignment() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseQualifiedName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c7;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s7 = peg$c1;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f234(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInvocation() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 58) {
      s1 = peg$c14;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseQualifiedName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s5 = peg$c12;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQualifiedNameList();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s9 = peg$c13;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s11 = peg$c1;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s11 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f235(s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSceneDefinitions() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 16) === peg$c141) {
      s1 = peg$c141;
      peg$currPos += 16;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e147); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c23) {
          s5 = peg$c23;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQualifiedName();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s9 = peg$c4;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = [];
              s12 = peg$currPos;
              s13 = peg$parse_();
              s14 = peg$parseSceneDef();
              if (s14 !== peg$FAILED) {
                peg$savedPos = s12;
                s12 = peg$f236(s3, s7, s14);
              } else {
                peg$currPos = s12;
                s12 = peg$FAILED;
              }
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$currPos;
                s13 = peg$parse_();
                s14 = peg$parseSceneDef();
                if (s14 !== peg$FAILED) {
                  peg$savedPos = s12;
                  s12 = peg$f236(s3, s7, s14);
                } else {
                  peg$currPos = s12;
                  s12 = peg$FAILED;
                }
              }
              s12 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 125) {
                s13 = peg$c5;
                peg$currPos++;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e5); }
              }
              if (s13 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f237(s3, s7, s11);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSceneDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43, s44;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c142) {
      s1 = peg$c142;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e148); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c11) {
        s3 = peg$c11;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.substr(peg$currPos, 2) === peg$c143) {
            s7 = peg$c143;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e149); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s9 = peg$c4;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$parse_();
              if (input.substr(peg$currPos, 13) === peg$c59) {
                s12 = peg$c59;
                peg$currPos += 13;
              } else {
                s12 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e59); }
              }
              if (s12 !== peg$FAILED) {
                s13 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 123) {
                  s14 = peg$c4;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e4); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = peg$parse_();
                  s16 = [];
                  s17 = peg$parseConditionStmt();
                  while (s17 !== peg$FAILED) {
                    s16.push(s17);
                    s17 = peg$parseConditionStmt();
                  }
                  s17 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s18 = peg$c5;
                    peg$currPos++;
                  } else {
                    s18 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e5); }
                  }
                  if (s18 !== peg$FAILED) {
                    s19 = peg$parse_();
                    s20 = peg$parse_();
                    if (input.substr(peg$currPos, 5) === peg$c144) {
                      s21 = peg$c144;
                      peg$currPos += 5;
                    } else {
                      s21 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e150); }
                    }
                    if (s21 !== peg$FAILED) {
                      s22 = peg$parse_();
                      s23 = peg$parseQualifiedName();
                      if (s23 !== peg$FAILED) {
                        s24 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 59) {
                          s25 = peg$c1;
                          peg$currPos++;
                        } else {
                          s25 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e1); }
                        }
                        if (s25 === peg$FAILED) {
                          s25 = null;
                        }
                        s26 = peg$parse_();
                        s27 = peg$parse_();
                        if (input.substr(peg$currPos, 6) === peg$c145) {
                          s28 = peg$c145;
                          peg$currPos += 6;
                        } else {
                          s28 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e151); }
                        }
                        if (s28 !== peg$FAILED) {
                          s29 = peg$parse_();
                          s30 = peg$parseQualifiedName();
                          if (s30 !== peg$FAILED) {
                            s31 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 59) {
                              s32 = peg$c1;
                              peg$currPos++;
                            } else {
                              s32 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e1); }
                            }
                            if (s32 === peg$FAILED) {
                              s32 = null;
                            }
                            s33 = peg$parse_();
                            s34 = peg$parse_();
                            if (input.substr(peg$currPos, 14) === peg$c60) {
                              s35 = peg$c60;
                              peg$currPos += 14;
                            } else {
                              s35 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e60); }
                            }
                            if (s35 !== peg$FAILED) {
                              s36 = peg$parse_();
                              if (input.charCodeAt(peg$currPos) === 123) {
                                s37 = peg$c4;
                                peg$currPos++;
                              } else {
                                s37 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e4); }
                              }
                              if (s37 !== peg$FAILED) {
                                s38 = peg$parse_();
                                s39 = [];
                                s40 = peg$parseConditionStmt();
                                while (s40 !== peg$FAILED) {
                                  s39.push(s40);
                                  s40 = peg$parseConditionStmt();
                                }
                                s40 = peg$parse_();
                                if (input.charCodeAt(peg$currPos) === 125) {
                                  s41 = peg$c5;
                                  peg$currPos++;
                                } else {
                                  s41 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e5); }
                                }
                                if (s41 !== peg$FAILED) {
                                  s42 = peg$parse_();
                                  s43 = peg$parse_();
                                  if (input.charCodeAt(peg$currPos) === 125) {
                                    s44 = peg$c5;
                                    peg$currPos++;
                                  } else {
                                    s44 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e5); }
                                  }
                                  if (s44 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s0 = peg$f238(s5, s16, s23, s30, s39);
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseScenarioDefinitions() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 19) === peg$c146) {
      s1 = peg$c146;
      peg$currPos += 19;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e152); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c23) {
          s5 = peg$c23;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQualifiedName();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s9 = peg$c4;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = [];
              s12 = peg$currPos;
              s13 = peg$parse_();
              s14 = peg$parseScenarioDef();
              if (s14 !== peg$FAILED) {
                peg$savedPos = s12;
                s12 = peg$f239(s3, s7, s14);
              } else {
                peg$currPos = s12;
                s12 = peg$FAILED;
              }
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$currPos;
                s13 = peg$parse_();
                s14 = peg$parseScenarioDef();
                if (s14 !== peg$FAILED) {
                  peg$savedPos = s12;
                  s12 = peg$f239(s3, s7, s14);
                } else {
                  peg$currPos = s12;
                  s12 = peg$FAILED;
                }
              }
              s12 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 125) {
                s13 = peg$c5;
                peg$currPos++;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e5); }
              }
              if (s13 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f240(s3, s7, s11);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseScenarioDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c147) {
      s1 = peg$c147;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e153); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c11) {
        s3 = peg$c11;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 123) {
            s7 = peg$c4;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = [];
            s10 = peg$currPos;
            s11 = peg$parse_();
            s12 = peg$parseStatement();
            if (s12 === peg$FAILED) {
              s12 = peg$parseSceneRef();
            }
            if (s12 !== peg$FAILED) {
              peg$savedPos = s10;
              s10 = peg$f241(s5, s12);
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$currPos;
              s11 = peg$parse_();
              s12 = peg$parseStatement();
              if (s12 === peg$FAILED) {
                s12 = peg$parseSceneRef();
              }
              if (s12 !== peg$FAILED) {
                peg$savedPos = s10;
                s10 = peg$f241(s5, s12);
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
            }
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s11 = peg$c5;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s11 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f242(s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSceneRef() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseQualifiedName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f243(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseScenarioRef() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseQualifiedName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f244(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseScenarioExecution() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 17) === peg$c148) {
      s1 = peg$c148;
      peg$currPos += 17;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e154); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c23) {
        s3 = peg$c23;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQualifiedName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 123) {
            s7 = peg$c4;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = [];
            s10 = peg$currPos;
            s11 = peg$parse_();
            s12 = peg$parseAssignment();
            if (s12 === peg$FAILED) {
              s12 = peg$parseSceneRef();
              if (s12 === peg$FAILED) {
                s12 = peg$parseExecutionEntry();
                if (s12 === peg$FAILED) {
                  s12 = peg$parseEventInjection();
                  if (s12 === peg$FAILED) {
                    s12 = peg$parseEventInjectionBatch();
                  }
                }
              }
            }
            if (s12 !== peg$FAILED) {
              peg$savedPos = s10;
              s10 = peg$f245(s5, s12);
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$currPos;
              s11 = peg$parse_();
              s12 = peg$parseAssignment();
              if (s12 === peg$FAILED) {
                s12 = peg$parseSceneRef();
                if (s12 === peg$FAILED) {
                  s12 = peg$parseExecutionEntry();
                  if (s12 === peg$FAILED) {
                    s12 = peg$parseEventInjection();
                    if (s12 === peg$FAILED) {
                      s12 = peg$parseEventInjectionBatch();
                    }
                  }
                }
              }
              if (s12 !== peg$FAILED) {
                peg$savedPos = s10;
                s10 = peg$f245(s5, s12);
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
            }
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s11 = peg$c5;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s11 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f246(s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEventInjection() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c149) {
      s1 = peg$c149;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e155); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseQualifiedName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseEventTiming();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 59) {
          s7 = peg$c1;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f247(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEventInjectionBatch() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c150) {
      s1 = peg$c150;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e156); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 91) {
        s3 = peg$c96;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e97); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseEventNameList();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s7 = peg$c97;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e98); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.substr(peg$currPos, 8) === peg$c151) {
              s9 = peg$c151;
              peg$currPos += 8;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e157); }
            }
            if (s9 === peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c152) {
                s9 = peg$c152;
                peg$currPos += 10;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e158); }
              }
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s11 = peg$c1;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s11 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f248(s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEventNameList() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseQualifiedName();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c66;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e66); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseQualifiedName();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f249(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c66;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQualifiedName();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f249(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f250(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEventTiming() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c153) {
      s1 = peg$c153;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e159); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseINT();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c154) {
          s5 = peg$c154;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e160); }
        }
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 115) {
            s5 = peg$c155;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e161); }
          }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f251(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c156) {
        s1 = peg$c156;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e162); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseBooleanExpression();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f252(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c157) {
          s1 = peg$c157;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e163); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseQualifiedName();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f253(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c153) {
            s1 = peg$c153;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e159); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseQualifiedName();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f254(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseBooleanExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.charAt(peg$currPos);
      if (peg$r1.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e119); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c117) {
          s3 = peg$c117;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e118); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c116) {
            s3 = peg$c116;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e117); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c114) {
              s3 = peg$c114;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e115); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c115) {
                s3 = peg$c115;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e116); }
              }
            }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseID();
        if (s5 === peg$FAILED) {
          s5 = peg$parseINT();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f255(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExecutionEntry() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c158) {
      s2 = peg$c158;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e164); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseINT();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s1;
        s1 = peg$f256(s4);
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    s3 = peg$parseQualifiedName();
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s5 = peg$c1;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f257(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseQualifiedNameList() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseQualifiedName();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c66;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e66); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseQualifiedName();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f258(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c66;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseQualifiedName();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f258(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f259(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePinList() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsePin();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c66;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e66); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsePin();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f260(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c66;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsePin();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f260(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f261(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnumLiteralValueList() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseEnumLiteralValue();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c66;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e66); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseEnumLiteralValue();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f262(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c66;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseEnumLiteralValue();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f262(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f263(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConnectorBindingList() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseConnectorBinding();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c66;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e66); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseConnectorBinding();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f264(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c66;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseConnectorBinding();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f264(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f265(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseForVarList() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseForVar();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c66;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e66); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseForVar();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f266(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c66;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseForVar();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f266(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f267(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseQualifiedName() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c38;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseID();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f268(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c38;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e38); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseID();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f268(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f269(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEString() {
    let s0;

    s0 = peg$parseSTRING();
    if (s0 === peg$FAILED) {
      s0 = peg$parseID();
    }

    return s0;
  }

  function peg$parseID() {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r6.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e166); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r7.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e167); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r7.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e167); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f270();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e165); }
    }

    return s0;
  }

  function peg$parseINT() {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r8.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e169); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r8.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e169); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f271();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e168); }
    }

    return s0;
  }

  function peg$parseEInt() {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c159;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e171); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseINT();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f272(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e170); }
    }

    return s0;
  }

  function peg$parseSTRING() {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c160;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e173); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s4 = peg$c161;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e174); }
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = input.charAt(peg$currPos);
        if (peg$r9.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e176); }
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s4 = peg$c161;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e174); }
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e175); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = input.charAt(peg$currPos);
          if (peg$r9.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e176); }
          }
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c160;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e173); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f273(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c162;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e177); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s4 = peg$c161;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e174); }
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e175); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = input.charAt(peg$currPos);
          if (peg$r10.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e178); }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s4 = peg$c161;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e174); }
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e175); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = input.charAt(peg$currPos);
            if (peg$r10.test(s3)) {
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e178); }
            }
          }
        }
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c162;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e177); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f274(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e172); }
    }

    return s0;
  }

  function peg$parseEBoolean() {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c163) {
      s1 = peg$c163;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e180); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c164) {
        s1 = peg$c164;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e181); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f275(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e179); }
    }

    return s0;
  }

  function peg$parse_() {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r11.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e182); }
    }
    if (s1 === peg$FAILED) {
      s1 = peg$parseSingleLineComment();
      if (s1 === peg$FAILED) {
        s1 = peg$parseMultiLineComment();
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r11.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e182); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parseSingleLineComment();
        if (s1 === peg$FAILED) {
          s1 = peg$parseMultiLineComment();
        }
      }
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseSingleLineComment() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c165) {
      s1 = peg$c165;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e183); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r12.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e184); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r12.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e184); }
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMultiLineComment() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c166) {
      s1 = peg$c166;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e185); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c167) {
        s5 = peg$c167;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e186); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c167) {
          s5 = peg$c167;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e186); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e175); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (input.substr(peg$currPos, 2) === peg$c167) {
        s3 = peg$c167;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e186); }
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


    // Bloco de inicialização do Peggy.js (se necessário)
  
  peg$result = peg$startRuleFunction();

  const peg$success = (peg$result !== peg$FAILED && peg$currPos === input.length);
  function peg$throw() {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? peg$getUnicode(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos,
      peg$success,
      peg$throw: peg$success ? undefined : peg$throw,
    });
  }
  if (peg$success) {
    return peg$result;
  } else {
    peg$throw();
  }
}

const peg$allowedStartRules = [
  "start"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
