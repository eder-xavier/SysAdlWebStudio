// Teste para validar funcionalidade do c√≥digo gerado com generateEnvironmentModule
console.log('üîÑ Iniciando teste de funcionalidade do c√≥digo gerado...');

try {
  // Importar o m√≥dulo gerado
  const { createEnvironmentModel } = require('./generated/AGV-completo-teste.js');
  console.log('‚úÖ Importa√ß√£o do m√≥dulo bem-sucedida');

  // Testar fun√ß√£o factory
  const model = createEnvironmentModel({ test: true });
  console.log('‚úÖ Fun√ß√£o createEnvironmentModel executada com sucesso');

  // Verificar estrutura do modelo
  const expectedProperties = ['environments', 'events', 'scenes', 'scenarios', 'scenarioExecutions', 'config'];
  const modelProperties = Object.keys(model);
  
  console.log('üìã Propriedades do modelo:', modelProperties);
  
  let allPropertiesPresent = true;
  for (const prop of expectedProperties) {
    if (!modelProperties.includes(prop)) {
      console.log(`‚ùå Propriedade '${prop}' est√° ausente`);
      allPropertiesPresent = false;
    } else {
      console.log(`‚úÖ Propriedade '${prop}' encontrada`);
    }
  }
  
  if (allPropertiesPresent) {
    console.log('‚úÖ Todas as propriedades esperadas est√£o presentes');
  }
  
  // Verificar configura√ß√£o
  if (model.config && model.config.test === true) {
    console.log('‚úÖ Configura√ß√£o personalizada aplicada corretamente');
  }

  console.log('üéâ Teste conclu√≠do com sucesso! O c√≥digo gerado funciona corretamente.');
  
} catch (error) {
  console.log(`‚ùå Teste falhou: ${error.message}`);
  console.error(error);
  process.exit(1);
}