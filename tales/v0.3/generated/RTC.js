// Generated by SysADL Transformer v0.3 - Enhanced Architecture
// Features: Simplified activity keys, explicit references, lazy loading

const { Model, Component, Port, SimplePort, CompositePort, Connector, Activity, Action, Enum, Int, Boolean, String, Real, Void, valueType, dataType, dimension, unit, Constraint, Executable } = require('../SysADLBase');

// Types
const DM_types_Temperature = dimension('Temperature');
const UN_types_Celsius = unit('Celsius');
const UN_types_Fahrenheit = unit('Fahrenheit');
const VT_types_temperature = valueType('temperature', { extends: Real, dimension: DM_types_Temperature });
const VT_types_FahrenheitTemperature = valueType('FahrenheitTemperature', { extends: VT_types_temperature, unit: UN_types_Fahrenheit, dimension: DM_types_Temperature });
const VT_types_CelsiusTemperature = valueType('CelsiusTemperature', { extends: VT_types_temperature, unit: UN_types_Celsius, dimension: DM_types_Temperature });
const EN_types_Command = new Enum("On", "Off");
const DT_types_Commands = dataType('Commands', { heater: EN_types_Command, cooler: EN_types_Command });

// Ports
class PT_Ports_FTemperatureOPT extends SimplePort {
  constructor(name, opts = {}) {
    super(name, "out", { ...{ expectedType: "FahrenheitTemperature" }, ...opts });
  }
}
class PT_Ports_PresenceIPT extends SimplePort {
  constructor(name, opts = {}) {
    super(name, "in", { ...{ expectedType: "Boolean" }, ...opts });
  }
}
class PT_Ports_PresenceOPT extends SimplePort {
  constructor(name, opts = {}) {
    super(name, "out", { ...{ expectedType: "Boolean" }, ...opts });
  }
}
class PT_Ports_CTemperatureIPT extends SimplePort {
  constructor(name, opts = {}) {
    super(name, "in", { ...{ expectedType: "CelsiusTemperature" }, ...opts });
  }
}
class PT_Ports_CommandIPT extends SimplePort {
  constructor(name, opts = {}) {
    super(name, "in", { ...{ expectedType: "Command" }, ...opts });
  }
}
class PT_Ports_CommandOPT extends SimplePort {
  constructor(name, opts = {}) {
    super(name, "out", { ...{ expectedType: "Command" }, ...opts });
  }
}
class PT_Ports_CTemperatureOPT extends SimplePort {
  constructor(name, opts = {}) {
    super(name, "out", { ...{ expectedType: "CelsiusTemperature" }, ...opts });
  }
}

// Connectors
class CN_Connectors_FahrenheitToCelsiusCN extends Connector {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      activityName: "FahrenheitToCelsiusAC",
      participantSchema: {
        Ft: {
          portClass: 'PT_Ports_FTemperatureOPT',
          direction: 'out',
          dataType: 'FahrenheitTemperature',
          role: 'source'
        },
        Ct: {
          portClass: 'PT_Ports_CTemperatureIPT',
          direction: 'out',
          dataType: 'FahrenheitTemperature',
          role: 'target'
        }
      },
      flowSchema: [
        {
          from: 'Ft',
          to: 'Ct',
          dataType: 'FahrenheitTemperature'
        }
      ]
    });
  }
}
class CN_Connectors_PresenceCN extends Connector {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      participantSchema: {
        pOut: {
          portClass: 'PT_Ports_PresenceOPT',
          direction: 'out',
          dataType: 'Boolean',
          role: 'source'
        },
        pIn: {
          portClass: 'PT_Ports_PresenceIPT',
          direction: 'out',
          dataType: 'Boolean',
          role: 'target'
        }
      },
      flowSchema: [
        {
          from: 'pOut',
          to: 'pIn',
          dataType: 'Boolean'
        }
      ]
    });
  }
}
class CN_Connectors_CommandCN extends Connector {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      participantSchema: {
        commandOut: {
          portClass: 'PT_Ports_CommandOPT',
          direction: 'out',
          dataType: 'Command',
          role: 'source'
        },
        commandIn: {
          portClass: 'PT_Ports_CommandIPT',
          direction: 'out',
          dataType: 'Command',
          role: 'target'
        }
      },
      flowSchema: [
        {
          from: 'commandOut',
          to: 'commandIn',
          dataType: 'Command'
        }
      ]
    });
  }
}
class CN_Connectors_CTemperatureCN extends Connector {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      participantSchema: {
        CtOut: {
          portClass: 'PT_Ports_CTemperatureOPT',
          direction: 'out',
          dataType: 'CelsiusTemperature',
          role: 'source'
        },
        ctIn: {
          portClass: 'PT_Ports_CTemperatureIPT',
          direction: 'out',
          dataType: 'CelsiusTemperature',
          role: 'target'
        }
      },
      flowSchema: [
        {
          from: 'CtOut',
          to: 'ctIn',
          dataType: 'CelsiusTemperature'
        }
      ]
    });
  }
}

// Components
class CP_Components_TemperatureSensorCP extends Component {
  constructor(name, opts={}) {
      super(name, { ...opts, isBoundary: true });
      // Add ports from component definition
      this.addPort(new PT_Ports_FTemperatureOPT("current", "out", { owner: name }));
    }
}
class CP_Components_PresenceSensorCP extends Component {
  constructor(name, opts={}) {
      super(name, { ...opts, isBoundary: true });
      // Add ports from component definition
      this.addPort(new PT_Ports_PresenceOPT("detected", "out", { owner: name }));
    }
}
class CP_Components_UserInterfaceCP extends Component {
  constructor(name, opts={}) {
      super(name, { ...opts, isBoundary: true });
      // Add ports from component definition
      this.addPort(new PT_Ports_CTemperatureOPT("desired", "out", { owner: name }));
    }
}
class CP_Components_CoolerCP extends Component {
  constructor(name, opts={}) {
      super(name, { ...opts, isBoundary: true });
      // Add ports from component definition
      this.addPort(new PT_Ports_CommandIPT("controllerC", "in", { owner: name }));
    }
}
class CP_Components_HeaterCP extends Component {
  constructor(name, opts={}) {
      super(name, { ...opts, isBoundary: true });
      // Add ports from component definition
      this.addPort(new PT_Ports_CommandIPT("controllerH", "in", { owner: name }));
    }
}
class CP_Components_RoomTemperatureControllerCP extends Component {
  constructor(name, opts={}) {
      super(name, opts);
      // Add ports from component definition
      this.addPort(new PT_Ports_PresenceIPT("detectedRTC", "in", { owner: name }));
      this.addPort(new PT_Ports_CTemperatureIPT("localtemp1", "in", { owner: name }));
      this.addPort(new PT_Ports_CTemperatureIPT("localTemp2", "in", { owner: name }));
      this.addPort(new PT_Ports_CTemperatureIPT("userTempRTC", "in", { owner: name }));
      this.addPort(new PT_Ports_CommandOPT("heatingRTC", "out", { owner: name }));
      this.addPort(new PT_Ports_CommandOPT("coolingRTC", "out", { owner: name }));
    }
}
class CP_Components_SensorsMonitorCP extends Component {
  constructor(name, opts={}) {
      super(name, { ...opts, activityName: "CalculateAverageTemperatureAC" });
      // Add ports from component definition
      this.addPort(new PT_Ports_CTemperatureIPT("s1", "in", { owner: name }));
      this.addPort(new PT_Ports_CTemperatureIPT("s2", "in", { owner: name }));
      this.addPort(new PT_Ports_CTemperatureOPT("average", "out", { owner: name }));
    }
}
class CP_Components_CommanderCP extends Component {
  constructor(name, opts={}) {
      super(name, { ...opts, activityName: "DecideCommandAC" });
      // Add ports from component definition
      this.addPort(new PT_Ports_CTemperatureIPT("target2", "in", { owner: name }));
      this.addPort(new PT_Ports_CTemperatureIPT("average2", "in", { owner: name }));
      this.addPort(new PT_Ports_CommandOPT("heating", "out", { owner: name }));
      this.addPort(new PT_Ports_CommandOPT("cooling", "out", { owner: name }));
    }
}
class CP_Components_PresenceCheckerCP extends Component {
  constructor(name, opts={}) {
      super(name, { ...opts, activityName: "CheckPresenceToSetTemperatureAC" });
      // Add ports from component definition
      this.addPort(new PT_Ports_PresenceIPT("detected", "in", { owner: name }));
      this.addPort(new PT_Ports_CTemperatureIPT("userTemp", "in", { owner: name }));
      this.addPort(new PT_Ports_CTemperatureOPT("target", "out", { owner: name }));
    }
}
class CP_Components_RTCSystemCFD extends Component { }

// ===== Behavioral Element Classes =====
// Activity class: CalculateAverageTemperatureAC
class AC_Components_CalculateAverageTemperatureAC extends Activity {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [{"name":"s1","type":"Pin","direction":"in"},{"name":"s2","type":"Pin","direction":"in"},{"name":"average","type":"Pin","direction":"in"}],
      outParameters: []
    });
  }
}

// Activity class: CheckPresenceToSetTemperatureAC
class AC_Components_CheckPresenceToSetTemperatureAC extends Activity {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [{"name":"detected","type":"Pin","direction":"in"},{"name":"userTemp","type":"Pin","direction":"in"},{"name":"target","type":"Pin","direction":"in"}],
      outParameters: []
    });
  }
}

// Activity class: DecideCommandAC
class AC_Components_DecideCommandAC extends Activity {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [{"name":"average2","type":"Pin","direction":"in"},{"name":"target2","type":"Pin","direction":"in"},{"name":"cooling","type":"Pin","direction":"in"},{"name":"heating","type":"Pin","direction":"in"}],
      outParameters: []
    });
  }
}

// Activity class: FahrenheitToCelsiusAC
class AC_Components_FahrenheitToCelsiusAC extends Activity {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [{"name":"current1","type":"Pin","direction":"in"},{"name":"loalTemp1","type":"Pin","direction":"in"}],
      outParameters: []
    });
  }
}

// Action class: CalculateAverageTemperatureAN
class AN_Components_CalculateAverageTemperatureAN extends Action {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [{"name":"t1","type":"Pin","direction":"in"},{"name":"t2","type":"Pin","direction":"in"}],
      outParameters: [],
    });
  }
}

// Action class: CompareTemperatureAN
class AN_Components_CompareTemperatureAN extends Action {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [{"name":"average2","type":"Pin","direction":"in"},{"name":"target2","type":"Pin","direction":"in"}],
      outParameters: [],
    });
  }
}

// Action class: CommandHeaterAN
class AN_Components_CommandHeaterAN extends Action {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [{"name":"cmds","type":"Pin","direction":"in"}],
      outParameters: [],
    });
  }
}

// Action class: CommandCoolerAN
class AN_Components_CommandCoolerAN extends Action {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [{"name":"cmds","type":"Pin","direction":"in"}],
      outParameters: [],
    });
  }
}

// Action class: FahrenheitToCelsiusAN
class AN_Components_FahrenheitToCelsiusAN extends Action {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [{"name":"current1","type":"Pin","direction":"in"}],
      outParameters: [],
    });
  }
}

// Action class: CheckPeresenceToSetTemperatureAN
class AN_Components_CheckPeresenceToSetTemperatureAN extends Action {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [{"name":"detected","type":"Pin","direction":"in"},{"name":"userTemp","type":"Pin","direction":"in"}],
      outParameters: [],
    });
  }
}

// Constraint class: CalculateAverageTemperatureEQ
class CT_Components_CalculateAverageTemperatureEQ extends Constraint {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [],
      outParameters: [],
      equation: "(av == ((t1 + t2) / 2))",
      constraintFunction: function(params) {// Constraint equation: (av == ((t1 + t2) / 2))
          const { t1, t2 } = params;
          
          // Type validation
          if (typeof t1 !== 'number') throw new Error('Parameter t1 must be a Real (number)');
          if (typeof t2 !== 'number') throw new Error('Parameter t2 must be a Real (number)');
          return av == ((t1 + t2) / 2);
        }
    });
  }
}

// Constraint class: CompareTemperatureEQ
class CT_Components_CompareTemperatureEQ extends Constraint {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [],
      outParameters: [],
      equation: "((average > target) ? ((cmds == types.Commands.heater.Off) && types.Commands.cooler.On) : (types.Commands.heater.On && (cmds == types.Commands.cooler.Off)))",
      constraintFunction: function(params) {// Conditional constraint: ((average > target) ? ((cmds == types.Commands.heater.Off) && types.Commands.cooler.On) : (types.Commands.heater.On && (cmds == types.Commands.cooler.Off)))
          const { average, target, cmds, heater, cooler } = params;
          
          // Type validation
          if (typeof average !== 'number') throw new Error('Parameter average must be a Real (number)');
          if (typeof target !== 'number') throw new Error('Parameter target must be a Real (number)');
          if (typeof cmds !== 'number') throw new Error('Parameter cmds must be a Real (number)');
          if (typeof heater !== 'number') throw new Error('Parameter heater must be a Real (number)');
          if (typeof cooler !== 'number') throw new Error('Parameter cooler must be a Real (number)');
          return (average > target) ? ((cmds == types.Commands.heater.Off) && types.Commands.cooler.On) : (types.Commands.heater.On && (cmds == types.Commands.cooler.Off));
        }
    });
  }
}

// Constraint class: FahrenheitToCelsiusEQ
class CT_Components_FahrenheitToCelsiusEQ extends Constraint {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [],
      outParameters: [],
      equation: "(c == ((5 * (f - 32)) / 9))",
      constraintFunction: function(params) {// Constraint equation: (c == ((5 * (f - 32)) / 9))
          const { f } = params;
          
          // Type validation
          if (typeof f !== 'number') throw new Error('Parameter f must be a Real (number)');
          return c == ((5 * (f - 32)) / 9);
        }
    });
  }
}

// Constraint class: CommandHeaterEQ
class CT_Components_CommandHeaterEQ extends Constraint {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [],
      outParameters: [],
      equation: "(c == cmds.heater)",
      constraintFunction: function(params) {// Constraint equation: (c == cmds.heater)
          const { cmds, heater } = params;
          
          // Type validation
          if (typeof cmds !== 'number') throw new Error('Parameter cmds must be a Real (number)');
          if (typeof heater !== 'number') throw new Error('Parameter heater must be a Real (number)');
          return c == cmds.heater;
        }
    });
  }
}

// Constraint class: CommandCoolerEQ
class CT_Components_CommandCoolerEQ extends Constraint {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [],
      outParameters: [],
      equation: "(c == cmds.cooler)",
      constraintFunction: function(params) {// Constraint equation: (c == cmds.cooler)
          const { cmds, cooler } = params;
          
          // Type validation
          if (typeof cmds !== 'number') throw new Error('Parameter cmds must be a Real (number)');
          if (typeof cooler !== 'number') throw new Error('Parameter cooler must be a Real (number)');
          return c == cmds.cooler;
        }
    });
  }
}

// Constraint class: CheckPresenceToSetTemperatureEQ
class CT_Components_CheckPresenceToSetTemperatureEQ extends Constraint {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [],
      outParameters: [],
      equation: "((detected == true) ? (target == userTemp) : (target == 2))",
      constraintFunction: function(params) {// Conditional constraint: ((detected == true) ? (target == userTemp) : (target == 2))
          const { detected, target, userTemp } = params;
          
          // Type validation
          if (typeof detected !== 'number') throw new Error('Parameter detected must be a Real (number)');
          if (typeof target !== 'number') throw new Error('Parameter target must be a Real (number)');
          if (typeof userTemp !== 'number') throw new Error('Parameter userTemp must be a Real (number)');
          return (detected == true) ? (target == userTemp) : (target == 2);
        }
    });
  }
}

// Executable class: CommandCoolerEx
class EX_Components_CommandCoolerEx extends Executable {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [],
      body: "executable def CommandCoolerEx(in cmds:Commands): out Command{return cmds->cooler ; }",
      executableFunction: function(params) {
          // Type validation
          // Type validation for cmds: (auto-detected from usage)
          const { cmds } = params;
          return cmds.cooler;
        }
    });
  }
}

// Executable class: CommandHeaterEx
class EX_Components_CommandHeaterEx extends Executable {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [],
      body: "executable def CommandHeaterEx(in cmds:Commands): out Command{return cmds->heater ; }",
      executableFunction: function(params) {
          // Type validation
          // Type validation for cmds: (auto-detected from usage)
          const { cmds } = params;
          return cmds.heater;
        }
    });
  }
}

// Executable class: FahrenheitToCelsiusEx
class EX_Components_FahrenheitToCelsiusEx extends Executable {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [],
      body: "executable def FahrenheitToCelsiusEx(in f:FahrenheitTemperature): out CelsiusTemperature{return 5*(f - 32)/9 ; }",
      executableFunction: function(params) {
          // Type validation
          // Type validation for f: (auto-detected from usage)
          const { f } = params;
          return 5*(f - 32)/9;
        }
    });
  }
}

// Executable class: CalculateAverageTemperatureEx
class EX_Components_CalculateAverageTemperatureEx extends Executable {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [],
      body: "executable def CalculateAverageTemperatureEx(in temp1:CelsiusTemperature,in temp2:CelsiusTemperature):out CelsiusTemperature{return (temp1 + temp2)/2 ; }",
      executableFunction: function(params) {
          // Type validation
          // Type validation for temp1: (auto-detected from usage)
          // Type validation for temp2: (auto-detected from usage)
          const { temp1, temp2 } = params;
          return (temp1 + temp2)/2;
        }
    });
  }
}

// Executable class: CheckPresenceToSetTemperature
class EX_Components_CheckPresenceToSetTemperature extends Executable {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [],
      body: "executable def CheckPresenceToSetTemperature(in presence:Boolean, in userTemp:CelsiusTemperature):out CelsiusTemperature{if(presence == true) return userTemp; else return 2; }",
      executableFunction: function(params) {
          // Type validation
          // Type validation for presence: (auto-detected from usage)
          // Type validation for userTemp: (auto-detected from usage)
          const { presence, userTemp } = params;
          if(presence == true) return userTemp; else return 2;
        }
    });
  }
}

// Executable class: CompareTemperatureEx
class EX_Components_CompareTemperatureEx extends Executable {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [],
      body: "executable def CompareTemperatureEx(in target:CelsiusTemperature, in average:CelsiusTemperature):out Commands{let heater:Command = types.Command::Off; let cooler:Command = types.Command::Off; if(average > target) {heater = types.Command::Off; cooler = types.Command::On ; } else {heater = types.Command::On; cooler = types.Command::Off ;} }",
      executableFunction: function(params) {
          // Type validation
          // Type validation for target: (auto-detected from usage)
          // Type validation for average: (auto-detected from usage)
          const { target, average } = params;
          let heater = types.Command.Off; let cooler = types.Command.Off; if(average > target) {heater = types.Command.Off; cooler = types.Command.On ; } else {heater = types.Command.On; cooler = types.Command.Off ;}
        }
    });
  }
}

// ===== End Behavioral Element Classes =====

class SysADLModel extends Model {
  constructor(){
    super("SysADLModel");
    this.RTCSystemCFD = new CP_Components_RTCSystemCFD("RTCSystemCFD", { sysadlDefinition: "RTCSystemCFD" });
    this.addComponent(this.RTCSystemCFD);
    this.RTCSystemCFD.a1 = new CP_Components_HeaterCP("a1", { isBoundary: true, sysadlDefinition: "HeaterCP" });
    this.RTCSystemCFD.addComponent(this.RTCSystemCFD.a1);
    this.RTCSystemCFD.a2 = new CP_Components_CoolerCP("a2", { isBoundary: true, sysadlDefinition: "CoolerCP" });
    this.RTCSystemCFD.addComponent(this.RTCSystemCFD.a2);
    this.RTCSystemCFD.rtc = new CP_Components_RoomTemperatureControllerCP("rtc", { sysadlDefinition: "RoomTemperatureControllerCP" });
    this.RTCSystemCFD.addComponent(this.RTCSystemCFD.rtc);
    this.RTCSystemCFD.s1 = new CP_Components_TemperatureSensorCP("s1", { isBoundary: true, sysadlDefinition: "TemperatureSensorCP" });
    this.RTCSystemCFD.addComponent(this.RTCSystemCFD.s1);
    this.RTCSystemCFD.s2 = new CP_Components_TemperatureSensorCP("s2", { isBoundary: true, sysadlDefinition: "TemperatureSensorCP" });
    this.RTCSystemCFD.addComponent(this.RTCSystemCFD.s2);
    this.RTCSystemCFD.s3 = new CP_Components_PresenceSensorCP("s3", { isBoundary: true, sysadlDefinition: "PresenceSensorCP" });
    this.RTCSystemCFD.addComponent(this.RTCSystemCFD.s3);
    this.RTCSystemCFD.ui = new CP_Components_UserInterfaceCP("ui", { isBoundary: true, sysadlDefinition: "UserInterfaceCP" });
    this.RTCSystemCFD.addComponent(this.RTCSystemCFD.ui);
    this.RTCSystemCFD.rtc.cm = new CP_Components_CommanderCP("cm", { sysadlDefinition: "CommanderCP" });
    this.RTCSystemCFD.rtc.addComponent(this.RTCSystemCFD.rtc.cm);
    this.RTCSystemCFD.rtc.pc = new CP_Components_PresenceCheckerCP("pc", { sysadlDefinition: "PresenceCheckerCP" });
    this.RTCSystemCFD.rtc.addComponent(this.RTCSystemCFD.rtc.pc);
    this.RTCSystemCFD.rtc.sm = new CP_Components_SensorsMonitorCP("sm", { sysadlDefinition: "SensorsMonitorCP" });
    this.RTCSystemCFD.rtc.addComponent(this.RTCSystemCFD.rtc.sm);

    this.RTCSystemCFD.rtc.addConnector(new CN_Connectors_CTemperatureCN("target"));
    const target = this.RTCSystemCFD.rtc.connectors["target"];
    target.bind(this.RTCSystemCFD.rtc.pc.getPort("target"), this.RTCSystemCFD.rtc.cm.getPort("target2"));
    this.RTCSystemCFD.rtc.addConnector(new CN_Connectors_CTemperatureCN("average"));
    const average = this.RTCSystemCFD.rtc.connectors["average"];
    average.bind(this.RTCSystemCFD.rtc.sm.getPort("average"), this.RTCSystemCFD.rtc.cm.getPort("average2"));
    this.RTCSystemCFD.addConnector(new CN_Connectors_FahrenheitToCelsiusCN("c1"));
    const c1 = this.RTCSystemCFD.connectors["c1"];
    c1.bind(this.getPort("current1"), this.RTCSystemCFD.rtc.getPort("localtemp1"));
    this.RTCSystemCFD.addConnector(new CN_Connectors_CTemperatureCN("uc"));
    const uc = this.RTCSystemCFD.connectors["uc"];
    uc.bind(this.RTCSystemCFD.ui.getPort("desired"), this.RTCSystemCFD.rtc.pc.getPort("userTemp"));
    this.RTCSystemCFD.addConnector(new CN_Connectors_CommandCN("cc2"));
    const cc2 = this.RTCSystemCFD.connectors["cc2"];
    cc2.bind(this.RTCSystemCFD.rtc.cm.getPort("cooling"), this.RTCSystemCFD.a2.getPort("controllerC"));
    this.RTCSystemCFD.addConnector(new CN_Connectors_PresenceCN("pc"));
    const pc = this.RTCSystemCFD.connectors["pc"];
    pc.bind(this.getPort("detectedS"), this.RTCSystemCFD.s3.getPort("detected"));
    this.RTCSystemCFD.addConnector(new CN_Connectors_FahrenheitToCelsiusCN("c2"));
    const c2 = this.RTCSystemCFD.connectors["c2"];
    c2.bind(this.getPort("current2"), this.RTCSystemCFD.rtc.getPort("localTemp2"));
    this.RTCSystemCFD.addConnector(new CN_Connectors_CommandCN("cc1"));
    const cc1 = this.RTCSystemCFD.connectors["cc1"];
    cc1.bind(this.RTCSystemCFD.rtc.cm.getPort("heating"), this.RTCSystemCFD.a1.getPort("controllerH"));

    const act_CalculateAverageTemperatureAC_SensorsMonitorCP = new AC_Components_CalculateAverageTemperatureAC("CalculateAverageTemperatureAC", { component: "SensorsMonitorCP", inputPorts: [], delegates: [{"from":"s1","to":"s1"},{"from":"s2","to":"s2"},{"from":"average","to":"CalcAvTemp"}] });
    const action_CalculateAverageTemperatureAN_CalculateAverageTemperatureAC_SensorsMonitorCP = new AN_Components_CalculateAverageTemperatureAN("CalculateAverageTemperatureAN", { delegates: [] });
    const constraint_CalculateAverageTemperatureEQ_CalculateAverageTemperatureAC_SensorsMonitorCP = new CT_Components_CalculateAverageTemperatureEQ("CalculateAverageTemperatureEQ");
    action_CalculateAverageTemperatureAN_CalculateAverageTemperatureAC_SensorsMonitorCP.registerConstraint(constraint_CalculateAverageTemperatureEQ_CalculateAverageTemperatureAC_SensorsMonitorCP);
    const exec_CalculateAverageTemperatureEx_CalculateAverageTemperatureAC_SensorsMonitorCP = new EX_Components_CalculateAverageTemperatureEx("CalculateAverageTemperatureEx");
    action_CalculateAverageTemperatureAN_CalculateAverageTemperatureAC_SensorsMonitorCP.registerExecutable(exec_CalculateAverageTemperatureEx_CalculateAverageTemperatureAC_SensorsMonitorCP);
    act_CalculateAverageTemperatureAC_SensorsMonitorCP.registerAction(action_CalculateAverageTemperatureAN_CalculateAverageTemperatureAC_SensorsMonitorCP);
    this.registerActivity("CalculateAverageTemperatureAC", act_CalculateAverageTemperatureAC_SensorsMonitorCP);
    const act_CheckPresenceToSetTemperatureAC_PresenceCheckerCP = new AC_Components_CheckPresenceToSetTemperatureAC("CheckPresenceToSetTemperatureAC", { component: "PresenceCheckerCP", inputPorts: [], delegates: [{"from":"detected","to":"detected"},{"from":"userTemp","to":"userTemp"},{"from":"target","to":"CheckPeresenceToSetTemperatureAN"}] });
    const action_CheckPeresenceToSetTemperatureAN_CheckPresenceToSetTemperatureAC_PresenceCheckerCP = new AN_Components_CheckPeresenceToSetTemperatureAN("CheckPeresenceToSetTemperatureAN", { delegates: [] });
    const constraint_CheckPresenceToSetTemperatureEQ_CheckPresenceToSetTemperatureAC_PresenceCheckerCP = new CT_Components_CheckPresenceToSetTemperatureEQ("CheckPresenceToSetTemperatureEQ");
    action_CheckPeresenceToSetTemperatureAN_CheckPresenceToSetTemperatureAC_PresenceCheckerCP.registerConstraint(constraint_CheckPresenceToSetTemperatureEQ_CheckPresenceToSetTemperatureAC_PresenceCheckerCP);
    const exec_CheckPresenceToSetTemperature_CheckPresenceToSetTemperatureAC_PresenceCheckerCP = new EX_Components_CheckPresenceToSetTemperature("CheckPresenceToSetTemperature");
    action_CheckPeresenceToSetTemperatureAN_CheckPresenceToSetTemperatureAC_PresenceCheckerCP.registerExecutable(exec_CheckPresenceToSetTemperature_CheckPresenceToSetTemperatureAC_PresenceCheckerCP);
    act_CheckPresenceToSetTemperatureAC_PresenceCheckerCP.registerAction(action_CheckPeresenceToSetTemperatureAN_CheckPresenceToSetTemperatureAC_PresenceCheckerCP);
    this.registerActivity("CheckPresenceToSetTemperatureAC", act_CheckPresenceToSetTemperatureAC_PresenceCheckerCP);
    const act_DecideCommandAC_CommanderCP = new AC_Components_DecideCommandAC("DecideCommandAC", { component: "CommanderCP", inputPorts: [], delegates: [{"from":"average2","to":"average2"},{"from":"target2","to":"target2"},{"from":"heating","to":"cmdH"},{"from":"cooling","to":"cmdC"}] });
    const action_CommandCoolerAN_DecideCommandAC_CommanderCP = new AN_Components_CommandCoolerAN("CommandCoolerAN", { delegates: [] });
    const constraint_CommandCoolerEQ_DecideCommandAC_CommanderCP = new CT_Components_CommandCoolerEQ("CommandCoolerEQ");
    action_CommandCoolerAN_DecideCommandAC_CommanderCP.registerConstraint(constraint_CommandCoolerEQ_DecideCommandAC_CommanderCP);
    const exec_CommandCoolerEx_DecideCommandAC_CommanderCP = new EX_Components_CommandCoolerEx("CommandCoolerEx");
    action_CommandCoolerAN_DecideCommandAC_CommanderCP.registerExecutable(exec_CommandCoolerEx_DecideCommandAC_CommanderCP);
    act_DecideCommandAC_CommanderCP.registerAction(action_CommandCoolerAN_DecideCommandAC_CommanderCP);
    const action_CommandHeaterAN_DecideCommandAC_CommanderCP = new AN_Components_CommandHeaterAN("CommandHeaterAN", { delegates: [] });
    const constraint_CommandHeaterEQ_DecideCommandAC_CommanderCP = new CT_Components_CommandHeaterEQ("CommandHeaterEQ");
    action_CommandHeaterAN_DecideCommandAC_CommanderCP.registerConstraint(constraint_CommandHeaterEQ_DecideCommandAC_CommanderCP);
    const exec_CommandHeaterEx_DecideCommandAC_CommanderCP = new EX_Components_CommandHeaterEx("CommandHeaterEx");
    action_CommandHeaterAN_DecideCommandAC_CommanderCP.registerExecutable(exec_CommandHeaterEx_DecideCommandAC_CommanderCP);
    act_DecideCommandAC_CommanderCP.registerAction(action_CommandHeaterAN_DecideCommandAC_CommanderCP);
    const action_CompareTemperatureAN_DecideCommandAC_CommanderCP = new AN_Components_CompareTemperatureAN("CompareTemperatureAN", { delegates: [] });
    const constraint_CompareTemperatureEQ_DecideCommandAC_CommanderCP = new CT_Components_CompareTemperatureEQ("CompareTemperatureEQ");
    action_CompareTemperatureAN_DecideCommandAC_CommanderCP.registerConstraint(constraint_CompareTemperatureEQ_DecideCommandAC_CommanderCP);
    const exec_CompareTemperatureEx_DecideCommandAC_CommanderCP = new EX_Components_CompareTemperatureEx("CompareTemperatureEx");
    action_CompareTemperatureAN_DecideCommandAC_CommanderCP.registerExecutable(exec_CompareTemperatureEx_DecideCommandAC_CommanderCP);
    act_DecideCommandAC_CommanderCP.registerAction(action_CompareTemperatureAN_DecideCommandAC_CommanderCP);
    this.registerActivity("DecideCommandAC", act_DecideCommandAC_CommanderCP);
    const act_FahrenheitToCelsiusAC_FahrenheitToCelsiusCN = new AC_Components_FahrenheitToCelsiusAC("FahrenheitToCelsiusAC", { component: "FahrenheitToCelsiusCN", inputPorts: [], delegates: [{"from":"loalTemp1","to":"FtC"},{"from":"current1","to":"current1"}] });
    const action_FahrenheitToCelsiusAN_FahrenheitToCelsiusAC_FahrenheitToCelsiusCN = new AN_Components_FahrenheitToCelsiusAN("FahrenheitToCelsiusAN", { delegates: [] });
    const constraint_FahrenheitToCelsiusEQ_FahrenheitToCelsiusAC_FahrenheitToCelsiusCN = new CT_Components_FahrenheitToCelsiusEQ("FahrenheitToCelsiusEQ");
    action_FahrenheitToCelsiusAN_FahrenheitToCelsiusAC_FahrenheitToCelsiusCN.registerConstraint(constraint_FahrenheitToCelsiusEQ_FahrenheitToCelsiusAC_FahrenheitToCelsiusCN);
    const exec_FahrenheitToCelsiusEx_FahrenheitToCelsiusAC_FahrenheitToCelsiusCN = new EX_Components_FahrenheitToCelsiusEx("FahrenheitToCelsiusEx");
    action_FahrenheitToCelsiusAN_FahrenheitToCelsiusAC_FahrenheitToCelsiusCN.registerExecutable(exec_FahrenheitToCelsiusEx_FahrenheitToCelsiusAC_FahrenheitToCelsiusCN);
    act_FahrenheitToCelsiusAC_FahrenheitToCelsiusCN.registerAction(action_FahrenheitToCelsiusAN_FahrenheitToCelsiusAC_FahrenheitToCelsiusCN);
    this.registerActivity("FahrenheitToCelsiusAC", act_FahrenheitToCelsiusAC_FahrenheitToCelsiusCN);
  }

  // Get model metrics for debugging and analysis
  getMetrics() {
    const metrics = {
      activities: Object.keys(this._activities).length,
      activityKeys: Object.keys(this._activities),
      components: 0,
      connectors: 0,
      componentsWithActivities: 0,
      connectorsWithActivities: 0
    };
    this.walkComponents(c => {
      metrics.components++;
      if (c.activityName) metrics.componentsWithActivities++;
    });
    this.walkConnectors(c => {
      metrics.connectors++;
      if (c.activityName) metrics.connectorsWithActivities++;
    });
    return metrics;
  }
}

function createModel(){ 
  const model = new SysADLModel();
  
  model.typeRegistry = {
    'temperature': 'VT_types_temperature',
    'FahrenheitTemperature': 'VT_types_FahrenheitTemperature',
    'CelsiusTemperature': 'VT_types_CelsiusTemperature',
    'Command': 'EN_types_Command',
  };
  
  // Module context for class resolution
  model._moduleContext = {
    PT_Ports_FTemperatureOPT,
    PT_Ports_PresenceIPT,
    PT_Ports_PresenceOPT,
    PT_Ports_CTemperatureIPT,
    PT_Ports_CommandIPT,
    PT_Ports_CommandOPT,
    PT_Ports_CTemperatureOPT,
    CN_Connectors_FahrenheitToCelsiusCN,
    CN_Connectors_PresenceCN,
    CN_Connectors_CommandCN,
    CN_Connectors_CTemperatureCN,
  };
  
  return model;
}

module.exports = { createModel, SysADLModel, VT_types_temperature, VT_types_FahrenheitTemperature, VT_types_CelsiusTemperature, EN_types_Command, DT_types_Commands, DM_types_Temperature, UN_types_Celsius, UN_types_Fahrenheit, PT_Ports_FTemperatureOPT, PT_Ports_PresenceIPT, PT_Ports_PresenceOPT, PT_Ports_CTemperatureIPT, PT_Ports_CommandIPT, PT_Ports_CommandOPT, PT_Ports_CTemperatureOPT };