// Generated by SysADL Transformer v0.3 - Enhanced Architecture
// Features: Simplified activity keys, explicit references, lazy loading

const { Model, Component, Port, SimplePort, CompositePort, Connector, Activity, Action, Enum, Int, Boolean, String, Real, Void, valueType, dataType, dimension, unit, Constraint, Executable } = require('../SysADLBase');


// Ports
class PT_Elements_CTempIPT extends SimplePort {
  constructor(name, opts = {}) {
    super(name, "in", { ...{ expectedType: "Real" }, ...opts });
  }
}
class PT_Elements_CTempOPT extends SimplePort {
  constructor(name, opts = {}) {
    super(name, "out", { ...{ expectedType: "Real" }, ...opts });
  }
}
class PT_Elements_FTempOPT extends SimplePort {
  constructor(name, opts = {}) {
    super(name, "in", { ...{ expectedType: "Real" }, ...opts });
  }
}

// Connectors
class CN_Elements_FarToCelCN extends Connector {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      activityName: "FarToCelAC",
      participantSchema: {
        f: {
          portClass: 'PT_Elements_FTempOPT',
          direction: 'out',
          dataType: 'Real',
          role: 'source'
        },
        c: {
          portClass: 'PT_Elements_CTempIPT',
          direction: 'out',
          dataType: 'Real',
          role: 'target'
        }
      },
      flowSchema: [
        {
          from: 'f',
          to: 'c',
          dataType: 'Real'
        }
      ]
    });
  }
}
class CN_Elements_CelToCelCN extends Connector {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      participantSchema: {
        c1: {
          portClass: 'PT_Elements_CTempOPT',
          direction: 'out',
          dataType: 'Real',
          role: 'source'
        },
        c2: {
          portClass: 'PT_Elements_CTempIPT',
          direction: 'out',
          dataType: 'Real',
          role: 'target'
        }
      },
      flowSchema: [
        {
          from: 'c1',
          to: 'c2',
          dataType: 'Real'
        }
      ]
    });
  }
}

// Components
class CP_Elements_SensorCP extends Component {
  constructor(name, opts={}) {
      super(name, opts);
      // Add ports from component definition
      this.addPort(new PT_Elements_FTempOPT("current", "in", { owner: name }));
    }
}
class CP_Elements_TempMonitorCP extends Component {
  constructor(name, opts={}) {
      super(name, { ...opts, isBoundary: true, activityName: "TempMonitorAC" });
      // Add ports from component definition
      this.addPort(new PT_Elements_CTempIPT("s1", "in", { owner: name }));
      this.addPort(new PT_Elements_CTempIPT("s2", "in", { owner: name }));
      this.addPort(new PT_Elements_CTempOPT("average", "out", { owner: name }));
    }
}
class CP_Elements_StdOutCP extends Component {
  constructor(name, opts={}) {
      super(name, { ...opts, isBoundary: true });
      // Add ports from component definition
      this.addPort(new PT_Elements_CTempIPT("c3", "in", { owner: name }));
    }
}
class CP_Elements_SystemCP extends Component { }

// ===== Behavioral Element Classes =====
// Activity class: FarToCelAC
class AC_Elements_FarToCelAC extends Activity {
  constructor(name, component = null, inputPorts = [], delegates = [], opts = {}) {
    super(name, component, inputPorts, delegates, {
      ...opts,
      inParameters: [{"name":"far","type":"Pin","direction":"in"},{"name":"cel","type":"Pin","direction":"in"}],
      outParameters: []
    });
  }
}

// Activity class: TempMonitorAC
class AC_Elements_TempMonitorAC extends Activity {
  constructor(name, component = null, inputPorts = [], delegates = [], opts = {}) {
    super(name, component, inputPorts, delegates, {
      ...opts,
      inParameters: [{"name":"s1","type":"Pin","direction":"in"},{"name":"s2","type":"Pin","direction":"in"},{"name":"average","type":"Pin","direction":"in"}],
      outParameters: []
    });
  }
}

// Action class: FarToCelAN
class AN_Elements_FarToCelAN extends Action {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [{"name":"far","type":"Pin","direction":"in"}],
      outParameters: [],
      delegates: [{"from":"far","to":"f"},{"from":"FarToCelAN","to":"c"}],
      constraints: ["FarToCelEQ"],
      executableName: "FarToCelEX",
    });
  }
}

// Action class: TempMonitorAN
class AN_Elements_TempMonitorAN extends Action {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [{"name":"t1","type":"Pin","direction":"in"},{"name":"t2","type":"Pin","direction":"in"}],
      outParameters: [],
      delegates: [{"from":"t1","to":"t1"},{"from":"t2","to":"t2"},{"from":"TempMonitorAN","to":"av"}],
      constraints: ["CalcAverageEQ"],
      executableName: "CalcAverageEX",
    });
  }
}

// Constraint class: FarToCelEQ
class CT_Elements_FarToCelEQ extends Constraint {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [],
      outParameters: [],
      equation: "(c == ((5 * (f - 32)) / 9))",
      constraintFunction: function(params) {// Constraint equation: (c == ((5 * (f - 32)) / 9))
          const { f } = params;
          
          // Type validation
          if (typeof f !== 'number') throw new Error('Parameter f must be a Real (number)');
          return c == ((5 * (f - 32)) / 9);
        }
    });
  }
}

// Constraint class: CalcAverageEQ
class CT_Elements_CalcAverageEQ extends Constraint {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [],
      outParameters: [],
      equation: "(av == ((t1 + t2) / 2))",
      constraintFunction: function(params) {// Constraint equation: (av == ((t1 + t2) / 2))
          const { t1, t2 } = params;
          
          // Type validation
          if (typeof t1 !== 'number') throw new Error('Parameter t1 must be a Real (number)');
          if (typeof t2 !== 'number') throw new Error('Parameter t2 must be a Real (number)');
          return av == ((t1 + t2) / 2);
        }
    });
  }
}

// Executable class: FarToCelEX
class EX_Elements_FarToCelEX extends Executable {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [],
      body: "executable def FarToCelEX (in f:Real): out Real {\n\t\treturn 5*(f - 32)/9 ;\n\t}",
      executableFunction: function(params) {
          // Type validation
          // Type validation for f: (auto-detected from usage)
          const { f } = params;
          return 5*(f - 32)/9;
        }
    });
  }
}

// Executable class: CalcAverageEX
class EX_Elements_CalcAverageEX extends Executable {
  constructor(name, opts = {}) {
    super(name, {
      ...opts,
      inParameters: [],
      body: "executable def CalcAverageEX(in temp1:Real,in temp2:Real):out Real{\n\t\treturn (temp1 + temp2)/2 ;\n\t}",
      executableFunction: function(params) {
          // Type validation
          // Type validation for temp1: (auto-detected from usage)
          // Type validation for temp2: (auto-detected from usage)
          const { temp1, temp2 } = params;
          return (temp1 + temp2)/2;
        }
    });
  }
}

// ===== End Behavioral Element Classes =====

class SysADLModel extends Model {
  constructor(){
    super("SysADLModel");
    this.SystemCP = new CP_Elements_SystemCP("SystemCP", { sysadlDefinition: "SystemCP" });
    this.addComponent(this.SystemCP);
    this.SystemCP.s1 = new CP_Elements_SensorCP("s1", { sysadlDefinition: "SensorCP" });
    this.SystemCP.addComponent(this.SystemCP.s1);
    this.SystemCP.s2 = new CP_Elements_SensorCP("s2", { sysadlDefinition: "SensorCP" });
    this.SystemCP.addComponent(this.SystemCP.s2);
    this.SystemCP.stdOut = new CP_Elements_StdOutCP("stdOut", { isBoundary: true, sysadlDefinition: "StdOutCP" });
    this.SystemCP.addComponent(this.SystemCP.stdOut);
    this.SystemCP.tempMon = new CP_Elements_TempMonitorCP("tempMon", { isBoundary: true, sysadlDefinition: "TempMonitorCP" });
    this.SystemCP.addComponent(this.SystemCP.tempMon);

    this.SystemCP.addConnector(new CN_Elements_FarToCelCN("c1"));
    const c1 = this.SystemCP.connectors["c1"];
    c1.bind(this.getPort("temp1"), this.SystemCP.tempMon.getPort("s1"));
    this.SystemCP.addConnector(new CN_Elements_FarToCelCN("c2"));
    const c2 = this.SystemCP.connectors["c2"];
    c2.bind(this.getPort("temp2"), this.SystemCP.tempMon.getPort("s2"));
    this.SystemCP.addConnector(new CN_Elements_CelToCelCN("c3"));
    const c3 = this.SystemCP.connectors["c3"];
    c3.bind(this.SystemCP.tempMon.getPort("average"), this.getPort("avg"));

    const ac_FarToCelAC_FarToCelCN = new AC_Elements_FarToCelAC(
      "FarToCelAC",
      "FarToCelCN",
      [],
      [{"from":"far","to":"far"},{"from":"cel","to":"ftoc"}]
    );
    const an_FarToCelAN_FarToCelAC_FarToCelCN = new AN_Elements_FarToCelAN("FarToCelAN");
    ac_FarToCelAC_FarToCelCN.registerAction(an_FarToCelAN_FarToCelAC_FarToCelCN);
    this.registerActivity("FarToCelAC", ac_FarToCelAC_FarToCelCN);
    const ac_TempMonitorAC_TempMonitorCP = new AC_Elements_TempMonitorAC(
      "TempMonitorAC",
      "TempMonitorCP",
      [],
      [{"from":"s1","to":"t1"},{"from":"s2","to":"t2"},{"from":"average","to":"TempMonitorAN"}]
    );
    const an_TempMonitorAN_TempMonitorAC_TempMonitorCP = new AN_Elements_TempMonitorAN("TempMonitorAN");
    ac_TempMonitorAC_TempMonitorCP.registerAction(an_TempMonitorAN_TempMonitorAC_TempMonitorCP);
    this.registerActivity("TempMonitorAC", ac_TempMonitorAC_TempMonitorCP);
  }

}

function createModel(){ 
  const model = new SysADLModel();
  
  model.typeRegistry = {
  };
  
  // Module context for class resolution
  model._moduleContext = {
    PT_Elements_CTempIPT,
    PT_Elements_CTempOPT,
    PT_Elements_FTempOPT,
    CN_Elements_FarToCelCN,
    CN_Elements_CelToCelCN,
  };
  
  return model;
}

module.exports = { createModel, SysADLModel, PT_Elements_CTempIPT, PT_Elements_CTempOPT, PT_Elements_FTempOPT };