////// AGV.SysADL

Model SysADLArchitecture;
package SysADL.types {
	value type Int {
	}
	value type Boolean {
	}
	value type String {
	}
	value type Void {
	}
	value type Real {
	}
	enum NotificationToSupervisory {
		departed, arrived, passed, traveling
	}
	enum NotificationFromArm {
		loaded, unloaded
	}
	enum CommandToArm {
		load, unload, idle
	}
	enum NotificationFromMotor {
		started, stopped
	}
	enum CommandToMotor {
		start, stop
	}
	datatype Status {
		attributes: location : Location;
		destination : Location;
		command : CommandToArm;
	}
	datatype Location{
		attributes: location : String;
	}
	datatype VehicleData{
		attributes: destination : Location;
		command : CommandToArm;
	}
}
package PortsAGV {
	import SysADL.types;
	port def inLocation {
		flow in Location
	}
	port def outLocation {
		flow out Location
	}
	port def inStatus {
		flow in Status
	}
	port def outStatus {
		flow out Status
	}
	port def inVehicleData {
		flow in VehicleData
	}
	port def outVehicleData {
		flow out VehicleData
	}
	port def inNotificationFromMotor {
		flow in NotificationFromMotor
	}
	port def outNotificationFromMotor {
		flow out NotificationFromMotor
	}
	port def inCommandToMotor {
		flow in CommandToMotor
	}
	port def outCommandToMotor {
		flow out CommandToMotor
	}
	port def inNotificationFromArm {
		flow in NotificationFromArm
	}
	port def outNotificationFromArm {
		flow out NotificationFromArm
	}
	port def inCommandToArm {
		flow in CommandToArm
	}
	port def outCommandToArm {
		flow out CommandToArm
	}
	port def inNotificationToSupervisory {
		flow in NotificationToSupervisory
	}
	port def outNotificationToSupervisory {
		flow out NotificationToSupervisory
	}
	port def IAGVSystem {
		ports: inMoveToStation : inVehicleData {
		}
		outNotifications : outNotificationToSupervisory {
		}
	}
	port def ISupervisorySystem {
		ports: outMoveToStation : outVehicleData {
		}
		inNotifications : inNotificationToSupervisory {
		}
	}
}
package ConnectorsAGV {
	import PortsAGV;
	connector def notifySupervisory {
		participants: ~ nsIPT : inNotificationToSupervisory {
		}
		~ nsOPT : outNotificationToSupervisory {
		}
		flows: NotificationToSupervisory from nsOPT to nsIPT
	}
	connector def sendVehicleData {
		participants: ~ vdOPT : outVehicleData {
		}
		~ vdIPT : inVehicleData {
		}
		flows: VehicleData from vdOPT to vdIPT
	}
	connector def notificationMotor {
		participants: ~ nmOPT : outNotificationFromMotor {
		}
		~ nmIPT : inNotificationFromMotor {
		}
		flows: NotificationFromMotor from nmOPT to nmIPT
	}
	connector def commandArm {
		participants: ~ caOPT : outCommandToArm {
		}
		~ caIPT : inCommandToArm {
		}
		flows: CommandToArm from caOPT to caIPT
	}
	connector def notificationArm {
		participants: ~ naIPT : inNotificationFromArm {
		}
		~ naOPT : outNotificationFromArm {
		}
		flows: NotificationFromArm from naOPT to naIPT
	}
	connector def commandMotor {
		participants: ~ cmOPT : outCommandToMotor {
		}
		~ cmIPT : inCommandToMotor {
		}
		flows: /*Se der um Ctrl+space aqui ele n�o mostra as op��es do escopo*/ CommandToMotor from /*Se der um Ctrl+space aqui ele n�o mostra as op��es do escopo*/ cmOPT to cmIPT
	}
	connector def interactionAGVAndSupervisory {
		participants: ~ iagvs : IAGVSystem {
		}
		~ iss : ISupervisorySystem {
		}
		configuration {
			connectors:
			nS : notifySupervisory bindings /*Se der um Ctrl+space aqui ele n�o mostra as op��es do escopo*/ outNotifications = inNotifications; 
			sVD : sendVehicleData bindings outMoveToStation = inMoveToStation;
		}
	}
	connector def locationVehicle {
		participants: ~ lOPT : outLocation {
		}
		~ lIPT : inLocation {
		}
		flows: Location from lOPT to lIPT
	}
	connector def status {
		participants: ~ sOPT : outStatus {
		}
		~ sIPT : inStatus {
		}
		flows: Status from sOPT to sIPT
	}
}
package ComponentsAGV {
	import PortsAGV;
	import ConnectorsAGV;
	import SysADL.types;
	component def FactoryAutomationSystem {
		configuration {
			components:
			ss : SupervisorySystem {
				using ports: in_outDataS : ISupervisorySystem {
				}
			}
			agvs : AGVSystem [ 1, -1 ] {
				using ports: sendStatus : outStatus {
				}
				in_outDataAgv : IAGVSystem {
				}
			}
			ds : DisplaySystem {
				using ports: receiveStatus : inStatus {
				}
			}
			connectors:
			dataExchange : interactionAGVAndSupervisory bindings in_outDataS = in_outDataAgv;
			updateStatus : status bindings sendStatus = receiveStatus;
		}
	}
	boundary component def DisplaySystem {
		ports: receiveStatus : inStatus {
		}
	}
	boundary component def SupervisorySystem {
		ports: in_outData : ISupervisorySystem {
		}
	}
	component def AGVSystem {
		ports: sendStatus : outStatus {
		}
		in_outData : IAGVSystem {
		}
		configuration {
			components:
			m : Motor {
				using ports: start_stop_in : inCommandToMotor {
				}
				started_stopped_out : outNotificationFromMotor {
				}
			}
			as : ArrivalSensor {
				using ports: arrivalDetected_out : outLocation {
				}
			}
			ra : RobotArm {
				using ports: start : inCommandToArm {
				}
				started : outNotificationFromArm {
				}
			}
			vc : VehicleControl {
				using ports: sendStatus : outStatus {
				}
				arrivalDetected_in : inLocation {
				}
				startArm : outCommandToArm {
				}
				startedArm : inNotificationFromArm {
				}
				started_stopped_in : inNotificationFromMotor {
				}
				start_stop_out : outCommandToMotor {
				}
				in_outData : IAGVSystem {
				}
			}
			connectors:
			arrived : locationVehicle bindings arrivalDetected_out = arrivalDetected_in; 
			ackArm : notificationArm bindings started = startedArm; 
			cmdArm : commandArm bindings startArm = start;
			ackMotor : notificationMotor bindings started_stopped_out = started_stopped_in;
			cmdMotor : commandMotor bindings /*Se der um Ctrl+space aqui ele n�o mostra as op��es do escopo apesar de s� aceitar as op��es definidas no escopo*/ start_stop_out = start_stop_in;
			delegations:
			/*Se der um Ctrl+space aqui ele n�o mostra as op��es do escopo apesar de s� aceitar as op��es definidas no escopo*/ sendStatus to sendStatus 
			in_outData to in_outData
		}
	}
	boundary component def RobotArm {
		ports: start : inCommandToArm {
		}
		started : outNotificationFromArm {
		}
	}
	boundary component def Motor {
		ports: start_stop : inCommandToMotor {
		}
		started_stopped : outNotificationFromMotor {
		}
	}
	boundary component def ArrivalSensor {
		ports: arrivalDetected : outLocation {
		}
	}
	component def VehicleControl {
		ports: sendStatus : outStatus {
		}
		arrivalDetected : inLocation {
		}
		startArm : outCommandToArm {
		}
		startedArm : inNotificationFromArm {
		}
		started_stopped : inNotificationFromMotor {
		}
		start_stop : outCommandToMotor {
		}
		in_outData : IAGVSystem {
		}
		configuration {
			components:
			cs : CheckStation {
				using ports: ack_cs : inNotificationFromMotor {
				}
				location_cs : outLocation {
				}
				destination_cs : inLocation {
				}
				stop : outCommandToMotor {
				}
				arrivalDetected : inLocation {
				}
				passed : outNotificationToSupervisory {
				}
			}
			ca : ControlArm {
				using ports: cmd_ca : inCommandToArm {
				}
				ack_ca : inNotificationFromMotor {
				}
				startArm : outCommandToArm {
				}
			}
			nm : NotifierMotor {
				using ports: inAck : inNotificationFromMotor {
				}
				ack : outNotificationToSupervisory {
				}
				outAck : outNotificationFromMotor {
				}
			}
			sm : StartMoving {
				using ports: move : inVehicleData {
				}
				cmd_sm : outCommandToArm {
				}
				destination : outLocation {
				}
				start : outCommandToMotor {
				}
			}
			na : NotifierArm {
				using ports: arrivedStatus : outNotificationToSupervisory {
				}
				loaded_unloaded : inNotificationFromArm {
				}
			}
			vt : VehicleTimer {
				using ports: AGVStatus : outStatus {
				}
				location_vt : inLocation {
				}
				destination_vt : inLocation {
				}
				cmd : inCommandToArm {
				}
			}
			connectors:
			destinationStation2 : locationVehicle bindings destination = destination_vt; 
			destinationStation : locationVehicle bindings destination = destination_cs;
			command : commandArm bindings cmd_sm = cmd;
			command2 : commandArm bindings cmd_sm = cmd_ca;
			currentLocation : locationVehicle bindings location_cs = location_vt;
			sendNotificationMotor : notificationMotor bindings outAck = ack_ca;
			sendNotificationMotor2 : notificationMotor bindings outAck = ack_cs;
			delegations:
			ack to outNotifications
			arrivedStatus to outNotifications
			move to inMoveToStation
			passed to outNotifications
			loaded_unloaded to startedArm
			inAck to started_stopped
			startArm to startArm 
			AGVStatus to sendStatus 
			start to start_stop 
			stop to start_stop 
			arrivalDetected to arrivalDetected 
		}
	}
	component def VehicleTimer {
		ports: AGVStatus : outStatus {
		}
		location : inLocation {
		}
		destination : inLocation {
		}
		cmd : inCommandToArm {
		}
	}
	component def NotifierArm {
		ports: arrivedStatus : outNotificationToSupervisory {
		}
		loaded_unloaded : inNotificationFromArm {
		}
	}
	component def ControlArm {
		ports: cmd : inCommandToArm {
		}
		ack : inNotificationFromMotor {
		}
		startArm : outCommandToArm {
		}
	}
	component def CheckStation {
		ports: ack : inNotificationFromMotor {
		}
		location : outLocation {
		}
		destination : inLocation {
		}
		stop : outCommandToMotor {
		}
		arrivalDetected : inLocation {
		}
		passed : outNotificationToSupervisory {
		}
	}
	component def NotifierMotor {
		ports: inAck : inNotificationFromMotor {
		}
		ack : outNotificationToSupervisory {
		}
		outAck : outNotificationFromMotor {
		}
	}
	component def StartMoving {
		ports: move : inVehicleData {
		}
		cmd : outCommandToArm {
		}
		destination : outLocation {
		}
		start : outCommandToMotor {
		}
	}
activity def StartMovingAC ( move : VehicleData) : (cmd : CommandToArm, destination : Location, start : CommandToMotor) {
		body {
		actions : sc : SendCommandAN {
				using pins: moveSC : VehicleData;
			}
			sd : SendDestinationAN {
				using pins: moveSD : VehicleData;
			}
			ssm : SendStartMotorAN {
				using pins: moveSSM : VehicleData;
			}
			delegate destination to sc 
			delegate cmd to sd 
			delegate start to ssm
			delegate move to moveSD 
			delegate move to moveSC 
			delegate move to moveSSM
		}
	}
action def SendStartMotorAN ( move : VehicleData ) : CommandToMotor {
	constraint : post-condition SendStartMotorEQ
		delegate SendStartMotorAN to cmd
	}
	action def SendCommandAN ( move : VehicleData ) : CommandToArm {
	constraint : post-condition SendCommandEQ
	delegate SendCommandAN to cmd delegate move to move
	}
	action def SendDestinationAN ( move : VehicleData ) : Location {
	constraint : post-condition SendDestinationEQ
	delegate SendDestinationAN to destination delegate move to move
	}
	activity def NotifierMotorAC ( inStatusMotor : NotificationFromMotor ) : (outStatusMotor : NotificationFromMotor, ack : NotificationToSupervisory) {
		body {
		actions : nagvm : NotifyAGVFromMotorAN {
				using pins: statusMotor : NotificationFromMotor;
			}
			nsm : NotifySupervisoryFromMotorAN {
				using pins: statusMotor : NotificationFromMotor;
			}
			delegate outStatusMotor to nagvm delegate ack to nsm delegate inStatusMotor
			to statusMotor delegate inStatusMotor to statusMotor
		}
	}
	action def NotifyAGVFromMotorAN ( statusMotor : NotificationFromMotor ) : NotificationFromMotor {
	constraint : post-condition NotifyAGVFromMotorEQ
	delegate NotifyAGVFromMotorAN to outStatusMotor delegate
		statusMotor to inStatusMotor
	}
	action def NotifySupervisoryFromMotorAN ( statusMotor : NotificationFromMotor ) : NotificationToSupervisory {
	constraint : post-condition NotifySupervisoryFromMotorEQ
	delegate NotifySupervisoryFromMotorAN to ack
		delegate statusMotor to statusMotor
	}
	activity def CheckStationAC ( statusMotor : NotificationFromMotor ) ( destination : Location ) ( inLocation : Location ) : (stopMotor :
	CommandToMotor, outLocation : Location, passed : NotificationToSupervisory) {
		body {
		actions : cs : CompareStationsAN {
				using pins: statusMotor : NotificationFromMotor; 
				destination : Location; location : Location;
			}
			scl : SendCurrentLocationAN {
				using pins: location : Location;
			}
			sm : StopMotorAN {
				using pins: comparisonResultSM : Boolean;
			}
			pm : PassedMotorAN {
				using pins: comparisonResultPM : Boolean;
			}
			delegate statusMotor to NotificationsMotor 
			delegate destination to	Destinations 
			flow from NotificationsMotor to statusMotor 
			flow from Destinations to destination 
			delegate inLocation to location delegate
			outLocation to scl delegate inLocation to location 
			delegate stopMotor to sm 
			delegate passed to pm 
			flow from cs to comparisonResultPM
			flow from cs to comparisonResultSM
			datastore NotificationsMotor : NotificationFromMotor {
			}
			datastore Destinations : Location {
			}
		}
	}
	action def CompareStationsAN ( statusMotor : NotificationFromMotor, destination : Location, location : Location ) : Boolean {
	constraint : post-condition CompareStationsEQ pre-condition NotificationMotorIsStartedEQ
	delegate CompareStationsAN to result delegate location to
		loc delegate destination to dest
		delegate statusMotor to statusMotor
	}
	action def StopMotorAN ( comparisonResult : Boolean ) : CommandToMotor {
	constraint : post-condition StopMotorEQ
	delegate comparisonResult to result delegate StopMotorAN to cmd
	}
	action def PassedMotorAN ( comparisonResult : Boolean ) : NotificationToSupervisory {
	constraint : post-condition PassedMotorEQ
	delegate PassedMotorAN to ack delegate comparisonResult to result
	}
	action def SendCurrentLocationAN ( location : Location ) : Location {
	constraint : post-condition SendCurrentLocationEQ
	delegate location to inLocation delegate
		SendCurrentLocationAN to outLocation
	}
	activity def ControlArmAC ( cmd : CommandToArm ) ( statusMotor : NotificationFromMotor ) : (startArm : CommandToArm) {
		body {
		actions : ca : ControlArmAN {
				using pins: cmd : CommandToArm;
				statusMotor : NotificationFromMotor;
			}
			delegate startArm to ca delegate cmd to cmd delegate statusMotor to statusMotor
		}
	}
	activity def NotifierArmAC ( statusArm : NotificationFromArm ) :
	(ack : NotificationToSupervisory) {
		body {
		actions : na : NotifierArmAN {
				using pins: statusArm : NotificationFromArm;
			}
			delegate ack to na delegate statusArm to statusArm
		}
	}
	activity def VehicleTimerAC ( destination : Location ) ( location : Location ) ( cmd : CommandToArm ) : (status : Status) {
		body {
		actions : vt : VehicleTimerAN {
				using pins: cmd : CommandToArm;
				destination : Location;
				location : Location;
			}
			delegate status to vt delegate cmd to cmd delegate destination to
			destination delegate location to location
		}
	}
	action def ControlArmAN ( cmd : CommandToArm, statusMotor : NotificationFromMotor ) : CommandToArm {
	constraint : post-condition ControlArmEQ
	delegate ControlArmAN to startArm delegate statusMotor to
		statusMotor delegate cmd to cmd
	}
	action def NotifierArmAN ( statusArm : NotificationFromArm ) : NotificationToSupervisory {
	constraint : post-condition NotifierArmEQ
	delegate NotifierArmAN to ack
	}
	action def VehicleTimerAN ( destination : Location, location : Location, cmd : CommandToArm ) : Status {
	constraint : post-condition VehicleTimerEQ
	delegate VehicleTimerAN to s delegate location to
		loc delegate destination to dest delegate cmd
		to cmd
	}
	constraint SendStartMotorEQ () : 
		(cmd : CommandToMotor) {
			equation = cmd == /*Se der um Ctrl+space aqui ele n�o mostra as op��es do escopo*/ CommandToMotor::start
		}
	constraint SendDestinationEQ ( move : VehicleData ) :
		(destination : Location) {
			equation = destination == move->destination
		}
	constraint NotifyAGVFromMotorEQ ( inStatusMotor : NotificationFromMotor ) :
		(outStatusMotor : NotificationFromMotor) {
			equation = outStatusMotor == inStatusMotor
		}
	constraint SendCommandEQ ( move : VehicleData ) :
		(cmd : CommandToArm) {
			equation = cmd == move->command
		}
	constraint NotifySupervisoryFromMotorEQ ( statusMotor : NotificationFromMotor ) :
		(ack : NotificationToSupervisory) {
			equation = statusMotor == NotificationFromMotor::started ? 
			ack == NotificationToSupervisory::departed : 
			ack == NotificationToSupervisory::traveling
		}
	constraint NotificationMotorIsStartedEQ (statusMotor : NotificationFromMotor) {
			equation = statusMotor == NotificationFromMotor::started
		}
	constraint CompareStationsEQ ( dest : Location, loc : Location ) :
		(result : Boolean) {
			equation = dest == loc ? result == true : result == false
		}
	constraint StopMotorEQ ( result : Boolean ) :
		(cmd : CommandToMotor) {
			equation = result == true ? cmd == CommandToMotor::stop : cmd == SysADL.types.Void
		}
	constraint PassedMotorEQ ( result : Boolean ) :
		(ack : NotificationToSupervisory) {
			equation = result == false ? ack == NotificationToSupervisory::passed : ack == SysADL.types.Void
		}
	constraint SendCurrentLocationEQ ( inLocation : Location ) :
		(outLocation : Location) {
			equation = outLocation == inLocation
		}
	constraint ControlArmEQ ( cmd : CommandToArm, statusMotor : NotificationFromMotor ) :
		(startArm : CommandToArm) {
			equation = statusMotor == NotificationFromMotor::stopped ?
			startArm == cmd : startArm == CommandToArm::idle
		}
	constraint NotifierArmEQ () :
		(ack : NotificationToSupervisory) {
			equation = ack == NotificationToSupervisory::arrived
		}
	constraint VehicleTimerEQ ( dest : Location, loc : Location, cmd : CommandToArm ) :
		(s : Status) {
			equation = s->destination == dest && s->location == loc && s->command == cmd
		}
	executable def SendStartMotorEX ( in move : VehicleData) : out CommandToMotor {
		return CommandToMotor::start;
	}
	executable def SendCommandEX ( in move : VehicleData) : out CommandToArm {
		return move->command;
	}
	executable def SendDestinationEX ( in move : VehicleData) : out Location {
		return move->destination;
	}
	executable def NotifyAGVFromMotorEX ( in statusMotor : NotificationFromMotor) : 
	out NotificationFromMotor{
		return statusMotor;
	}
	executable def NotifySupervisoryFromMotorEX ( in statusMotor : NotificationFromMotor) : 
		out	NotificationToSupervisory {
		if (statusMotor == NotificationFromMotor::started) 
			return NotificationToSupervisory::departed;
		else
			return NotificationToSupervisory::traveling;
	}
	executable def CompareStationsEX ( in destination : Location, in location : Location, 
		in statusMotor : NotificationFromMotor) : 	out Boolean {
		if(statusMotor == NotificationFromMotor::started && destination == location)
			return true;
		else
			return false;
	}
	executable def StopMotorEX ( in comparisonResult : Boolean) :
	out CommandToMotor {
		if(comparisonResult == true)
			return CommandToMotor::stop;
		else
			return null;
	}
	executable def PassedMotorEX ( in comparisonResult : Boolean) :
	out NotificationToSupervisory {
		if(comparisonResult == false)
			return NotificationToSupervisory::passed;
		else
			return null;
	}
	executable def SendCurrentLocationEX ( in location : Location)
	: out Location {
		return location;
	}
	executable def ControlArmEX ( in statusMotor : NotificationFromMotor, in cmd : CommandToArm) : out CommandToArm {
		if(statusMotor == NotificationFromMotor::stopped)
			return cmd;
		else
			return CommandToArm::idle;
	}
	executable def NotifierArmEX ( in statusArm : NotificationFromArm) : 
	out	NotificationToSupervisory {
		return NotificationToSupervisory::arrived;
	}
	executable def VehicleTimerEX ( in location : Location, in cmd : CommandToArm, 
		in destination : Location) : out Status {
		
		let s : Status;
		s->destination = destination;
		s->location = location;
		s->command = cmd;
		
		return s;
	}
}
Requirement RequestMove ( 1.0 ) {
	text = "The external Supervisory System sends a \"Move\" command to the AGV System requesting it to move to a factory station and load/unload a part."
	satisfied by ComponentsAGV.SupervisorySystem;
}
Requirement ReceiveNotifications ( 1.1 ) {
	text = "The Supervisory System should receive the AGV system notifications." 
	satisfied by ComponentsAGV.SupervisorySystem;
}
Requirement ControlLoadingUnloading ( 2.0 ) {
	text = "The AGV system must control the loading and unloading of parts between stations factory, interacting with Supervisory and Display Systems."
	satisfied by ComponentsAGV.AGVSystem;
	Requirement MoveToStation ( 2.1 ) {
		text = "An AGV can move along a track in the factory in a clockwise direction, and start and stop at factory stations."
		Requirement CommandMotorStartMove ( 2.2 ) {
			text = "The AGV System sends a \"Start Motor\" command to Motor to start moving."
			satisfied by ComponentsAGV.StartMoving;
		}
		Requirement SendStartedAcknowledgement ( 2.3 ) {
			text = "Motor sends \"Started\" acknowledge message to AGV System."
			satisfied by ComponentsAGV.Motor;
		}
		Requirement DetectArrived ( 2.4 ) {
			text = "The arrival sensor must detect that it has arrived at the factory station and notifies the AGV System."
			satisfied by ComponentsAGV.ArrivalSensor;
		}
		Requirement CheckDestination ( 2.5 ) {
			text = "The AGV System checks if the current station is the arrival station."
			satisfied by ComponentsAGV.CheckStation;
		}
		Requirement CommandMotorStopMove ( 2.6 ) {
			text = "If this station is the destination station, the AGV System sends \"Stop Moto\" message to Motor, else the vehicle passes the station without stopping."
			satisfied by ComponentsAGV.CheckStation;
		}
		Requirement SendStoppedAcknowledgement ( 2.7 ) {
			text = "Motor sends \"Stopped\" acknowledge message to AGV System."
			satisfied by ComponentsAGV.Motor;
		}
		Requirement CommandLoadUnload ( 2.8 ) {
			text = "The AGV System sends \"Load/Unload\" message to Robot Arm."
			satisfied by ComponentsAGV.ControlArm;
		}
		Requirement SendAcknowledgement ( 2.9 ) {
			text = "Robot Arm sends;Load/Unload acknowledge message to AGV System indicating that the arm has finished."
			satisfied by ComponentsAGV.RobotArm;
		}
		Requirement NotifySupervisorySystem ( 2.10 ) {
			text = "The AGV System must notify the supervisory system when the vehicle start moving or get to a station."
		}
	}
	Requirement SendVehicleStatus ( 2.13 ) {
		text = "The AGV system should send vehicle status to an external Display System every 30 seconds."
		satisfied by ComponentsAGV.VehicleTimer;
	}
}
Requirement NotifyFromMotor ( 2.11 ) {
	text = "The AGV System must send a \"Departed\" message to the Supervisory System when vehicle start moving and a \"Passed\" message when vehicle come to a different station of destination station."
	satisfied by ComponentsAGV.NotifierMotor;
	derive ControlLoadingUnloading.MoveToStation.NotifySupervisorySystem;
}
Requirement NotifyFromArm ( 2.12 ) {
	text = "The AGV System must send a \"Arrived\" message when the part has been loaded/unloaded."
	satisfied by ComponentsAGV.NotifierArm;
	derive ControlLoadingUnloading.MoveToStation.NotifySupervisorySystem;
}
Requirement ReceiveVehicleStatus ( 3.0 ) {
	text = "The Display System must receive of AGV system the vehicle status."
	satisfied by ComponentsAGV.DisplaySystem;
}
  
allocations {
	activity CheckStationAC to CheckStation 
	activity ControlArmAC to ControlArm
	activity NotifierArmAC to NotifierArm
	activity NotifierMotorAC to NotifierMotor
	activity StartMovingAC to StartMoving
	activity VehicleTimerAC to VehicleTimer
	executable CompareStationsEX to CompareStationsAN
	executable ControlArmEX to ControlArmAN
	executable NotifierArmEX to NotifierArmAN
	executable NotifyAGVFromMotorEX to NotifyAGVFromMotorAN
	executable NotifySupervisoryFromMotorEX to NotifySupervisoryFromMotorAN 
	executable PassedMotorEX to PassedMotorAN
	executable SendCommandEX to SendCommandAN
	executable SendCurrentLocationEX to SendCurrentLocationAN
	executable SendDestinationEX to SendDestinationAN
	executable SendStartMotorEX to SendStartMotorAN
	executable StopMotorEX to StopMotorAN
	executable VehicleTimerEX to VehicleTimerAN
}

///////simple.sysadl

Model SysADLModel ; 
package SysADL.types { 
	value type Int { } 
	value type Boolean { } 
	value type String { } 
	value type Void { } 
	value type Real { }
} 
package Elements { 
	import SysADL.types ;     
	component def SystemCP { ports :  
		configuration { 
			components : 
			s1 : SensorCP { 
				using ports : temp1 : FTempOPT ;
			}
			s2 : SensorCP { 
				using ports : temp2 : FTempOPT ;
			} 
			tempMon : TempMonitorCP { 
				using ports : 
					s1 : CTempIPT ; 
					s2 : CTempIPT ; 
					average : CTempOPT ;
			} 
		stdOut : StdOutCP { using ports : avg : CTempIPT ; } connectors : 
			c1 : FarToCelCN bindings temp1 = s1 ; 
			c2 : FarToCelCN bindings temp2 = s2 ; 
		c3 : CelToCelCN bindings average = avg ; }
	} 
	boundary component def TempMonitorCP { ports : s1 : CTempIPT ; s2 : CTempIPT ; average : CTempOPT ; }
	component def SensorCP { ports : current : FTempOPT ; }
	boundary component def StdOutCP { ports : c3 : CTempIPT ; } 

	port def CTempIPT { flow in Real } 
	port def CTempOPT { flow out Real } 
	port def FTempOPT { flow in Real } 
	
	connector def FarToCelCN { 
		participants : 
			~ f : FTempOPT ; 
			~ c : CTempIPT ;
		flows : Real from f to c 
	} 
	connector def CelToCelCN { 
		participants : 
			~ c1 : CTempOPT ; 
			~ c2 : CTempIPT ; 
		flows : Real from c1 to c2
	} 
	activity def FarToCelAC ( far : Real ) : ( cel : Real ) { 
		body { 
			actions : ftoc : FarToCelAN { 
				using pins : far : Real ;
			} 
			delegate far to far 
			delegate cel to ftoc
		}
	} 

	action def FarToCelAN ( far : Real ) : Real { 
		constraint : post-condition FarToCelEQ
		delegate far to f 
		delegate FarToCelAN to c 
	} 

	constraint FarToCelEQ ( f : Real ) : ( c : Real ) { 
		equation = c == (5*(f - 32)/9)
	} 

	activity def TempMonitorAC ( s1 : Real ) ( s2 : Real ) : ( average : Real ) { 
		body { actions : TempMonitorAN : TempMonitorAN { using pins : t1 : Real ; t2 : Real ; } delegate s1 to t1 delegate s2 to t2 delegate average to TempMonitorAN }
	} 
	
	action def TempMonitorAN ( t1 : Real , t2 : Real ) : Real { 
		constraint : post-condition CalcAverageEQ
		delegate t1 to t1 
		delegate t2 to t2 delegate 
		TempMonitorAN to av 
	} 
	
	constraint CalcAverageEQ ( t1 : Real , t2 : Real ) : ( av : Real ) 
	{ 
		equation = av == (t1 + t2)/2
	} 
	
	executable def FarToCelEX (in f:Real): out Real {
		return 5*(f - 32)/9 ;
	}
	executable def CalcAverageEX(in temp1:Real,in temp2:Real):out Real{
		return (temp1 + temp2)/2 ;
	}	
}

allocations { 
	activity FarToCelAC to FarToCelCN 
	activity TempMonitorAC to TempMonitorCP
	executable FarToCelEX to FarToCelAN 
	executable CalcAverageEX to TempMonitorAN 
}


///////// RTC.sysadl

Model SysADLModel ; 
package types {
  value type Int {}
  value type Boolean {}
  value type String {}
  value type Void {}
  value type Real {}
  enum Command {On , Off }
  datatype Commands {attributes : heater : Command ; cooler : Command ; }
  dimension Temperature unit Celsius {dimension = Temperature }
  unit Fahrenheit {dimension = Temperature }
  value type temperature extends Real { dimension = Temperature }
  value type FahrenheitTemperature extends temperature { unit = Fahrenheit dimension = Temperature }
  value type CelsiusTemperature extends temperature { unit = Celsius dimension = Temperature } 
}
package Ports { import types ; port def FTemperatureOPT { flow out FahrenheitTemperature }
  port def PresenceIPT { flow in Boolean }
  port def PresenceOPT { flow out Boolean }
  port def CTemperatureIPT { flow in CelsiusTemperature }
  port def CommandIPT { flow in Command }
  port def CommandOPT { flow out Command }
  port def CTemperatureOPT { flow out CelsiusTemperature }
}
package Connectors { 
  	import types ; 
  	import Ports ; 
  	connector def FahrenheitToCelsiusCN { 
  		participants : 
  			~ Ft : FTemperatureOPT ; 
  			~ Ct : CTemperatureIPT ; 
		flows : 
			FahrenheitTemperature from Ft to Ct
  	}
  connector def PresenceCN { 
  		participants : 
  			~ pOut : PresenceOPT ; 
  			~ pIn : PresenceIPT ; 
  		flows : 
  			Boolean from pOut to pIn
  }
  connector def CommandCN { 
  		participants : 
  			~ commandOut : CommandOPT ; 
  			~ commandIn : CommandIPT ; 
  		flows : 
  			Command from commandOut to commandIn
  }
  connector def CTemperatureCN { 
  		participants : 
  			~ CtOut : CTemperatureOPT ; 
  			~ ctIn : CTemperatureIPT ; 
  		flows : 
  			CelsiusTemperature from CtOut to ctIn
  }
  }
  package Components { 
  	import Connectors ; 
  	import types ; 
  	import Ports ;
	component def RTCSystemCFD {	
		 configuration {	 
		 	components : 
		 		s1 : TemperatureSensorCP {	 using ports : current1 : FTemperatureOPT ; }
	  			s2 : TemperatureSensorCP {	 using ports : current2 : FTemperatureOPT ; }
				s3 : PresenceSensorCP {	 using ports : detectedS : PresenceOPT ; }
	  			ui : UserInterfaceCP {	 using ports : desired : CTemperatureOPT ; }
	  			a2 : CoolerCP {	 using ports : controllerC : CommandIPT ; }
	  			a1 : HeaterCP {	 using ports : controllerH : CommandIPT ; }
	  			rtc : RoomTemperatureControllerCP {	 
	  				using ports : 
	  					detected : PresenceIPT ; 
	  					localtemp1 : CTemperatureIPT ; 
	  					localTemp2 : CTemperatureIPT ; 
	  					userTemp : CTemperatureIPT ; 
	  					heating : CommandOPT ; 
	  					cooling : CommandOPT ; 
	  			}
	  		connectors : 
	  			c1 : FahrenheitToCelsiusCN bindings current1 = localtemp1 ; 
	  			uc : CTemperatureCN bindings desired = userTemp ; 
	  			cc2 : CommandCN bindings cooling = controllerC ; 
	  			pc : PresenceCN bindings detectedS = detected ; 
	  			c2 : FahrenheitToCelsiusCN bindings current2 = localTemp2 ; 
	  			cc1 : CommandCN bindings heating = controllerH ; 
	  	}
	  }

	component def RoomTemperatureControllerCP {	 
		ports : detectedRTC : PresenceIPT ; localtemp1 : CTemperatureIPT ; localTemp2 : CTemperatureIPT ; userTempRTC : CTemperatureIPT ; heatingRTC : CommandOPT ; coolingRTC : CommandOPT ; 
		configuration {	 
			components : 
				sm : SensorsMonitorCP {	 
					using ports : s1 : CTemperatureIPT ; 
						s2 : CTemperatureIPT ; 
						average : CTemperatureOPT ;
				}
	  			cm : CommanderCP {	 
	  				using ports : 
	  					target2 : CTemperatureIPT ; 
	  					average2 : CTemperatureIPT ; 
	  					heating : CommandOPT ; 
	  					cooling : CommandOPT ;
	  			}
	  			pc : PresenceCheckerCP {	 
	  				using ports : 
	  					detected : PresenceIPT ; 
  						userTemp : CTemperatureIPT ; 
  						target : CTemperatureOPT ;
	  			}
	  		connectors : 
	  			target : CTemperatureCN bindings target = target2 ; 
	  			average : CTemperatureCN bindings average = average2 ; 
  			delegations :
  				userTemp to userTempRTC 
  				detected to detectedRTC 
  				s1 to localtemp1 
  				s2 to localTemp2 
  				heating to heatingRTC 
  				cooling to coolingRTC 
  		}
	  } 
	boundary component def TemperatureSensorCP {	 
	  		ports : current : FTemperatureOPT ;
	  } 
	boundary component def PresenceSensorCP {	 
	  		ports : detected : PresenceOPT ;
	  } 
	boundary component def UserInterfaceCP {	 
	  		ports : desired : CTemperatureOPT ;
	  } 
	boundary component def HeaterCP {	 
	  		ports : controllerH : CommandIPT ;
	  } 
	boundary component def CoolerCP {	 
	  		ports : controllerC : CommandIPT ;
	  }
	component def PresenceCheckerCP {	 
		ports : detected : PresenceIPT ; userTemp : CTemperatureIPT ; target : CTemperatureOPT ;
	}

	component def CommanderCP {	 
		ports : target2 : CTemperatureIPT ; average2 : CTemperatureIPT ; heating : CommandOPT ; cooling : CommandOPT ;
	}

	component def SensorsMonitorCP { 
		ports : s1 : CTemperatureIPT ; s2 : CTemperatureIPT ; average : CTemperatureOPT ;
	}
	
	constraint CalculateAverageTemperatureEQ ( t1 : CelsiusTemperature , t2 : CelsiusTemperature ) : ( av : CelsiusTemperature ) {
		equation = av == (t1 + t2)/2
	} 
	activity def CalculateAverageTemperatureAC ( s1 : CelsiusTemperature ) ( s2 : CelsiusTemperature ) : ( average : CelsiusTemperature ) { 
		body { 
			actions : CalcAvTemp : CalculateAverageTemperatureAN { 
				using pins : s1 : CelsiusTemperature ; 
				s2 : CelsiusTemperature ;
			} 
			delegate s1 to s1 
			delegate s2 to s2 
			delegate average to CalcAvTemp
		}
	} 
	action def CalculateAverageTemperatureAN ( t1 : CelsiusTemperature , t2 : CelsiusTemperature ) : CelsiusTemperature { 
		constraint : post-condition CalculateAverageTemperatureEQ
	} 
	activity def CheckPresenceToSetTemperatureAC ( detected : Boolean ) ( userTemp : CelsiusTemperature ) : ( target : CelsiusTemperature ) { 
		body { 
			actions : CheckPeresenceToSetTemperatureAN : CheckPeresenceToSetTemperatureAN { 
				using pins : 
					detected : Boolean ; 
					userTemp : CelsiusTemperature ;
			} 
			delegate detected to detected 
			delegate userTemp to userTemp 
			delegate target to CheckPeresenceToSetTemperatureAN
		}
	} 
	activity def DecideCommandAC ( average2 : CelsiusTemperature ) ( target2 : CelsiusTemperature ) : ( cooling : Command , heating : Command ) { 
		body { 
			actions : ct : CompareTemperatureAN { using pins : average2 : CelsiusTemperature ; target2 : CelsiusTemperature ; } cmdH : CommandHeaterAN { using pins : cmdsH : Commands ; } cmdC : CommandCoolerAN { using pins : cmdsC : Commands ; } delegate average2 to average2 delegate target2 to target2 delegate heating to cmdH delegate cooling to cmdC flow from ct to cmdsH flow from ct to cmdsC
		}
	} 
	activity def FahrenheitToCelsiusAC ( current1 : FahrenheitTemperature ) : ( loalTemp1 : CelsiusTemperature ) { 
		body { actions : FtC : FahrenheitToCelsiusAN { using pins : current1 : FahrenheitTemperature ; } delegate loalTemp1 to FtC delegate current1 to current1 }
	} 
	action def CompareTemperatureAN (average2 : CelsiusTemperature , target2 : CelsiusTemperature) 
		: Commands { 
			constraint : post-condition CompareTemperatureEQ 
		} 
	action def CommandHeaterAN ( cmds : Commands ) 
		: Command { 
			constraint : post-condition CommandHeaterEQ
		} 
	action def CommandCoolerAN ( cmds : Commands ) 
		: Command { 
			constraint : post-condition CommandCoolerEQ
		} 
	constraint CompareTemperatureEQ ( target : CelsiusTemperature , average : CelsiusTemperature ) 
		: ( cmds : Commands ) { 
			equation = average > target ? cmds == types.Commands.heater->Off && types.Commands.cooler->On : types.Commands.heater->On && cmds == types.Commands.cooler->Off
		} 
	constraint FahrenheitToCelsiusEQ ( f : FahrenheitTemperature ) 
		: ( c : CelsiusTemperature ) { 
			equation = c == (5*(f - 32)/9)
		} 
	constraint CommandHeaterEQ ( cmds : Commands ) 
		: ( c : Command ) { 
			equation = c == cmds->heater 
		} 
	constraint CommandCoolerEQ ( cmds : Commands ) : ( c : Command ) {equation = c == cmds->cooler } 
	action def FahrenheitToCelsiusAN ( current1 : FahrenheitTemperature ) : CelsiusTemperature { constraint : post-condition FahrenheitToCelsiusEQ } 	
	action def CheckPeresenceToSetTemperatureAN ( detected : Boolean , userTemp : CelsiusTemperature ) : CelsiusTemperature { constraint : post-condition CheckPresenceToSetTemperatureEQ } 
	constraint CheckPresenceToSetTemperatureEQ ( detected : Boolean , userTemp : CelsiusTemperature ) : ( target : CelsiusTemperature ) {equation = detected == true ? target == userTemp : target == 2 } 
	executable def CommandCoolerEx(in cmds:Commands): out Command{return cmds->cooler ; } 
	executable def CommandHeaterEx(in cmds:Commands): out Command{return cmds->heater ; }
	executable def FahrenheitToCelsiusEx(in f:FahrenheitTemperature): out CelsiusTemperature{return 5*(f - 32)/9 ; }
	executable def CalculateAverageTemperatureEx(in temp1:CelsiusTemperature,in temp2:CelsiusTemperature):out CelsiusTemperature{return (temp1 + temp2)/2 ; }
	executable def CheckPresenceToSetTemperature(in presence:Boolean, in userTemp:CelsiusTemperature):out CelsiusTemperature{if(presence == true) return userTemp; else return 2; }
	executable def CompareTemperatureEx(in target:CelsiusTemperature, in average:CelsiusTemperature):out Commands{let heater:Command = types.Command::Off; let cooler:Command = types.Command::Off; if(average > target) {heater = types.Command::Off; cooler = types.Command::On ; } else {heater = types.Command::On; cooler = types.Command::Off ;} } } 
	
	allocations { 
		activity FahrenheitToCelsiusAC to FahrenheitToCelsiusCN 
		activity DecideCommandAC to CommanderCP 
		activity CheckPresenceToSetTemperatureAC to PresenceCheckerCP 
		activity CalculateAverageTemperatureAC to SensorsMonitorCP 
		executable FahrenheitToCelsiusEx to FahrenheitToCelsiusAN 
		executable CompareTemperatureEx to CompareTemperatureAN 
		executable CommandHeaterEx to CommandHeaterAN 
		executable CommandCoolerEx to CommandCoolerAN 
		executable CheckPresenceToSetTemperature to CheckPeresenceToSetTemperatureAN 
		executable CalculateAverageTemperatureEx to CalculateAverageTemperatureAN
	}