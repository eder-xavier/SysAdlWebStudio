////////////////////////////////sysadl-interpreter

Propósito: É o núcleo do simulador, responsável por interpretar o modelo SysADL do editor CodeMirror,
construir o modelo em memória, executar a simulação e emitir eventos para visualização.

Estrutura e Funcionalidades:

    Modelo de Dados (sysadlModel):
        Um objeto global que armazena o modelo SysADL:
            components: Componentes (e.g., RTCPkg.Sensor, RTCPkg.ctrl1).
            ports: Portas (e.g., RTCPkg.s1.temp).
            connectors: Conectores (e.g., RTCPkg.SensorToController).
            flows: Fluxos diretos (e.g., RTCPkg.Sensor.temp -> RTCPkg.Controller.temp).
            executables: Funções executáveis (e.g., RTCPkg.Regulate).
            configurations: Configurações de instâncias (e.g., s1, h1).
            protocols, constraints, dataTypes, allocations, requirements: Outros elementos do modelo.
            simulationInputs: Entradas de simulação (e.g., flow RTCPkg.s1.temp = {"value":26, "unit":"Celsius"}).
        Serve como a fonte de verdade para a simulação e visualização.
    Estado da Simulação (simulationState):
        Gerencia a execução passo a passo:
            steps: Array de funções assíncronas representando cada passo da simulação (e.g., atualizar uma porta, propagar um fluxo).
            currentStep: Índice do passo atual.
            isPaused, isRunning: Controlam play/pause.
        Usado para suportar os botões "Play", "Pause" e "Reset".
    Função parseProtocolBody:
        Analisa o corpo de um protocolo (e.g., TempControl), extraindo ações como send, receive, e controles (always, several).
        Exemplo: Converte send "HEATING" via RTCPkg.Controller.heaterCtrl em { type: "Send", value: "HEATING", port: "RTCPkg.Controller.heaterCtrl" }.
        Usado para simular comunicações entre componentes.
    Função interpretSysADL(fullRun):
        Entrada: Código SysADL do editor (window.editor.getValue()).
        Saída: Preenche sysadlModel, executa a simulação e atualiza o log/diagrama.
        Etapas:
            Inicialização: Limpa sysadlModel e simulationState (se fullRun).
            Parser: Itera pelas linhas do código, identificando blocos ({}) e declarações:
                Blocos: package, component, connector, executable, configuration, simulation, etc.
                Declarações: flow, allocation, Model.
                Usa variáveis como currentBlock, blockLines, currentComponent, currentPackage para rastrear o contexto.
            Construção do Modelo:
                Preenche sysadlModel com objetos como SysADLComponent, SysADLPort, etc., usando classes de sysadl-runtime-classes.js.
                Exemplo: component def Sensor cria sysadlModel.components["RTCPkg.Sensor"].
            Simulação:
                Valida requisitos (requirements) usando evaluateConstraint de sysadl-utils.js.
                Aplica entradas de simulação (simulationInputs.flows).
                Propaga fluxos (flows) usando SysADLFlow.propagate.
                Executa atividades em componentes configurados.
                Executa protocolos (protocols) e alocações (allocations).
                Executa executáveis não alocados.
            Eventos de Visualização:
                Emite portUpdated, flowPropagated, simulationStart, simulationEnd para o sysadl-visualizer.js.
                Exemplo: visualizer.emit("portUpdated", { port: "RTCPkg.s1.temp", value: {"value":26, "unit":"Celsius"} }).
            Log e Trace:
                Escreve no <div id="log"> mensagens de progresso (e.g., "Port initialized").
                Mantém trace para o resumo final.
        Modo Passo a Passo:
            Se !fullRun, armazena ações em simulationState.steps ao invés de executá-las diretamente.
            Permite pausar/continuar via startSimulation, pauseSimulation.
    Funções de Controle da Simulação:
        resetSimulation(): Limpa o estado e reinicia o diagrama/log.
        startSimulation(): Executa passos sequencialmente com atraso (1000ms).
        pauseSimulation(): Pausa a execução.
        executeStep(): Executa o próximo passo em simulationState.steps.

Interações:

    Usa sysadl-runtime-classes.js para instanciar objetos (e.g., SysADLComponent).
    Chama sysadl-utils.js para funções como resolveQualifiedName, parseParams, evaluateConstraint.
    Assume que sysadl-parser.js fornece parseExecutableBody.
    Emite eventos para sysadl-visualizer.js atualizar o diagrama.
    Lê o editor via window.editor (CodeMirror).

RTC Exemplo:

    Interpreta component def Sensor e cria RTCPkg.Sensor com porta temp.
    Aplica flow RTCPkg.s1.temp = {"value":26, "unit":"Celsius"} e emite portUpdated.
    Propaga RTCPkg.s1.temp -> RTCPkg.ctrl1.temp via conn1 e emite flowPropagated.


//////////////////////////////////////////////sysadl-visualizer.js
    
Propósito: Gera e atualiza o diagrama Mermaid.js, visualizando a arquitetura (componentes, portas, conectores) e a simulação (portas ativas em azul, fluxos em verde).

Estrutura e Funcionalidades:

    Classe SysADLVisualizer:
        Construtor: Recebe sysadlModel e o ID do elemento DOM (diagram).
        Mantém estado:
            activeFlows: Set de fluxos ativos (e.g., RTCPkg.s1.temp-->RTCPkg.ctrl1.temp).
            activePorts: Mapa de portas e seus valores (e.g., RTCPkg.s1.temp: {"value":26, "unit":"Celsius"}).
            eventEmitter: Gerencia eventos (portUpdated, flowPropagated).
    Métodos de Eventos:
        on(event, callback): Registra listeners.
        emit(event, data): Dispara eventos.
        initializeEventListeners():
            flowPropagated: Adiciona fluxo a activeFlows, atualiza portas e renderiza o diagrama após 500ms.
            portUpdated: Atualiza activePorts e renderiza.
            simulationStart/reset: Limpa estados e renderiza.
            simulationEnd: Renderiza o estado final.
    Geração do Diagrama (generateMermaidCode):
        Cria código Mermaid (graph TD).
        Componentes: Inclui apenas instâncias da configuração (e.g., RTCPkg.s1, não RTCPkg.Sensor).
            Exemplo: RTCPkg.s1[RTCPkg.s1];.
        Portas: Mostra portas como nós circulares conectadas aos componentes.
            Exemplo: RTCPkg.s1.temp((temp : Temperature)) --> RTCPkg.s1;.
            Adiciona tooltips: RTCPkg.s1.temp:::tooltip --> RTCPkg.s1.temp; classDef tooltip tooltip:"{\"value\":26,\"unit\":\"Celsius\"}";.
            Portas ativas têm fill:#87CEEB (azul).
        Conectores: Mostra conexões entre portas com rótulos.
            Exemplo: RTCPkg.s1.temp -->|RTCPkg.conn1| RTCPkg.ctrl1.temp;.
            Conectores ativos têm stroke:#32CD32 (verde).
        Retorna o código Mermaid como string.
    Renderização (renderDiagram):
        Usa mermaid.render para converter o código Mermaid em SVG.
        Insere o SVG no <div id="diagram">.
        Trata erros exibindo mensagens no diagram.
    Inicialização (initialize):
        Renderiza o diagrama inicial e emite simulationStart.

Interações:

    Depende de sysadlModel preenchido por sysadl-interpreter.js.
    Recebe eventos de sysadl-interpreter.js para atualizar o diagrama.
    Usa Mermaid.js via CDN.

RTC Exemplo:

    Mostra RTCPkg.s1, RTCPkg.h1, RTCPkg.c1, RTCPkg.ctrl1.
    Destaca RTCPkg.s1.temp em azul quando inicializado com {"value":26, "unit":"Celsius"}.
    Mostra RTCPkg.s1.temp -->|RTCPkg.conn1| RTCPkg.ctrl1.temp em verde durante propagação.
    Exibe tooltip com {"value":26, "unit":"Celsius"} ao passar o mouse sobre RTCPkg.s1.temp.



//////////////////////////////////////sysadl-runtime-classes.js
